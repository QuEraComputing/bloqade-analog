* bloqade
    * [analog](bloqade/analog/index.md)
        * [atom_arrangement](bloqade/analog/atom_arrangement.md)
        * [builder](bloqade/analog/builder/index.md)
            * [args](bloqade/analog/builder/args.md)
            * [assign](bloqade/analog/builder/assign.md)
            * [backend](bloqade/analog/builder/backend/index.md)
                * [bloqade](bloqade/analog/builder/backend/bloqade.md)
                * [braket](bloqade/analog/builder/backend/braket.md)
                * [quera](bloqade/analog/builder/backend/quera.md)
            * [coupling](bloqade/analog/builder/coupling.md)
            * [drive](bloqade/analog/builder/drive.md)
            * [field](bloqade/analog/builder/field.md)
            * [parallelize](bloqade/analog/builder/parallelize.md)
            * [parse](bloqade/analog/builder/parse/index.md)
                * [builder](bloqade/analog/builder/parse/builder.md)
                * [stream](bloqade/analog/builder/parse/stream.md)
                * [trait](bloqade/analog/builder/parse/trait.md)
            * [pragmas](bloqade/analog/builder/pragmas.md)
            * [route](bloqade/analog/builder/route.md)
            * [sequence_builder](bloqade/analog/builder/sequence_builder.md)
            * [spatial](bloqade/analog/builder/spatial.md)
            * [start](bloqade/analog/builder/start.md)
            * [typing](bloqade/analog/builder/typing.md)
            * [waveform](bloqade/analog/builder/waveform.md)
        * [compiler](bloqade/analog/compiler/index.md)
            * [analysis](bloqade/analog/compiler/analysis/index.md)
                * [common](bloqade/analog/compiler/analysis/common/index.md)
                    * [assignment_scan](bloqade/analog/compiler/analysis/common/assignment_scan.md)
                    * [check_slices](bloqade/analog/compiler/analysis/common/check_slices.md)
                    * [is_constant](bloqade/analog/compiler/analysis/common/is_constant.md)
                    * [is_hyperfine](bloqade/analog/compiler/analysis/common/is_hyperfine.md)
                    * [scan_channels](bloqade/analog/compiler/analysis/common/scan_channels.md)
                    * [scan_variables](bloqade/analog/compiler/analysis/common/scan_variables.md)
                * [hardware](bloqade/analog/compiler/analysis/hardware/index.md)
                    * [channels](bloqade/analog/compiler/analysis/hardware/channels.md)
                    * [lattice](bloqade/analog/compiler/analysis/hardware/lattice.md)
                    * [piecewise_constant](bloqade/analog/compiler/analysis/hardware/piecewise_constant.md)
                    * [piecewise_linear](bloqade/analog/compiler/analysis/hardware/piecewise_linear.md)
                * [python](bloqade/analog/compiler/analysis/python/index.md)
                    * [waveform](bloqade/analog/compiler/analysis/python/waveform.md)
            * [passes](bloqade/analog/compiler/passes/index.md)
                * [emulator](bloqade/analog/compiler/passes/emulator.md)
                * [hardware](bloqade/analog/compiler/passes/hardware/index.md)
                    * [components](bloqade/analog/compiler/passes/hardware/components.md)
                    * [define](bloqade/analog/compiler/passes/hardware/define.md)
                    * [units](bloqade/analog/compiler/passes/hardware/units.md)
            * [rewrite](bloqade/analog/compiler/rewrite/index.md)
                * [common](bloqade/analog/compiler/rewrite/common/index.md)
                    * [add_padding](bloqade/analog/compiler/rewrite/common/add_padding.md)
                    * [assign_to_literal](bloqade/analog/compiler/rewrite/common/assign_to_literal.md)
                    * [assign_variables](bloqade/analog/compiler/rewrite/common/assign_variables.md)
                    * [canonicalize](bloqade/analog/compiler/rewrite/common/canonicalize.md)
                    * [flatten](bloqade/analog/compiler/rewrite/common/flatten.md)
                * [python](bloqade/analog/compiler/rewrite/python/index.md)
                    * [waveform](bloqade/analog/compiler/rewrite/python/waveform.md)
        * [constants](bloqade/analog/constants.md)
        * [emulate](bloqade/analog/emulate/index.md)
            * [ir](bloqade/analog/emulate/ir/index.md)
                * [atom_type](bloqade/analog/emulate/ir/atom_type.md)
                * [emulator](bloqade/analog/emulate/ir/emulator.md)
                * [space](bloqade/analog/emulate/ir/space.md)
                * [state_vector](bloqade/analog/emulate/ir/state_vector.md)
            * [sparse_operator](bloqade/analog/emulate/sparse_operator.md)
        * [factory](bloqade/analog/factory.md)
        * [ir](bloqade/analog/ir/index.md)
            * [analog_circuit](bloqade/analog/ir/analog_circuit.md)
            * [control](bloqade/analog/ir/control/index.md)
                * [field](bloqade/analog/ir/control/field.md)
                * [pulse](bloqade/analog/ir/control/pulse.md)
                * [sequence](bloqade/analog/ir/control/sequence.md)
                * [traits](bloqade/analog/ir/control/traits/index.md)
                    * [append](bloqade/analog/ir/control/traits/append.md)
                    * [canonicalize](bloqade/analog/ir/control/traits/canonicalize.md)
                    * [hash](bloqade/analog/ir/control/traits/hash.md)
                    * [slice](bloqade/analog/ir/control/traits/slice.md)
                * [waveform](bloqade/analog/ir/control/waveform.md)
            * [location](bloqade/analog/ir/location/index.md)
                * [bravais](bloqade/analog/ir/location/bravais.md)
                * [location](bloqade/analog/ir/location/location.md)
            * [routine](bloqade/analog/ir/routine/index.md)
                * [base](bloqade/analog/ir/routine/base.md)
                * [bloqade](bloqade/analog/ir/routine/bloqade.md)
                * [braket](bloqade/analog/ir/routine/braket.md)
                * [params](bloqade/analog/ir/routine/params.md)
                * [quera](bloqade/analog/ir/routine/quera.md)
            * [scalar](bloqade/analog/ir/scalar.md)
        * [migrate](bloqade/analog/migrate.md)
        * [serialize](bloqade/analog/serialize.md)
        * [submission](bloqade/analog/submission/index.md)
            * [base](bloqade/analog/submission/base.md)
            * [braket](bloqade/analog/submission/braket.md)
            * [ir](bloqade/analog/submission/ir/index.md)
                * [braket](bloqade/analog/submission/ir/braket.md)
                * [capabilities](bloqade/analog/submission/ir/capabilities.md)
                * [parallel](bloqade/analog/submission/ir/parallel.md)
                * [task_results](bloqade/analog/submission/ir/task_results.md)
                * [task_specification](bloqade/analog/submission/ir/task_specification.md)
            * [load_config](bloqade/analog/submission/load_config.md)
            * [mock](bloqade/analog/submission/mock.md)
            * [quera](bloqade/analog/submission/quera.md)
        * [task](bloqade/analog/task/index.md)
            * [base](bloqade/analog/task/base.md)
            * [batch](bloqade/analog/task/batch.md)
            * [bloqade](bloqade/analog/task/bloqade.md)
            * [braket](bloqade/analog/task/braket.md)
            * [braket_simulator](bloqade/analog/task/braket_simulator.md)
            * [quera](bloqade/analog/task/quera.md)
