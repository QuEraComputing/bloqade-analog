* [bloqade_analog](bloqade_analog/index.md)
    * [atom_arrangement](bloqade_analog/atom_arrangement.md)
    * [builder](bloqade_analog/builder/index.md)
        * [args](bloqade_analog/builder/args.md)
        * [assign](bloqade_analog/builder/assign.md)
        * [backend](bloqade_analog/builder/backend/index.md)
            * [bloqade](bloqade_analog/builder/backend/bloqade.md)
            * [braket](bloqade_analog/builder/backend/braket.md)
            * [quera](bloqade_analog/builder/backend/quera.md)
        * [coupling](bloqade_analog/builder/coupling.md)
        * [drive](bloqade_analog/builder/drive.md)
        * [field](bloqade_analog/builder/field.md)
        * [parallelize](bloqade_analog/builder/parallelize.md)
        * [parse](bloqade_analog/builder/parse/index.md)
            * [builder](bloqade_analog/builder/parse/builder.md)
            * [stream](bloqade_analog/builder/parse/stream.md)
            * [trait](bloqade_analog/builder/parse/trait.md)
        * [pragmas](bloqade_analog/builder/pragmas.md)
        * [route](bloqade_analog/builder/route.md)
        * [sequence_builder](bloqade_analog/builder/sequence_builder.md)
        * [spatial](bloqade_analog/builder/spatial.md)
        * [start](bloqade_analog/builder/start.md)
        * [typing](bloqade_analog/builder/typing.md)
        * [waveform](bloqade_analog/builder/waveform.md)
    * [compiler](bloqade_analog/compiler/index.md)
        * [analysis](bloqade_analog/compiler/analysis/index.md)
            * [common](bloqade_analog/compiler/analysis/common/index.md)
                * [assignment_scan](bloqade_analog/compiler/analysis/common/assignment_scan.md)
                * [check_slices](bloqade_analog/compiler/analysis/common/check_slices.md)
                * [is_constant](bloqade_analog/compiler/analysis/common/is_constant.md)
                * [is_hyperfine](bloqade_analog/compiler/analysis/common/is_hyperfine.md)
                * [scan_channels](bloqade_analog/compiler/analysis/common/scan_channels.md)
                * [scan_variables](bloqade_analog/compiler/analysis/common/scan_variables.md)
            * [hardware](bloqade_analog/compiler/analysis/hardware/index.md)
                * [channels](bloqade_analog/compiler/analysis/hardware/channels.md)
                * [lattice](bloqade_analog/compiler/analysis/hardware/lattice.md)
                * [piecewise_constant](bloqade_analog/compiler/analysis/hardware/piecewise_constant.md)
                * [piecewise_linear](bloqade_analog/compiler/analysis/hardware/piecewise_linear.md)
            * [python](bloqade_analog/compiler/analysis/python/index.md)
                * [waveform](bloqade_analog/compiler/analysis/python/waveform.md)
        * [passes](bloqade_analog/compiler/passes/index.md)
            * [emulator](bloqade_analog/compiler/passes/emulator.md)
            * [hardware](bloqade_analog/compiler/passes/hardware/index.md)
                * [components](bloqade_analog/compiler/passes/hardware/components.md)
                * [define](bloqade_analog/compiler/passes/hardware/define.md)
                * [units](bloqade_analog/compiler/passes/hardware/units.md)
        * [rewrite](bloqade_analog/compiler/rewrite/index.md)
            * [common](bloqade_analog/compiler/rewrite/common/index.md)
                * [add_padding](bloqade_analog/compiler/rewrite/common/add_padding.md)
                * [assign_to_literal](bloqade_analog/compiler/rewrite/common/assign_to_literal.md)
                * [assign_variables](bloqade_analog/compiler/rewrite/common/assign_variables.md)
                * [canonicalize](bloqade_analog/compiler/rewrite/common/canonicalize.md)
                * [flatten](bloqade_analog/compiler/rewrite/common/flatten.md)
            * [python](bloqade_analog/compiler/rewrite/python/index.md)
                * [waveform](bloqade_analog/compiler/rewrite/python/waveform.md)
    * [constants](bloqade_analog/constants.md)
    * [emulate](bloqade_analog/emulate/index.md)
        * [ir](bloqade_analog/emulate/ir/index.md)
            * [atom_type](bloqade_analog/emulate/ir/atom_type.md)
            * [emulator](bloqade_analog/emulate/ir/emulator.md)
            * [space](bloqade_analog/emulate/ir/space.md)
            * [state_vector](bloqade_analog/emulate/ir/state_vector.md)
        * [sparse_operator](bloqade_analog/emulate/sparse_operator.md)
    * [factory](bloqade_analog/factory.md)
    * [ir](bloqade_analog/ir/index.md)
        * [analog_circuit](bloqade_analog/ir/analog_circuit.md)
        * [control](bloqade_analog/ir/control/index.md)
            * [field](bloqade_analog/ir/control/field.md)
            * [pulse](bloqade_analog/ir/control/pulse.md)
            * [sequence](bloqade_analog/ir/control/sequence.md)
            * [traits](bloqade_analog/ir/control/traits/index.md)
                * [append](bloqade_analog/ir/control/traits/append.md)
                * [canonicalize](bloqade_analog/ir/control/traits/canonicalize.md)
                * [hash](bloqade_analog/ir/control/traits/hash.md)
                * [slice](bloqade_analog/ir/control/traits/slice.md)
            * [waveform](bloqade_analog/ir/control/waveform.md)
        * [location](bloqade_analog/ir/location/index.md)
            * [bravais](bloqade_analog/ir/location/bravais.md)
            * [location](bloqade_analog/ir/location/location.md)
        * [routine](bloqade_analog/ir/routine/index.md)
            * [base](bloqade_analog/ir/routine/base.md)
            * [bloqade](bloqade_analog/ir/routine/bloqade.md)
            * [braket](bloqade_analog/ir/routine/braket.md)
            * [params](bloqade_analog/ir/routine/params.md)
            * [quera](bloqade_analog/ir/routine/quera.md)
        * [scalar](bloqade_analog/ir/scalar.md)
    * [serialize](bloqade_analog/serialize.md)
    * [submission](bloqade_analog/submission/index.md)
        * [base](bloqade_analog/submission/base.md)
        * [braket](bloqade_analog/submission/braket.md)
        * [ir](bloqade_analog/submission/ir/index.md)
            * [braket](bloqade_analog/submission/ir/braket.md)
            * [capabilities](bloqade_analog/submission/ir/capabilities.md)
            * [parallel](bloqade_analog/submission/ir/parallel.md)
            * [task_results](bloqade_analog/submission/ir/task_results.md)
            * [task_specification](bloqade_analog/submission/ir/task_specification.md)
        * [load_config](bloqade_analog/submission/load_config.md)
        * [mock](bloqade_analog/submission/mock.md)
        * [quera](bloqade_analog/submission/quera.md)
    * [task](bloqade_analog/task/index.md)
        * [base](bloqade_analog/task/base.md)
        * [batch](bloqade_analog/task/batch.md)
        * [bloqade](bloqade_analog/task/bloqade.md)
        * [braket](bloqade_analog/task/braket.md)
        * [braket_simulator](bloqade_analog/task/braket_simulator.md)
        * [quera](bloqade_analog/task/quera.md)
