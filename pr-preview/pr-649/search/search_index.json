{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Bloqade -- QuEra's Neutral Atom SDK","text":""},{"location":"#what-is-bloqade","title":"What is Bloqade?","text":"<p>Bloqade is an SDK designed to be a simple, easy-to-use interface for writing, submitting, and analyzing results of analog quantum programs on QuEra's neutral atom quantum computers. Currently, QuEra's hardware is on Amazon Braket, the primary method of accessing QuEra's quantum hardware. Over the alpha phase, we plan to expand the emulator capabilities to include a performance Python emulator but also a direct integration with Julia via Bloqade.jl.</p>"},{"location":"#what-does-bloqade-do","title":"What does Bloqade do?","text":"<p>Bloqade is primarily a language for writing analog quantum programs for nuetral atom quantum computers. Our interface is designed to guide our users through the process of defining a analog quantum program as well as different methods to run the program, whether it is on a real quantum computer or a simulator. Bloqade also provides a simple interface for analyzing the results of the program, whether it is a single run or a batch of runs or even some types of hybrid quantum-classical algorithms.</p>"},{"location":"#how-do-i-get-started","title":"How do I get started?","text":"<p>To get started in more detail check out out Getting Started page.</p>"},{"location":"blog/2023/","title":"Bloqade Blog Posts 2023","text":"<p>Sept. 21, 2023 - Introducing Bloqade SDK for Python</p>"},{"location":"blog/2023/posts/bloqade-release/","title":"Introducing Bloqade SDK for Python","text":"<p>Greetings Neutral Atom QC experts, enthusiasts, and newcomers!</p> <p>We are excited to the Rydberg state thrilled to announce the Python version of our cutting-edge SDK, Bloqade. Originally developed in Julia, Bloqade has been a game-changer in the realm of Neutral Atom quantum computing. With the introduction of the Python version, we aim to make this revolutionary technology more accessible and user-friendly than ever before.</p>"},{"location":"blog/2023/posts/bloqade-release/#why-python","title":"Why Python?","text":"<p>Python is one of the most widely used programming languages, especially in the quantum computing community and broader scientific communities. By extending Bloqade to Python, we are opening doors to a broader audience, enabling more developers, researchers, and organizations to harness the power of Neutral Atom quantum computing.</p>"},{"location":"blog/2023/posts/bloqade-release/#neutral-atom-quantum-computing","title":"Neutral Atom Quantum Computing","text":"<p>Recently, the Neutral Atom platform has come on the QC scene in the form of Analog Hamiltonian Simulators that have a broad set of use cases beyond quantum circuits. Ranging from simulating unique quantum phases of matter, solving combinatorical optimization problems, and machine learning applications, the analog mode provides strong values in solving practical, interesting problems in the near term.</p> <p>These advances are crucial milestones on the way towards scalable digital gate-based architecture using atom shuttling. This new technology and its novel applications demand a paradigm shift in the way we not only think about quantum computing, but translate those ideas to real hardware. Enter Bloqade, a next-generation SDK designed to put the power of neutral atoms at your fingertips.</p>"},{"location":"blog/2023/posts/bloqade-release/#why-bloqade","title":"Why Bloqade?","text":"<p>Bloqade is designed with the primary goal of making it easier to compose programs for QuEra\u2019s hardware and analyze results.</p> <p>We've gained valuable insights into how users have used our neutral-atom hardware and with it, their struggles with existing tools. We took advantage of this knowledge to produce a tool that could take the \"hard\" out of \"hardware\". Bloqade is precision-balanced in both flexibility to empower novices to experiment with ease and power to let experts perform cutting-edge work without breaking a sweat.</p>"},{"location":"blog/2023/posts/bloqade-release/#highlights","title":"Highlights","text":""},{"location":"blog/2023/posts/bloqade-release/#smart-documentation","title":"Smart Documentation","text":"<p>With our commitment to enabling more seamless program development, we've put the relevant documentation you need right where and when you need it.</p> <p>No more obnoxious switching between your favorite coding environment and documentation in a separate window. Let Bloqade guide you where you'd like to go:</p> <p></p>"},{"location":"blog/2023/posts/bloqade-release/#fully-parameterized-analog-programs","title":"Fully Parameterized Analog Programs","text":"<p>Parameter sweeps are a common theme of programs for analog quantum computers, where a user would like to observe differences in output results by varying a value or values in their program.</p> <p>You used to have to manually crank out variations of your program with different values and then keep track of all the individual submissions to the emulator and hardware, a mess to keep track of and process the results of afterwards.</p> <p>Bloqade eliminates this with its own support for variables that can later be assigned single values or a whole sequence of values for trivial parameter sweeping. This isn't some feature that's constrained to a certain backend, you can take your program with all its variables and submit it to your choice of emulator or our hardware directly.</p> <pre><code>from bloqade import var\nfrom bloqade.atom_arrangement import Square\nimport numpy as np\nadiabatic_durations = [0.4, 3.2, 0.4]\n# create variables explicitly...\nmax_detuning = var(\"max_detuning\")\n# ...or implicitly inside the program definition.\nadiabatic_program = (\nSquare(3, \"lattice_spacing\")\n.rydberg.rabi.amplitude.uniform.piecewise_linear(\ndurations=adiabatic_durations, values=[0.0, \"max_rabi\", \"max_rabi\", 0.0]\n)\n.detuning.uniform.piecewise_linear(\ndurations=adiabatic_durations,\nvalues=[\n-max_detuning, # scalar variables support direct arithmetic operations\n-max_detuning,\nmax_detuning,\nmax_detuning,\n],\n)\n.assign(max_rabi=15.8, max_detuning=16.33)\n.batch_assign(lattice_spacing=np.arange(4.0, 7.0, 0.5))\n)\n# Launch your program on your choice of Braket or in-house emulator...\nemu_results = adiabatic_program.braket.local_emulator().run(10000)\nfaster_emu_results = adiabatic_program.bloqade.python().run(10000)\n# ...as well as hardware without stress\nhw_results = adiabatic_program.parallelize(24).braket.aquila().run_async(100)\n</code></pre>"},{"location":"blog/2023/posts/bloqade-release/#integrated-visualization-tools","title":"Integrated Visualization Tools","text":"<p>Instantly understand what your programs are doing faster than you can say \"neutral atoms rock!\" with Bloqade's built-in visualization tools:</p> <p></p> <p></p> <p>For your results, no more obnoxious manual compilation of results across different parameters or wrangling them into more useful forms. Get insights of experiment outcomes in the blink of an eye:</p> <p></p> <p></p> <p>Now that's what we call having your cake AND eating it.</p>"},{"location":"blog/2023/posts/bloqade-release/#bloqade-roadmap","title":"Bloqade Roadmap","text":""},{"location":"blog/2023/posts/bloqade-release/#bloqade-alpha-phase","title":"Bloqade Alpha Phase","text":"<p>During the next year, we plan on continuing development of Bloqade's python interface. If you are as excited about Neutral Atom quantum computing as us, or heck, even just quantum physics in general, give Bloqade a try! This is your opportunity to influence the direction of Bloqade and get in on the ground floor of the next Quantum Computing revolution.</p>"},{"location":"blog/2023/posts/bloqade-release/#but-what-about-julia","title":"But what about Julia?","text":"<p>Don't you guys already HAVE an SDK in Julia? Why do you need two SDKs?</p> <p>That's right! However, there's a key motivating factor for the reason we created Bloqade Python that's distinct for Bloqade.jl's existence.</p> <p>Bloqade.jl is primarily geared as a high-performance emulator. It allows you to design complex neutral-atom algorithms that may not necessarily run on our hardware BUT are excellent if you're exploring novel physical phenonema/algorithms or as a tool for pedagogical purposes.</p> <p>Bloqade.jl does have the ability to submit to Aquila, our flagship quantum computer, but for more complex tasks such as sweeping parameters (e.g. running the same program on hardware with slightly different parameters each time) or advanced post-processing, it becomes cumbersome quite quickly.</p> <p>There are no plans to drop support any time soon though. On the contrary, we plan on fully integrating Bloqade.jl into the Python package, which will enable you to program Neutral Atom quantum hardware without having to choose.</p> <p>We very much look forward to you trying out Bloqade!</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to the project! We welcome all contributions. There are many different ways to contribute to Bloqade, and we are always looking for more help. We accept contributions in the form of bug reports, feature requests, documentation improvements, and code contributions. For more information about how to contribute, please read the following sections.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Reporting a Bug </li> <li>Documentation Issues</li> <li>Feature Requests</li> <li>Developing Bloqade</li> <li>Community Slack</li> <li>Ask a Question</li> </ul>"},{"location":"contributing/community-slack/","title":"Community Slack","text":"<p>You can join QuEra's Slack workspace with this link. Join the <code>#bloqade</code> channel to discuss anything related to Bloqade.</p>"},{"location":"contributing/developing-bloqade/","title":"Setting up Development Environment","text":"<p>Our development environment contains a set of tools we use for development, testing, and documentation. This section describes how to set up the development environment. We primarily use pdm to manage python environments and dependencies.</p>"},{"location":"contributing/developing-bloqade/#setting-up-python","title":"Setting up Python","text":"<p>We use pdm to manage dependencies and virtual environment. After cloning the repository, run the following command to install dependencies:</p> <pre><code>pdm install\n</code></pre> <p>You can also install different dependency groups:</p> <ul> <li>dev: dependencies for development</li> </ul> <pre><code>pdm install --dev\n# or\npdm install -d\n</code></pre> <ul> <li>doc: dependencies for building documentation</li> </ul> <pre><code>pdm install -G doc\n</code></pre>"},{"location":"contributing/developing-bloqade/#useful-pdm-scripts","title":"Useful PDM scripts","text":""},{"location":"contributing/developing-bloqade/#tests","title":"Tests","text":"<p>You can run tests via</p> <pre><code>pdm run test\n</code></pre> <p>Or run tests and generate coverage via</p> <pre><code>pdm run coverage\n</code></pre> <p>will print out the coverage file level report in terminal.</p> <pre><code>pdm run coverage-html\n</code></pre> <p>This command generates an interactive html report in <code>htmlcov</code> folder. This will show which specific lines are not covered by tests.</p>"},{"location":"contributing/developing-bloqade/#documentation","title":"Documentation","text":"<p>You can build documentation via</p> <pre><code>pdm run doc_build\n</code></pre> <p>Or run a local server to preview documentation via</p> <pre><code>pdm run doc\n</code></pre>"},{"location":"contributing/developing-bloqade/#jupytext","title":"Jupytext","text":"<p>You can sync jupyter notebooks and python scripts via</p> <pre><code>pdm run jupytext\n</code></pre> <p>this will help you development examples in jupyter notebook and python scripts simultaneously.</p>"},{"location":"contributing/developing-bloqade/#lint","title":"Lint","text":"<p>We primarily use ruff - an extremely fast linter for Python, and black as formatter. These have been configured into pre-commit hooks. After installing pre-commit on your own system, you can install pre-commit hooks to git via</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/developing-bloqade/#design-philosophy-and-architecture","title":"Design Philosophy and Architecture","text":"<p>Given the heterogeneous nature of the hardware we target, We have decided to use a compiler-based approach to our software stack, allowing us to target different hardware backends with the same high-level language. Below is a diagram of the software stack in Bloqade.</p> <pre><code>graph TD\n    Builder[\"Builder Representation\"]\n    PythonAST[\"Bloqade AST Python\"]\n    JuliaAST[\"Bloqade AST Julia\"]\n\n    EmulatorPy[\"Emulator IR Python\"]\n    EmulatorJL[\"Emulator IR Julia\"]\n\n    QuEra[\"QuEra IR\"]\n    Braket[\"Braket IR\"]\n    JuliaEmulator[\"Bloqade.jl\"]\n    PythonEmulator[\"Python Emulator\"]\n\n    Aquila[\"Aquila\"]\n\n    Builder --&gt;|parse| PythonAST\n    PythonAST --&gt;|lower| EmulatorPy\n    PythonAST --&gt;|lower| QuEra\n    PythonAST --&gt;|lower| Braket\n    PythonAST --&gt;|transpile| JuliaAST\n\n    QuEra --&gt;|execute| Aquila\n    Braket --&gt;|execute| Aquila\n\n    JuliaAST --&gt;|lower| EmulatorJL\n    EmulatorPy --&gt;|execute| PythonEmulator\n    EmulatorJL --&gt;|execute| JuliaEmulator\n</code></pre>"},{"location":"contributing/developing-bloqade/#high-level-builder-representation","title":"High-Level Builder Representation","text":"<p>When programming Bloqade using the Python API, the user constructs a representation of an analog quantum circuit. This representation is a flattened version of the actual analog circuit. Flattened means that the user input is a linear sequence of operations where the context of neighboring nodes in the sequence of instructions can determine the program tree structure. The Bloqade AST describes the actual analog circuit.</p>"},{"location":"contributing/developing-bloqade/#bloqade-ast","title":"Bloqade AST","text":"<p>The Bloqade AST is a representation of a quantum analog circuit for neutral atom computing. It is a directed acyclic graph (DAG) with nodes for different hierarchical levels of the circuit. The base node is the <code>AnalogCircuit</code> which contains the geometry of the atoms stored as a <code>AtomArragment</code> or <code>ParallelRegister</code> objects. The other part of the circuit is the <code>Sequence</code>, which contains the waveforms that describe the drives for the Ryberg/Hyperfine transitions of each Rydberg atom. Each transition is represented by a <code>Pulse</code> including a <code>Field</code> for the drive's detuning, Rabi amplitude, and Rabi phase . A <code>Field</code> relates the spatial and temporal dependence of a drive. The spatial modulates the temporal dependence of the waveform. A DAG also describes the <code>Waveform</code> object. Finally, we have basic <code>Scalar</code> expressions as well for describing the syntax of real-valued continuous numbers.</p>"},{"location":"contributing/developing-bloqade/#bloqade-compilers-and-transpilers","title":"Bloqade Compilers and Transpilers","text":"<p>Given a user program expressed as the Bloqade AST, we can target various backends by transforming from the Bloqade AST to other kinds of IR. For example, when submitting a task to QuEra's hardware, we transform the Bloqade AST to the IR that describes a valid program for the hardware.</p> <p>This process is referred to as <code>lowering</code>, which in a general sense is a transformation that takes you from one IR to another where the target IR is specialized or has a smaller syntactical structure. <code>Transpiling</code> corresponds to a transformation that takes you from one language to equivalent expressions in another. For example, we can transpile from the Bloqade AST in Python to the Bloqade AST in Julia. The generic term for both of these types of transformation in Bloqade is Code Generation. You will find various code generation implementations in various <code>codegen</code> modules.</p>"},{"location":"contributing/documentation-issues/","title":"Reporting a Documentation Issue","text":"<p>We are always looking to improve our documentation. If you find a typo or think something is unclear, please open an issue on our GitHub page: https://github.com/QuEraComputing/bloqade-python/issues</p> <p>For typos or other minor problems, create an issue that contains a link to the specific page that includes the problem, along with a description of the problem and possibly a solution.</p> <p>For a request for new documentation content, please open up an issue and describe what you think is missing from the documentation.</p>"},{"location":"contributing/feature-requests/","title":"Requesting new Features","text":"<p>Given that we are currently at the beginning of the development of the Bloqade python interface, we are open to suggestions about what features would be helpful to include in future package iterations. If you have a request for a new feature, please open an issue on our GitHub page: https://github.com/QuEraComputing/bloqade-python/issues</p> <p>We ask that the feature requests be as specific as possible. Please include the following information in your feature request:</p> <ol> <li> <p>A short, descriptive title.</p> </li> <li> <p>A detailed description of the feature, including your attempt to solve the problem with the current version of Bloqade.</p> </li> <li> <p>A minimal code example that demonstrates the need for the feature.</p> </li> <li> <p>The version of Bloqade you are using.</p> </li> <li> <p>The version of Python you are using.</p> </li> <li> <p>The version of your operating system.</p> </li> </ol>"},{"location":"contributing/reporting-a-bug/","title":"Reporting a Bug","text":"<p>Bloqade is currently in the alpha phase of development, meaning bugs most likely exist in the current implementation. We are continuously striving to improve the stability of Bloqade. As such, we encourage our users to report all bugs they find. To do this, we ask you to submit an issue to our GitHub page: https://github.com/QuEraComputing/bloqade-python/issues</p> <p>Please include the following information in your bug report:</p> <ol> <li> <p>A short, descriptive title.</p> </li> <li> <p>A detailed description of the bug, including the expected behavior and what happened.</p> </li> <li> <p>A minimal code example that reproduces the bug.</p> </li> <li> <p>The version of Bloqade you are using.</p> </li> <li> <p>The version of Python you are using.</p> </li> <li> <p>The version of your operating system.</p> </li> </ol>"},{"location":"getting_started/","title":"Getting Started","text":"<ul> <li>Installation</li> <li>Usage and Philosophy</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":"<p>You can install the latest version of Bloqade using pip:</p> <pre><code>pip install bloqade\n</code></pre>"},{"location":"getting_started/philosophy/","title":"Usage","text":"<p>In bloqade we use the <code>.</code> to separate the different parts of your quantum program. The most basic starting point for your program will be the <code>bloqade.start</code> object.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n)\n</code></pre> <p>From here there will be different methods and properties that you can use to build your program. For example, you can start to add atom sites to your program by selecting <code>add_position</code> method.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n)\n</code></pre> <p>If you want to start to build the Rydberg drive you can select the <code>rydberg</code> property.</p> <p><pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg\n)\n</code></pre> Note that from here on out, you can no longer add to your geometry as the <code>rydberg</code> property is terminal.</p> <p>From here, you can select the different parts of the Rydberg drive. For example, if you want to build the detuning part of the drive, you can choose the <code>detuning</code> property.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning\n)\n</code></pre> <p>In the code above, <code>rydberg.detuning</code> indicates that the following set of methods and properties will be related to the Detuning of the Rydberg drive. You can also select <code>rabi.amplitude</code> or <code>rabi.phase</code> To build the amplitude and phase parts of the drive. Next, we will select the spatial modulation of the driving field.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning.uniform\n)\n</code></pre> <p>Here, we selected the <code>uniform</code> property, indicating that the detuning will be uniform across the atoms. You can also select <code>var(name)</code> where <code>name</code> is the name of the variable defined using a string. Having variables will allow you to define a spatially varying detuning as a list of real numbers. You can also select individual atoms using the <code>location(index)</code> method, where <code>index</code> is the integer associated with the lattice. Now that we have the drive's spatial modulation, we can start to build the time dependence of the detuning field. Continuing with the example, we can add individual segments to the time function using <code>linear</code> or <code>constant</code> methods, or we have shortcuts to common waveforms like <code>piecewise_linear</code> or <code>piecewise_constant</code>. We use a piecewise linear function to define the Detuning waveform on Aquila.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [-10, -10, 10, 10]\n)\n)\n</code></pre> <p>One can continue using the <code>.</code> to append more time-dependent segments to the uniform detuning waveform or select a different spatial modulation of the detuning field. The results will be that the new spatial modulation will be added to the existing spatial modulation. You can also start to build another field within the Rydberg drive by selecting the <code>amplitude</code> or <code>phase</code> properties.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [-10, -10, 10, 10]\n)\n.amplitude.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [0, 10, 10, 0]\n)\n)\n</code></pre> <p>If the next property is: 1. <code>hyperfine</code> will start to build the Hyperfine driving transition 2. <code>amplitude</code> or <code>rabi.amplitude</code> will start to build the rabi amplitude in the current context, e.g. rydberg 3. <code>phase</code> or <code>rabi.phase</code> will start to build the rabi phase in the current context 4. A spatial modulation will add a new channel to the current field, e.g. detuning 5. Repeating the previously specified spatial modulations will add that waveform with the previously defined waveform in that spatial modulation.</p> <pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [-10, -10, \"final_detuning\", \"final_detuning\"]\n)\n.amplitude.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [0, 10, 10, 0]\n)\n)\n</code></pre> <p>A string can parameterize continuous values inside the program we call these run-time parameters. There are three ways to specify the value for these parameters; the first is to set the value via <code>assign</code>, which means that the variable will have the same assignment regardless of the run. The second is to specify the value via <code>batch_assign</code>, which assigns that parameter to a batch. When specifying a batch, the program will automatically execute a quantum teach for each parameter in the batch. The other method to define the variable is through <code>args</code>. This instruction will delay the specification of the variable till running/submitting the tasks, which is helpful for certain kinds of hybrid quantum-classical applications. Combined with the callable nature of the backends, it will make it very easy to create a quantum-classical loop. You can mix and match some of these methods, and the available options should pop up if you're using an IDE.</p> <p>Another helpful feature for small clusters of atoms is the <code>parallelize</code> option. The idea here is that the atoms are arranged in 2D space in some bounded square region for Aquila and other Neutral Atom machines. You can run multiple copies of that calculation in parallel for small clusters of atoms by spacing those clusters apart by some sufficiently large distance. Our infrastructure will automatically detect the area of the QPU and use that to generate the appropriate number of copies of the calculation. Also, when processing the results, it is possible to automatically stitch the results from the different copies together so that the analysis is unified on the original cluster.</p> <p>Now that we have specified all the options, we can think about how to run our program. We only support <code>braket</code>, which tells bloqade to submit your tasks to the braket service. The credentials are handled entirely by the braket SDK, so we suggest you look at their documentation for how to set that up. However, setting up your AWS credentials in your environment variables is the easiest way. To execute the program on Aquila, you select the <code>aquila</code> backend after the <code>braket</code> property.</p> <p><pre><code>from bloqade import start\ncalculation = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [-10, -10, \"final_detuning\", \"final_detuning\"]\n)\n.amplitude.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0 0.1],\nvalues = [0, 10, 10, 0]\n)\n.batch_assign(detuning_final=[0,1,2,3,4])\n.braket.aquila()\n)\n</code></pre> For tasks executed through a remote API, there are three options to run your job. The first is an asynchronous call via <code>submit</code>, which will return a <code>RemoteBatch</code> object. This object has various methods to <code>fetch</code> and or <code>pull</code> results from the remote API, along with some other tools that can query the status of the task(s) in this batch. <code>run</code> is another method that blocks the script waiting for all the tasks to finish, susequently returning the <code>RemoteBatch</code>. The final option is to use the <code>__call__</code> method of the <code>calculation</code> object for hybrid workflows. The call object is effectively the same as calling <code>run</code>. However, specifying the <code>args</code> option will allow you to call <code>__call__</code> with arguments corresponding to the list of strings provided by <code>args</code>.</p> <p>The <code>RemoteBatch</code> object can be saved in JSON format using the <code>save_batch</code> and reloaded back into Python using the <code>load_batch</code> functions. This capability is useful for the asynchronous case, where you can save the batch and load it back later to retrieve the results.</p> <p>The braket service also provides a local emulator, which can be run by selecting the <code>local_emulator()</code> options after the <code>braket</code> property. There is no asynchronous option for local emulator jobs, so you can only call <code>run</code> or <code>__call__</code> methods, and the return result is a <code>LocalBatch</code>.</p> <p>The batch objects also have a method <code>report</code> that returns a <code>Report</code> object. This object will contain all the data inside the batch object, so if no results are present in the <code>RemoteBatch</code>, then the <code>Report</code> will not have any data either. A common pattern would be first to call <code>fetch</code> and then create the <code>Report</code> by calling <code>report</code>. That way, the generated report will have the most up-to-date results. Similarly, if you are willing to wait, you can call <code>pull</code>, which will block until all tasks have stopped running.</p> <p>Here is what a final calculation might look like for running a parameter scan and comparing hardware to a classical emulator:</p> <pre><code>from bloqade import start, save_batch\nprogram = (\nstart\n.add_position((0, 0))\n.add_position((0, 6.8))\n.add_position([(6.8, 0), (6.8, 6.8)])\n.rydberg.detuning.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0, 0.1],\nvalues = [-10, -10, \"final_detuning\", \"final_detuning\"]\n)\n.amplitude.uniform.\npiecewise_linear(\ndurations = [0.1, 1.0, 0.1],\nvalues = [0, 10, 10, 0]\n)\n.batch_assign(detuning_final=[0,1,2,3,4])\n)\nemulator_batch = program.braket.local_emulator().run(1000)\nhardware_batch = program.parallelize(20).braket.aquila().submit(1000)\nsave_batch(\"emulator_results.json\", emulator_batch)\nsave_batch(\"hardware_results.json\", hardware_batch)\n# Analysis script\nfrom bloqade import load_batch\nemulator_batch = load_batch(\"emulator_results.json\")\nhardware_batch = load_batch(\"hardware_results.json\")\nemulator_batch.report().show()\nhardware_batch.fetch().report().show()\n</code></pre> <p>An excellent place to start for examples is the Aquila whitepaper examples bound here. Also, a flow diagram can be found here that discusses the entire build process.</p>"},{"location":"reference/bloqade/","title":"Index","text":""},{"location":"reference/bloqade/#bloqade.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty <code>ListOfLocations</code>.</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li>|_ <code>start.rydberg</code>: for <code>Rydberg</code>     Level coupling</li> <li>|_ <code>start.hyperfine</code>: for <code>Hyperfine</code>     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li>|_ <code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li><code>Scalar</code> objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bloqade/#bloqade.Literal","title":"Literal","text":"<p>             Bases: <code>Real</code></p>"},{"location":"reference/bloqade/#bloqade.Literal.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre> <p>Scalar Literal, which stores a decimaal value instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal</code> <p>decimal value instance</p> required"},{"location":"reference/bloqade/#bloqade.Variable","title":"Variable","text":"<p>             Bases: <code>Real</code></p> <p>Variable, which stores a variable name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable instance.</p> required"},{"location":"reference/bloqade/#bloqade.cast","title":"cast","text":"<pre><code>cast(py)\n</code></pre> <ol> <li> <p>cast Real number (or list/tuple of Real numbers) to <code>Scalar Literal</code>.</p> </li> <li> <p>cast str (or list/tuple of Real numbers) to <code>Scalar Variable</code>.</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, Real, Tuple[Real], List[Real]]</code> <p>python object to cast</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>Scalar</p> Source code in <code>src/bloqade/ir/scalar.py</code> <pre><code>def cast(py) -&gt; \"Scalar\":\n\"\"\"\n    1. cast Real number (or list/tuple of Real numbers)\n    to [`Scalar Literal`][bloqade.ir.scalar.Literal].\n    2. cast str (or list/tuple of Real numbers)\n    to [`Scalar Variable`][bloqade.ir.scalar.Variable].\n    Args:\n        py (Union[str,Real,Tuple[Real],List[Real]]): python object to cast\n    Returns:\n        Scalar\n    \"\"\"\nret = trycast(py)\nif ret is None:\nraise TypeError(f\"Cannot cast {type(py)} to Scalar Literal\")\nreturn ret\n</code></pre>"},{"location":"reference/bloqade/#bloqade.constant","title":"constant","text":"<pre><code>constant(duration, value)\n</code></pre> <p>Create a Constant waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>description</p> required <code>value</code> <code>ScalarType</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>Constant</code> <code>Constant</code> <p>A Constant waveform.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef constant(duration: ScalarType, value: ScalarType) -&gt; Constant:\n\"\"\"Create a Constant waveform.\n    Args:\n        duration (ScalarType): _description_\n        value (ScalarType): _description_\n    Returns:\n        Constant: A Constant waveform.\n    \"\"\"\nreturn Constant(value, duration)\n</code></pre>"},{"location":"reference/bloqade/#bloqade.dumps","title":"dumps","text":"<pre><code>dumps(o, use_decimal=True, **json_kwargs)\n</code></pre> <p>Serialize object to string</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dumps</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the serialized object as a string</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef dumps(\no: Any,\nuse_decimal: bool = True,\n**json_kwargs,\n) -&gt; str:\n\"\"\"Serialize object to string\n    Args:\n        o (Any): the object to serialize\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dumps\n    Returns:\n        str: the serialized object as a string\n    \"\"\"\nif not isinstance(o, Serializer.types):\nraise TypeError(\nf\"Object of type {type(o)} is not JSON serializable. \"\nf\"Only {Serializer.types} are supported.\"\n)\nreturn json.dumps(o, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/bloqade/#bloqade.linear","title":"linear","text":"<pre><code>linear(duration, start, stop)\n</code></pre> <p>Create a Linear waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>duration of linear waveform</p> required <code>start</code> <code>ScalarType</code> <p>starting value of linear waveform</p> required <code>stop</code> <code>ScalarType</code> <p>ending value of linear waveform</p> required <p>Returns:</p> Name Type Description <code>Linear</code> <code>Linear</code> <p>Linear waveform</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef linear(duration: ScalarType, start: ScalarType, stop: ScalarType) -&gt; Linear:\n\"\"\"Create a Linear waveform.\n    Args:\n        duration (ScalarType): duration of linear waveform\n        start (ScalarType): starting value of linear waveform\n        stop (ScalarType): ending value of linear waveform\n    Returns:\n        Linear: Linear waveform\n    \"\"\"\nreturn Linear(start, stop, duration)\n</code></pre>"},{"location":"reference/bloqade/#bloqade.load","title":"load","text":"<pre><code>load(fp, use_decimal=True, **json_kwargs)\n</code></pre> <p>Load object from file</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.load</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef load(fp: Union[TextIO, str], use_decimal: bool = True, **json_kwargs):\n\"\"\"Load object from file\n    Args:\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.load\n    Returns:\n        Any: the deserialized object\n    \"\"\"\nload_patchage()\nif isinstance(fp, str):\nwith open(fp, \"r\") as f:\nreturn json.load(\nf,\nobject_hook=Serializer.object_hook,\nuse_decimal=use_decimal,\n**json_kwargs,\n)\nelse:\nreturn json.load(\nfp,\nobject_hook=Serializer.object_hook,\nuse_decimal=use_decimal,\n**json_kwargs,\n)\n</code></pre>"},{"location":"reference/bloqade/#bloqade.loads","title":"loads","text":"<pre><code>loads(s, use_decimal=True, **json_kwargs)\n</code></pre> <p>Load object from string</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>the string to load</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.loads</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef loads(s: str, use_decimal: bool = True, **json_kwargs):\n\"\"\"Load object from string\n    Args:\n        s (str): the string to load\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.loads\n    Returns:\n        Any: the deserialized object\n    \"\"\"\nload_patchage()\nreturn json.loads(\ns, object_hook=Serializer.object_hook, use_decimal=use_decimal, **json_kwargs\n)\n</code></pre>"},{"location":"reference/bloqade/#bloqade.piecewise_constant","title":"piecewise_constant","text":"<pre><code>piecewise_constant(durations, values)\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise constant waveform from a list of durations and values. The value <code>duration[i]</code> corresponds to the length of time for the i'th segment with a value of <code>values[i]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not the same as the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef piecewise_constant(\ndurations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform:\n\"\"\"Create a piecewise linear waveform.\n    Create a piecewise constant waveform from a list of durations and values. The\n    value `duration[i]` corresponds to the length of time for the i'th segment\n    with a value of `values[i]`.\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n    Raises:\n        ValueError: If the length of `values` is not the same as the length of\n        `durations`.\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\nif len(durations) != len(values):\nraise ValueError(\n\"The length of values must be the same as the length of durations\"\n)\npwc_wf = None\nfor duration, value in zip(durations, values):\nif pwc_wf is None:\npwc_wf = Constant(value, duration)\nelse:\npwc_wf = pwc_wf.append(Constant(value, duration))\nreturn pwc_wf\n</code></pre>"},{"location":"reference/bloqade/#bloqade.piecewise_linear","title":"piecewise_linear","text":"<pre><code>piecewise_linear(durations, values)\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise linear waveform from a list of durations and values. The value <code>duration[i]</code> is of the linear segment between <code>values[i]</code> and <code>values[i+1]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not one greater than the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef piecewise_linear(durations: List[ScalarType], values: List[ScalarType]) -&gt; Waveform:\n\"\"\"Create a piecewise linear waveform.\n    Create a piecewise linear waveform from a list of durations and values. The\n    value `duration[i]` is of the linear segment between `values[i]` and `values[i+1]`.\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n    Raises:\n        ValueError: If the length of `values` is not one greater than the length of\n        `durations`.\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\nif len(durations) + 1 != len(values):\nraise ValueError(\n\"The length of values must be one greater than the length of durations\"\n)\npwl_wf = None\nfor duration, start, stop in zip(durations, values[:-1], values[1:]):\nif pwl_wf is None:\npwl_wf = Linear(start, stop, duration)\nelse:\npwl_wf = pwl_wf.append(Linear(start, stop, duration))\nreturn pwl_wf\n</code></pre>"},{"location":"reference/bloqade/#bloqade.rydberg_h","title":"rydberg_h","text":"<pre><code>rydberg_h(\natoms_positions,\ndetuning=None,\namplitude=None,\nphase=None,\nstatic_params={},\nbatch_params=[],\nargs=[],\n)\n</code></pre> <p>Create a rydberg program with uniform detuning, amplitude, and phase.</p> <p>Parameters:</p> Name Type Description Default <code>atoms_positions</code> <code>Any</code> <p>Description of geometry of atoms in system.</p> required <code>detuning</code> <code>Optional[Waveform]</code> <p>Waveform for detuning. Defaults to None.</p> <code>None</code> <code>amplitude</code> <code>Optional[Waveform]</code> <p>Waveform describing the amplitude of the rabi term. Defaults to None.</p> <code>None</code> <code>phase</code> <code>Optional[Waveform]</code> <p>Waveform describing the phase of rabi term. Defaults to None.</p> <code>None</code> <code>static_params</code> <code>Dict[str, Any]</code> <p>Define static parameters of your program. Defaults to {}.</p> <code>{}</code> <code>batch_params</code> <code>Union[List[Dict[str, Any]], Dict[str, Any]]</code> <p>Parmaters for a batch of tasks. Defaults to [].</p> <code>[]</code> <code>args</code> <code>List[str]</code> <p>List of arguments to leave till runtime. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>An object that can be used to dispatch a rydberg program to multiple backends.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef rydberg_h(\natoms_positions: Any,\ndetuning: Optional[Waveform] = None,\namplitude: Optional[Waveform] = None,\nphase: Optional[Waveform] = None,\nstatic_params: Dict[str, Any] = {},\nbatch_params: Union[List[Dict[str, Any]], Dict[str, Any]] = [],\nargs: List[str] = [],\n) -&gt; Routine:\n\"\"\"Create a rydberg program with uniform detuning, amplitude, and phase.\n    Args:\n        atoms_positions (Any): Description of geometry of atoms in system.\n        detuning (Optional[Waveform], optional): Waveform for detuning.\n            Defaults to None.\n        amplitude (Optional[Waveform], optional): Waveform describing the amplitude of\n            the rabi term. Defaults to None.\n        phase (Optional[Waveform], optional): Waveform describing the phase of rabi\n            term. Defaults to None.\n        static_params (Dict[str, Any], optional): Define static parameters of your\n            program. Defaults to {}.\n        batch_params (Union[List[Dict[str, Any]], Dict[str, Any]], optional):\n            Parmaters for a batch of tasks. Defaults to [].\n        args (List[str], optional): List of arguments to leave till runtime.\n            Defaults to [].\n    Returns:\n        Routine: An object that can be used to dispatch a rydberg program to\n            multiple backends.\n    \"\"\"\nfrom bloqade import start\nfrom bloqade.atom_arrangement import AtomArrangement\nprint(type(atoms_positions))\nif isinstance(atoms_positions, AtomArrangement):\nprog = atoms_positions\nelse:\nprog = start.add_position(atoms_positions)\nif detuning is not None:\nprog = prog.rydberg.detuning.uniform.apply(detuning)\nif amplitude is not None:\nprog = prog.amplitude.uniform.apply(amplitude)\nif phase is not None:\nprog = prog.phase.uniform.apply(phase)\nprog = prog.assign(**static_params)\nif isinstance(batch_params, dict):\nprog = prog.batch_assign(**batch_params)\nelse:\nprog = prog.batch_assign(batch_params)\nprog = prog.args(args)\nreturn prog.parse()\n</code></pre>"},{"location":"reference/bloqade/#bloqade.save","title":"save","text":"<pre><code>save(o, fp, use_decimal=True, **json_kwargs)\n</code></pre> <p>Serialize object to file</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dump</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef save(\no: Any,\nfp: Union[TextIO, str],\nuse_decimal=True,\n**json_kwargs,\n) -&gt; None:\n\"\"\"Serialize object to file\n    Args:\n        o (Any): the object to serialize\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dump\n    Returns:\n        None\n    \"\"\"\nif not isinstance(o, Serializer.types):\nraise TypeError(\nf\"Object of type {type(o)} is not JSON serializable. \"\nf\"Only {Serializer.types} are supported.\"\n)\nif isinstance(fp, str):\nwith open(fp, \"w\") as f:\njson.dump(o, f, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\nelse:\njson.dump(o, fp, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/bloqade/#bloqade.tree_depth","title":"tree_depth","text":"<pre><code>tree_depth(depth=None)\n</code></pre> <p>Setting globally maximum depth for tree printing</p> <p>If <code>depth=None</code>, return current depth. If <code>depth</code> is provided, setting current depth to <code>depth</code></p> <p>Parameters:</p> Name Type Description Default <code>depth</code> <code>int</code> <p>the user specified depth. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>current updated depth</p> Source code in <code>src/bloqade/__init__.py</code> <pre><code>def tree_depth(depth: int = None):\n\"\"\"Setting globally maximum depth for tree printing\n    If `depth=None`, return current depth.\n    If `depth` is provided, setting current depth to `depth`\n    Args:\n        depth (int, optional): the user specified depth. Defaults to None.\n    Returns:\n        int: current updated depth\n    \"\"\"\nif depth is not None:\n_ir.tree_print.max_tree_depth = depth\nreturn _ir.tree_print.max_tree_depth\n</code></pre>"},{"location":"reference/bloqade/#bloqade.var","title":"var","text":"<pre><code>var(py)\n</code></pre> <p>cast string (or list/tuple of strings) to <code>Variable</code>.</p> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, List[str]]</code> <p>a string or list/tuple of strings</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>Union[Variable]</p> Source code in <code>src/bloqade/ir/scalar.py</code> <pre><code>def var(py: str) -&gt; \"Variable\":\n\"\"\"cast string (or list/tuple of strings)\n    to [`Variable`][bloqade.ir.scalar.Variable].\n    Args:\n        py (Union[str, List[str]]): a string or list/tuple of strings\n    Returns:\n       Union[Variable]\n    \"\"\"\nret = tryvar(py)\nif ret is None:\nraise TypeError(f\"Cannot cast {type(py)} to Variable\")\nreturn ret\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/","title":"Atom arrangement","text":""},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement","title":"AtomArrangement","text":"<p>             Bases: <code>ProgramStart</code>, <code>TransformTrait</code></p>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n\"\"\"enumerate all locations in the register.\"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n\"\"\"obtain a figure object from the atom arrangement.\"\"\"\nreturn get_atom_arrangement_figure(self, fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Chain","title":"Chain","text":"<pre><code>Chain(L, lattice_spacing=1.0, vertical_chain=False)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself, L: int, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\nself.vertical = vertical_chain\nsuper().__init__(L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (\u00bd, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L * 2.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Kagome","title":"Kagome","text":"<pre><code>Kagome(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Lieb","title":"Lieb","text":"<pre><code>Lieb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\nwidth,\nheight,\nlattice_spacing_x=1.0,\nlattice_spacing_y=None,\n)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>None</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself,\nwidth: int,\nheight: int,\nlattice_spacing_x: ScalarType = 1.0,\nlattice_spacing_y: Optional[ScalarType] = None,\n):\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\nif lattice_spacing_y is None:\nself.ratio = cast(1.0) / cast(lattice_spacing_x)\nelse:\nself.ratio = cast(lattice_spacing_y) / cast(lattice_spacing_x)\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Square","title":"Square","text":"<pre><code>Square(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/atom_arrangement/#bloqade.atom_arrangement.Triangular","title":"Triangular","text":"<pre><code>Triangular(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/constants/","title":"Constants","text":""},{"location":"reference/bloqade/factory/","title":"Factory","text":""},{"location":"reference/bloqade/factory/#bloqade.factory.constant","title":"constant","text":"<pre><code>constant(duration, value)\n</code></pre> <p>Create a Constant waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>description</p> required <code>value</code> <code>ScalarType</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>Constant</code> <code>Constant</code> <p>A Constant waveform.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef constant(duration: ScalarType, value: ScalarType) -&gt; Constant:\n\"\"\"Create a Constant waveform.\n    Args:\n        duration (ScalarType): _description_\n        value (ScalarType): _description_\n    Returns:\n        Constant: A Constant waveform.\n    \"\"\"\nreturn Constant(value, duration)\n</code></pre>"},{"location":"reference/bloqade/factory/#bloqade.factory.linear","title":"linear","text":"<pre><code>linear(duration, start, stop)\n</code></pre> <p>Create a Linear waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>duration of linear waveform</p> required <code>start</code> <code>ScalarType</code> <p>starting value of linear waveform</p> required <code>stop</code> <code>ScalarType</code> <p>ending value of linear waveform</p> required <p>Returns:</p> Name Type Description <code>Linear</code> <code>Linear</code> <p>Linear waveform</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef linear(duration: ScalarType, start: ScalarType, stop: ScalarType) -&gt; Linear:\n\"\"\"Create a Linear waveform.\n    Args:\n        duration (ScalarType): duration of linear waveform\n        start (ScalarType): starting value of linear waveform\n        stop (ScalarType): ending value of linear waveform\n    Returns:\n        Linear: Linear waveform\n    \"\"\"\nreturn Linear(start, stop, duration)\n</code></pre>"},{"location":"reference/bloqade/factory/#bloqade.factory.piecewise_constant","title":"piecewise_constant","text":"<pre><code>piecewise_constant(durations, values)\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise constant waveform from a list of durations and values. The value <code>duration[i]</code> corresponds to the length of time for the i'th segment with a value of <code>values[i]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not the same as the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef piecewise_constant(\ndurations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform:\n\"\"\"Create a piecewise linear waveform.\n    Create a piecewise constant waveform from a list of durations and values. The\n    value `duration[i]` corresponds to the length of time for the i'th segment\n    with a value of `values[i]`.\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n    Raises:\n        ValueError: If the length of `values` is not the same as the length of\n        `durations`.\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\nif len(durations) != len(values):\nraise ValueError(\n\"The length of values must be the same as the length of durations\"\n)\npwc_wf = None\nfor duration, value in zip(durations, values):\nif pwc_wf is None:\npwc_wf = Constant(value, duration)\nelse:\npwc_wf = pwc_wf.append(Constant(value, duration))\nreturn pwc_wf\n</code></pre>"},{"location":"reference/bloqade/factory/#bloqade.factory.piecewise_linear","title":"piecewise_linear","text":"<pre><code>piecewise_linear(durations, values)\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise linear waveform from a list of durations and values. The value <code>duration[i]</code> is of the linear segment between <code>values[i]</code> and <code>values[i+1]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not one greater than the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef piecewise_linear(durations: List[ScalarType], values: List[ScalarType]) -&gt; Waveform:\n\"\"\"Create a piecewise linear waveform.\n    Create a piecewise linear waveform from a list of durations and values. The\n    value `duration[i]` is of the linear segment between `values[i]` and `values[i+1]`.\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n    Raises:\n        ValueError: If the length of `values` is not one greater than the length of\n        `durations`.\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\nif len(durations) + 1 != len(values):\nraise ValueError(\n\"The length of values must be one greater than the length of durations\"\n)\npwl_wf = None\nfor duration, start, stop in zip(durations, values[:-1], values[1:]):\nif pwl_wf is None:\npwl_wf = Linear(start, stop, duration)\nelse:\npwl_wf = pwl_wf.append(Linear(start, stop, duration))\nreturn pwl_wf\n</code></pre>"},{"location":"reference/bloqade/factory/#bloqade.factory.rydberg_h","title":"rydberg_h","text":"<pre><code>rydberg_h(\natoms_positions,\ndetuning=None,\namplitude=None,\nphase=None,\nstatic_params={},\nbatch_params=[],\nargs=[],\n)\n</code></pre> <p>Create a rydberg program with uniform detuning, amplitude, and phase.</p> <p>Parameters:</p> Name Type Description Default <code>atoms_positions</code> <code>Any</code> <p>Description of geometry of atoms in system.</p> required <code>detuning</code> <code>Optional[Waveform]</code> <p>Waveform for detuning. Defaults to None.</p> <code>None</code> <code>amplitude</code> <code>Optional[Waveform]</code> <p>Waveform describing the amplitude of the rabi term. Defaults to None.</p> <code>None</code> <code>phase</code> <code>Optional[Waveform]</code> <p>Waveform describing the phase of rabi term. Defaults to None.</p> <code>None</code> <code>static_params</code> <code>Dict[str, Any]</code> <p>Define static parameters of your program. Defaults to {}.</p> <code>{}</code> <code>batch_params</code> <code>Union[List[Dict[str, Any]], Dict[str, Any]]</code> <p>Parmaters for a batch of tasks. Defaults to [].</p> <code>[]</code> <code>args</code> <code>List[str]</code> <p>List of arguments to leave till runtime. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>An object that can be used to dispatch a rydberg program to multiple backends.</p> Source code in <code>src/bloqade/factory.py</code> <pre><code>@beartype\ndef rydberg_h(\natoms_positions: Any,\ndetuning: Optional[Waveform] = None,\namplitude: Optional[Waveform] = None,\nphase: Optional[Waveform] = None,\nstatic_params: Dict[str, Any] = {},\nbatch_params: Union[List[Dict[str, Any]], Dict[str, Any]] = [],\nargs: List[str] = [],\n) -&gt; Routine:\n\"\"\"Create a rydberg program with uniform detuning, amplitude, and phase.\n    Args:\n        atoms_positions (Any): Description of geometry of atoms in system.\n        detuning (Optional[Waveform], optional): Waveform for detuning.\n            Defaults to None.\n        amplitude (Optional[Waveform], optional): Waveform describing the amplitude of\n            the rabi term. Defaults to None.\n        phase (Optional[Waveform], optional): Waveform describing the phase of rabi\n            term. Defaults to None.\n        static_params (Dict[str, Any], optional): Define static parameters of your\n            program. Defaults to {}.\n        batch_params (Union[List[Dict[str, Any]], Dict[str, Any]], optional):\n            Parmaters for a batch of tasks. Defaults to [].\n        args (List[str], optional): List of arguments to leave till runtime.\n            Defaults to [].\n    Returns:\n        Routine: An object that can be used to dispatch a rydberg program to\n            multiple backends.\n    \"\"\"\nfrom bloqade import start\nfrom bloqade.atom_arrangement import AtomArrangement\nprint(type(atoms_positions))\nif isinstance(atoms_positions, AtomArrangement):\nprog = atoms_positions\nelse:\nprog = start.add_position(atoms_positions)\nif detuning is not None:\nprog = prog.rydberg.detuning.uniform.apply(detuning)\nif amplitude is not None:\nprog = prog.amplitude.uniform.apply(amplitude)\nif phase is not None:\nprog = prog.phase.uniform.apply(phase)\nprog = prog.assign(**static_params)\nif isinstance(batch_params, dict):\nprog = prog.batch_assign(**batch_params)\nelse:\nprog = prog.batch_assign(batch_params)\nprog = prog.args(args)\nreturn prog.parse()\n</code></pre>"},{"location":"reference/bloqade/serialize/","title":"Serialize","text":""},{"location":"reference/bloqade/serialize/#bloqade.serialize.dumps","title":"dumps","text":"<pre><code>dumps(o, use_decimal=True, **json_kwargs)\n</code></pre> <p>Serialize object to string</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dumps</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the serialized object as a string</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef dumps(\no: Any,\nuse_decimal: bool = True,\n**json_kwargs,\n) -&gt; str:\n\"\"\"Serialize object to string\n    Args:\n        o (Any): the object to serialize\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dumps\n    Returns:\n        str: the serialized object as a string\n    \"\"\"\nif not isinstance(o, Serializer.types):\nraise TypeError(\nf\"Object of type {type(o)} is not JSON serializable. \"\nf\"Only {Serializer.types} are supported.\"\n)\nreturn json.dumps(o, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/bloqade/serialize/#bloqade.serialize.load","title":"load","text":"<pre><code>load(fp, use_decimal=True, **json_kwargs)\n</code></pre> <p>Load object from file</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.load</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef load(fp: Union[TextIO, str], use_decimal: bool = True, **json_kwargs):\n\"\"\"Load object from file\n    Args:\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.load\n    Returns:\n        Any: the deserialized object\n    \"\"\"\nload_patchage()\nif isinstance(fp, str):\nwith open(fp, \"r\") as f:\nreturn json.load(\nf,\nobject_hook=Serializer.object_hook,\nuse_decimal=use_decimal,\n**json_kwargs,\n)\nelse:\nreturn json.load(\nfp,\nobject_hook=Serializer.object_hook,\nuse_decimal=use_decimal,\n**json_kwargs,\n)\n</code></pre>"},{"location":"reference/bloqade/serialize/#bloqade.serialize.loads","title":"loads","text":"<pre><code>loads(s, use_decimal=True, **json_kwargs)\n</code></pre> <p>Load object from string</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>the string to load</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.loads</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef loads(s: str, use_decimal: bool = True, **json_kwargs):\n\"\"\"Load object from string\n    Args:\n        s (str): the string to load\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.loads\n    Returns:\n        Any: the deserialized object\n    \"\"\"\nload_patchage()\nreturn json.loads(\ns, object_hook=Serializer.object_hook, use_decimal=use_decimal, **json_kwargs\n)\n</code></pre>"},{"location":"reference/bloqade/serialize/#bloqade.serialize.save","title":"save","text":"<pre><code>save(o, fp, use_decimal=True, **json_kwargs)\n</code></pre> <p>Serialize object to file</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dump</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/bloqade/serialize.py</code> <pre><code>@beartype\ndef save(\no: Any,\nfp: Union[TextIO, str],\nuse_decimal=True,\n**json_kwargs,\n) -&gt; None:\n\"\"\"Serialize object to file\n    Args:\n        o (Any): the object to serialize\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dump\n    Returns:\n        None\n    \"\"\"\nif not isinstance(o, Serializer.types):\nraise TypeError(\nf\"Object of type {type(o)} is not JSON serializable. \"\nf\"Only {Serializer.types} are supported.\"\n)\nif isinstance(fp, str):\nwith open(fp, \"w\") as f:\njson.dump(o, f, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\nelse:\njson.dump(o, fp, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/bloqade/builder/","title":"Index","text":""},{"location":"reference/bloqade/builder/args/","title":"Args","text":""},{"location":"reference/bloqade/builder/assign/","title":"Assign","text":""},{"location":"reference/bloqade/builder/coupling/","title":"Coupling","text":""},{"location":"reference/bloqade/builder/coupling/#bloqade.builder.coupling.Hyperfine","title":"Hyperfine","text":"<p>             Bases: <code>LevelCoupling</code></p> <p>This node represent level coupling between hyperfine state.</p> <p>Examples:</p> <pre><code>- To reach the node from the start node:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.coupling.Hyperfine'&gt;\n\n- Hyperfine level coupling have two reachable field nodes:\n\n    - detuning term (See also [`Detuning`][bloqade.builder.field.Detuning])\n    - rabi term (See also [`Rabi`][bloqade.builder.field.Rabi])\n\n&gt;&gt;&gt; hyp_detune = bloqade.start.hyperfine.detuning\n&gt;&gt;&gt; hyp_rabi = bloqade.start.hyperfine.rabi\n</code></pre>"},{"location":"reference/bloqade/builder/coupling/#bloqade.builder.coupling.LevelCoupling","title":"LevelCoupling","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/coupling/#bloqade.builder.coupling.LevelCoupling.detuning","title":"detuning  <code>property</code>","text":"<pre><code>detuning\n</code></pre> <p>Specify the <code>Detuning</code> <code>Field</code> of your program.</p> <p>A \"field\" is a summation of one or more \"drives\", with a drive being the sum of a waveform and spatial modulation.</p> <p>You are currently building the spatial modulation component and will be able to specify a waveform.</p> <ul> <li>You can do this by:<ul> <li>|_ <code>...detuning.uniform</code>: To address all atoms in the field</li> <li>|_ <code>...detuning.location(int)</code>: To address an atom at a specific     location via index</li> <li>|_ <code>...detuning.var(str)</code><ul> <li>|_ To address an atom at a specific location via variable</li> <li>|_ To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/coupling/#bloqade.builder.coupling.LevelCoupling.rabi","title":"rabi  <code>property</code>","text":"<pre><code>rabi\n</code></pre> <p>Specify the complex-valued <code>Rabi</code> field of your program.</p> <p>The Rabi field is composed of a real-valued Amplitude and Phase field.</p> <ul> <li>Next possible steps to build your program are   creating the <code>RabiAmplitude</code> field   and <code>RabiPhase</code> field of the field:<ul> <li>|_ <code>...rabi.amplitude</code>: To create the Rabi amplitude field</li> <li>|_ <code>...rabi.phase</code>: To create the Rabi phase field</li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/coupling/#bloqade.builder.coupling.Rydberg","title":"Rydberg","text":"<p>             Bases: <code>LevelCoupling</code></p> <p>This node represent level coupling of rydberg state.</p> <p>Examples:</p> <pre><code>- To reach the node from the start node:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.coupling.Rydberg'&gt;\n\n- Rydberg level coupling have two reachable field nodes:\n\n    - detuning term (See also [`Detuning`][bloqade.builder.field.Detuning])\n    - rabi term (See also [`Rabi`][bloqade.builder.field.Rabi])\n\n&gt;&gt;&gt; ryd_detune = bloqade.start.rydberg.detuning\n&gt;&gt;&gt; ryd_rabi = bloqade.start.rydberg.rabi\n</code></pre>"},{"location":"reference/bloqade/builder/drive/","title":"Drive","text":""},{"location":"reference/bloqade/builder/drive/#bloqade.builder.drive.Drive","title":"Drive","text":""},{"location":"reference/bloqade/builder/drive/#bloqade.builder.drive.Drive.hyperfine","title":"hyperfine  <code>property</code>","text":"<pre><code>hyperfine\n</code></pre> <p>Address the Hyperfine level coupling in your program.</p> <ul> <li>Next possible steps to build your program are specifying the   <code>Rabi</code> field or   <code>Detuning</code> field.<ul> <li>|_ <code>...hyperfine.rabi</code>: for Rabi field</li> <li>|_ <code>...hyperfine.detuning</code>: for Detuning field</li> </ul> </li> <li>In the absence of a field you the value is set to zero by default.</li> </ul> <p>```</p>"},{"location":"reference/bloqade/builder/drive/#bloqade.builder.drive.Drive.rydberg","title":"rydberg  <code>property</code>","text":"<pre><code>rydberg\n</code></pre> <p>Address the Rydberg level coupling in your program.</p> <ul> <li>Next possible steps to build your program are specifying the   <code>Rabi</code> field or   <code>Detuning</code> field.<ul> <li>|_ <code>...rydberg.rabi</code>: for Rabi field</li> <li>|_ <code>...rydberg.detuning</code>: for Detuning field</li> </ul> </li> <li>In the absence of a field you the value is set to zero by default.</li> </ul> <p>```</p>"},{"location":"reference/bloqade/builder/field/","title":"Field","text":""},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Detuning","title":"Detuning","text":"<p>             Bases: <code>Field</code></p> <p>This node represent detuning field of a specified level coupling (rydberg or hyperfine) type.</p> <p>Examples:</p> <pre><code>- To specify detuning of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.detuning\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Detuning'&gt;\n\n- To specify detuning of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.detuning\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Detuning'&gt;\n</code></pre> Note <p>This node is a SpatialModulation node. See <code>SpatialModulation</code> for additional options.</p>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Field","title":"Field","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Field.uniform","title":"uniform  <code>property</code>","text":"<pre><code>uniform\n</code></pre> <p>Address all atoms as part of defining the spatial modulation component of a drive.</p> <p>Next steps to build your program include choosing the waveform that will be summed with the spatial modulation to create a drive.</p> <p>The drive by itself, or the sum of subsequent drives (created by just chaining the construction of drives) will become the field (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.).</p> <ul> <li>You can now do:<ul> <li>|_ <code>...uniform.linear(start, stop, duration)</code> : to apply a linear waveform</li> <li>|_ <code>...uniform.constant(value, duration)</code> : to apply a constant waveform</li> <li>|_ <code>...uniform.poly([coefficients], duration)</code> : to apply a     polynomial waveform</li> <li>|_ <code>...uniform.apply(wf:bloqade.ir.Waveform)</code>: to apply a pre-defined waveform</li> <li>|_ <code>...uniform.piecewise_linear([durations], [values])</code>:  to apply a piecewise linear waveform</li> <li>|_ <code>...uniform.piecewise_constant([durations], [values])</code>: to apply a piecewise constant waveform</li> <li>|_ <code>...uniform.fn(f(t,...))</code>: to apply a function as a waveform</li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Field.location","title":"location","text":"<pre><code>location(label)\n</code></pre> <p>Address a single atom (or multiple via chaining calls, see below) as part of defining the spatial modulation component of a drive.</p> <p>Next steps to build your program include choosing the waveform that will be summed with the spatial modulation to create a drive.</p> <p>The drive by itself, or the sum of subsequent drives (created by just chaining the construction of drives) will become the field. (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n# to target a single atom with a waveform\n&gt;&gt;&gt; one_location_prog = prog.location(0)\n# to target multiple atoms with same waveform\n&gt;&gt;&gt; multi_location_prog = prog.location(0).location(2)\n</code></pre></p> <ul> <li>You can now do:<ul> <li>|_ <code>...location(int).linear(start, stop, duration)</code> : to apply     a linear waveform</li> <li>|_ <code>...location(int).constant(value, duration)</code> : to apply     a constant waveform</li> <li>|_ <code>...location(int).poly([coefficients], duration)</code> : to apply     a polynomial waveform</li> <li>|_ <code>...location(int).apply(wf:bloqade.ir.Waveform)</code>: to apply     a pre-defined waveform</li> <li>|_ <code>...location(int).piecewise_linear([durations], [values])</code>:  to apply     a piecewise linear waveform</li> <li>|_ <code>...location(int).piecewise_constant([durations], [values])</code>: to apply     a piecewise constant waveform</li> <li>|_ <code>...location(int).fn(f(t,..))</code>: to apply a function as a waveform</li> </ul> </li> <li>You can also address multiple atoms by chaining:<ul> <li>|_ <code>...location(int).location(int)</code><ul> <li>The waveform you specify after the last <code>location</code> in the chain will   be applied to all atoms in the chain</li> </ul> </li> </ul> </li> <li>And you can scale any waveform by a multiplicative factor on a     specific atom via:<ul> <li>|_ <code>...location(int).scale(float)</code></li> <li>You cannot define a scaling across multiple atoms with one method call!   They must be specified atom-by-atom.</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/field.py</code> <pre><code>@beartype\ndef location(self, label: int):\n\"\"\"\n    Address a single atom (or multiple via chaining calls, see below) as\n    part of defining the spatial modulation component of a drive.\n    Next steps to build your program include choosing the waveform that\n    will be summed with the spatial modulation to create a drive.\n    The drive by itself, or the sum of subsequent drives (created by just\n    chaining the construction of drives) will become the field.\n    (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n    # to target a single atom with a waveform\n    &gt;&gt;&gt; one_location_prog = prog.location(0)\n    # to target multiple atoms with same waveform\n    &gt;&gt;&gt; multi_location_prog = prog.location(0).location(2)\n    ```\n    - You can now do:\n        - |_ `...location(int).linear(start, stop, duration)` : to apply\n            a linear waveform\n        - |_ `...location(int).constant(value, duration)` : to apply\n            a constant waveform\n        - |_ `...location(int).poly([coefficients], duration)` : to apply\n            a polynomial waveform\n        - |_ `...location(int).apply(wf:bloqade.ir.Waveform)`: to apply\n            a pre-defined waveform\n        - |_ `...location(int).piecewise_linear([durations], [values])`:  to apply\n            a piecewise linear waveform\n        - |_ `...location(int).piecewise_constant([durations], [values])`: to apply\n            a piecewise constant waveform\n        - |_ `...location(int).fn(f(t,..))`: to apply a function as a waveform\n    - You can also address multiple atoms by chaining:\n        - |_ `...location(int).location(int)`\n            - The waveform you specify after the last `location` in the chain will\n              be applied to all atoms in the chain\n    - And you can scale any waveform by a multiplicative factor on a\n        specific atom via:\n        - |_ `...location(int).scale(float)`\n        - You cannot define a scaling across multiple atoms with one method call!\n          They must be specified atom-by-atom.\n    \"\"\"\nfrom bloqade.builder.spatial import Location\nreturn Location(label, self)\n</code></pre>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Field.var","title":"var","text":"<pre><code>var(name)\n</code></pre> <p>Address a single atom (or multiple via assigning a list of values) as part of defining the spatial modulation component of a drive.</p> <p>Next steps to build your program include choosing the waveform that will be summed with the spatial modulation to create a drive.</p> <p>The drive by itself, or the sum of subsequent drives (created by just chaining the construction of drives) will become the field (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n&gt;&gt;&gt; one_location_prog = prog.var(\"a\")\n# \"a\" can be assigned in the END of the program during variable assignment\n# indicating only a single atom should be targeted OR\n# a list of values, indicating a set of atoms should be targeted.\n&gt;&gt;&gt; target_one_atom = ...assign(a = 0)\n&gt;&gt;&gt; target_multiple_atoms = ...assign(a = [0, 2])\n# Note that `assign` is used, you cannot batch_assign variables used in\n# .var() calls\n</code></pre></p> <ul> <li>You can now do:<ul> <li>|_ <code>...var(str).linear(start, stop, duration)</code> : to apply     a linear waveform</li> <li>|_ <code>...var(str).constant(value, duration)</code> : to apply     a constant waveform</li> <li>|_ <code>...var(str).poly([coefficients], duration)</code> : to apply     a polynomial waveform</li> <li>|_ <code>...var(str).apply(wf:bloqade.ir.Waveform)</code>: to apply     a pre-defined waveform</li> <li>|_ <code>...var(str).piecewise_linear(durations, values)</code>:  to     apply a piecewise linear waveform</li> <li>|_ <code>...var(str).piecewise_constant(durations, values)</code>: to     apply a piecewise constant waveform</li> <li>|_ <code>...var(str).fn(f(t,..))</code>: to apply a function as a waveform</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/field.py</code> <pre><code>@beartype\ndef var(self, name: str):\n\"\"\"\n    Address a single atom (or multiple via assigning a list of values) as\n    part of defining the spatial modulation component of a drive.\n    Next steps to build your program include choosing the waveform that\n    will be summed with the spatial modulation to create a drive.\n    The drive by itself, or the sum of subsequent drives (created by just\n    chaining the construction of drives) will become the field\n    (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n    &gt;&gt;&gt; one_location_prog = prog.var(\"a\")\n    # \"a\" can be assigned in the END of the program during variable assignment\n    # indicating only a single atom should be targeted OR\n    # a list of values, indicating a set of atoms should be targeted.\n    &gt;&gt;&gt; target_one_atom = ...assign(a = 0)\n    &gt;&gt;&gt; target_multiple_atoms = ...assign(a = [0, 2])\n    # Note that `assign` is used, you cannot batch_assign variables used in\n    # .var() calls\n    ```\n    - You can now do:\n        - |_ `...var(str).linear(start, stop, duration)` : to apply\n            a linear waveform\n        - |_ `...var(str).constant(value, duration)` : to apply\n            a constant waveform\n        - |_ `...var(str).poly([coefficients], duration)` : to apply\n            a polynomial waveform\n        - |_ `...var(str).apply(wf:bloqade.ir.Waveform)`: to apply\n            a pre-defined waveform\n        - |_ `...var(str).piecewise_linear(durations, values)`:  to\n            apply a piecewise linear waveform\n        - |_ `...var(str).piecewise_constant(durations, values)`: to\n            apply a piecewise constant waveform\n        - |_ `...var(str).fn(f(t,..))`: to apply a function as a waveform\n    \"\"\"\nfrom bloqade.builder.spatial import Var\nreturn Var(name, self)\n</code></pre>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Rabi","title":"Rabi","text":"<p>             Bases: <code>Builder</code></p> <p>This node represent rabi field of a specified level coupling (rydberg or hyperfine) type.</p> <p>Examples:</p> <pre><code>- To specify rabi of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.rabi\n&lt;class 'bloqade.builder.field.Rabi'&gt;\n\n- To specify rabi of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.rabi\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Rabi'&gt;\n</code></pre>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Rabi.amplitude","title":"amplitude  <code>property</code>","text":"<pre><code>amplitude\n</code></pre> <p>Specify the real-valued Rabi Amplitude field.</p> <p>Next steps to build your program focus on specifying a spatial modulation.</p> <p>The spatial modulation, when coupled with a waveform, completes the specification of a \"Drive\". One or more drives can be summed together automatically to create a field such as the Rabi Amplitude here.</p> <ul> <li>You can now<ul> <li>|_ <code>...amplitude.uniform</code>: address all atoms in the field</li> <li>|_ <code>...amplitude.location(int)</code>: address a specific atom by its     index</li> <li>|_ <code>...amplitude.var(str)</code>: Address a single atom     (or multiple via assigning a list of values)</li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.Rabi.phase","title":"phase  <code>property</code>","text":"<pre><code>phase\n</code></pre> <p>Specify the real-valued Rabi Phase field.</p> <p>Next steps to build your program focus on specifying a spatial modulation.</p> <p>The spatial modulation, when coupled with a waveform, completes the specification of a \"Drive\". One or more drives can be summed together automatically to create a field such as the Rabi Phase here.</p> <ul> <li>You can now<ul> <li>|_ <code>...amplitude.uniform</code>: address all atoms in the field</li> <li>|_ <code>...amplitude.location(int)</code>: address a specific atom by its     index</li> <li>|_ <code>...amplitude.var(str)</code>: Address a single atom     (or multiple via assigning a list of values)</li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.RabiAmplitude","title":"RabiAmplitude","text":"<p>             Bases: <code>Field</code></p> <p>This node represent amplitude of a rabi field.</p> <p>Examples:</p> <pre><code>- To specify rabi amplitude of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.rabi.amplitude\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Amplitude'&gt;\n\n- To specify rabi amplitude of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.rabi.amplitude\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Amplitude'&gt;\n</code></pre> Note <p>This node is a SpatialModulation node. See <code>SpatialModulation</code> for additional options.</p>"},{"location":"reference/bloqade/builder/field/#bloqade.builder.field.RabiPhase","title":"RabiPhase","text":"<p>             Bases: <code>Field</code></p> <p>This node represent phase of a rabi field.</p> <p>Examples:</p> <pre><code>- To specify rabi phase of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.rabi.phase\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Phase'&gt;\n\n- To specify rabi phase of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.rabi.phase\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Phase'&gt;\n</code></pre> Note <p>This node is a SpatialModulation node. See <code>SpatialModulation</code> for additional options.</p>"},{"location":"reference/bloqade/builder/parallelize/","title":"Parallelize","text":""},{"location":"reference/bloqade/builder/pragmas/","title":"Pragmas","text":""},{"location":"reference/bloqade/builder/pragmas/#bloqade.builder.pragmas.Assignable","title":"Assignable","text":""},{"location":"reference/bloqade/builder/pragmas/#bloqade.builder.pragmas.Assignable.assign","title":"assign","text":"<pre><code>assign(**assignments)\n</code></pre> <p>Assign values to variables declared previously in the program.</p> <p>This is reserved for variables that should only take single values OR for spatial modulations that were created with <code>.var</code> in which case you can pass in a list. This is the ONLY circumstance in which multiple values are allowed.</p> <p>Usage Examples: <pre><code># define geometry\n&gt;&gt;&gt; reg = bloqade.start\n...       .add_position([(0,0),(1,1),(2,2),(3,3)])\n# define variables in program\n&gt;&gt;&gt; seq = reg.rydberg.detuning.uniform\n...       .linear(start=\"ival\",stop=1,duration=\"span_time\")\n# assign values to variables\n&gt;&gt;&gt; seq = seq.assign(span_time = 0.5, ival = 0.0)\n</code></pre></p> <ul> <li>You can now:<ul> <li>|_ ...assign(assignments).bloqade: select the bloqade local     emulator backend</li> <li>|_ ...assign(assignments).braket: select braket local emulator or     QuEra hardware</li> <li>|_ ...assign(assignments).device(specifier_string): select backend     by specifying a string</li> </ul> </li> <li>Assign multiple values to a single variable for a parameter sweep:<ul> <li>|_ ...assign(assignments).batch_assign(assignments):</li> </ul> </li> <li>Parallelize the program register, duplicating the geometry and waveform     sequence to take advantage of all available   space/qubits on the QPU:<ul> <li>|_ ...assign(assignments).parallelize(cluster_spacing)</li> </ul> </li> <li>Defer value assignment of certain variables to runtime:<ul> <li>|_ ...assign(assignments).args([previously_defined_vars])</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/pragmas.py</code> <pre><code>def assign(self, **assignments) -&gt; \"Assign\":\n\"\"\"\n    Assign values to variables declared previously in the program.\n    This is reserved for variables that should only take single values OR\n    for spatial modulations that were created with `.var` in which case you can\n    pass in a list. This is the ONLY circumstance in which multiple\n    values are allowed.\n    Usage Examples:\n    ```\n    # define geometry\n    &gt;&gt;&gt; reg = bloqade.start\n    ...       .add_position([(0,0),(1,1),(2,2),(3,3)])\n    # define variables in program\n    &gt;&gt;&gt; seq = reg.rydberg.detuning.uniform\n    ...       .linear(start=\"ival\",stop=1,duration=\"span_time\")\n    # assign values to variables\n    &gt;&gt;&gt; seq = seq.assign(span_time = 0.5, ival = 0.0)\n    ```\n    - You can now:\n        - |_ ...assign(assignments).bloqade: select the bloqade local\n            emulator backend\n        - |_ ...assign(assignments).braket: select braket local emulator or\n            QuEra hardware\n        - |_ ...assign(assignments).device(specifier_string): select backend\n            by specifying a string\n    - Assign multiple values to a single variable for a parameter sweep:\n        - |_ ...assign(assignments).batch_assign(assignments):\n    - Parallelize the program register, duplicating the geometry and waveform\n        sequence to take advantage of all available\n      space/qubits on the QPU:\n        - |_ ...assign(assignments).parallelize(cluster_spacing)\n    - Defer value assignment of certain variables to runtime:\n        - |_ ...assign(assignments).args([previously_defined_vars])\n    \"\"\"\nfrom bloqade.builder.assign import Assign\nreturn Assign(assignments, parent=self)\n</code></pre>"},{"location":"reference/bloqade/builder/pragmas/#bloqade.builder.pragmas.BatchAssignable","title":"BatchAssignable","text":""},{"location":"reference/bloqade/builder/pragmas/#bloqade.builder.pragmas.BatchAssignable.batch_assign","title":"batch_assign","text":"<pre><code>batch_assign(__batch_params=[], **assignments)\n</code></pre> <p>Assign multiple values to a single variable to create a parameter sweep.</p> <p>Bloqade automatically handles the multiple programs this would generate and treats it as object with unified results for easy post-processing.</p> <p>NOTE: if you assign multiple values to multiple variables in your program, the values must be of the same length. Bloqade will NOT do a Cartesian product (e.g. if \"var1\" is assigned [1,2,3] and \"var2\" is assigned [4,5,6] then the resulting programs will have assignments [1,4], [2,5], [3,6]).</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (0, \"atom_distance\")])\n&gt;&gt;&gt; prog = reg.rydberg.rabi.amplitude.uniform.constant(\"value\", 5.0)\n&gt;&gt;&gt; var_assigned_prog = prog.batch_assign(value = [1.0, 2.0, 3.0],\natom_distance = [1.0, 2.0, 3.0])\n</code></pre></p> <ul> <li>Next steps are:<ul> <li>|_ ...batch_assign(assignments).bloqade: select the bloqade     local emulator backend</li> <li>|_ ...batch_assign(assignments).braket: select braket local emulator or QuEra hardware</li> <li>|_ ...batch_assign(assignments).device(specifier_string): select backend by specifying a string</li> </ul> </li> <li>Parallelize the program register, duplicating the geometry and waveform   sequence to take advantage of all available   space/qubits on the QPU:<ul> <li>|_ ...batch_assign(assignments).parallelize(cluster_spacing)</li> </ul> </li> <li>Defer value assignment of certain variables to runtime:<ul> <li>|_ ...batch_assign(assignments).args([previously_defined_vars])</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/pragmas.py</code> <pre><code>def batch_assign(\nself,\n__batch_params: List[Dict[str, ParamType]] = [],\n**assignments: List[ParamType],\n) -&gt; Union[\"BatchAssign\", \"ListAssign\"]:\n\"\"\"\n    Assign multiple values to a single variable to create a parameter sweep.\n    Bloqade automatically handles the multiple programs this would generate\n    and treats it as object with unified results for easy post-processing.\n    NOTE: if you assign multiple values to multiple variables in your program,\n    the values must be of the same length. Bloqade will NOT do a Cartesian product\n    (e.g. if \"var1\" is assigned [1,2,3] and \"var2\" is assigned [4,5,6] then the\n    resulting programs will have assignments [1,4], [2,5], [3,6]).\n    Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (0, \"atom_distance\")])\n    &gt;&gt;&gt; prog = reg.rydberg.rabi.amplitude.uniform.constant(\"value\", 5.0)\n    &gt;&gt;&gt; var_assigned_prog = prog.batch_assign(value = [1.0, 2.0, 3.0],\n    atom_distance = [1.0, 2.0, 3.0])\n    ```\n    - Next steps are:\n        - |_ ...batch_assign(assignments).bloqade: select the bloqade\n            local emulator backend\n        - |_ ...batch_assign(assignments).braket: select braket local\n        emulator or QuEra hardware\n        - |_ ...batch_assign(assignments).device(specifier_string): select\n        backend by specifying a string\n    - Parallelize the program register, duplicating the geometry and waveform\n      sequence to take advantage of all available\n      space/qubits on the QPU:\n        - |_ ...batch_assign(assignments).parallelize(cluster_spacing)\n    - Defer value assignment of certain variables to runtime:\n        - |_ ...batch_assign(assignments).args([previously_defined_vars])\n    \"\"\"\nfrom bloqade.builder.assign import BatchAssign, ListAssign\nif len(__batch_params) &gt; 0 and assignments:\nraise ValueError(\"batch_params and assignments cannot be used together.\")\nif len(__batch_params) &gt; 0:\nreturn ListAssign(__batch_params, parent=self)\nelse:\nreturn BatchAssign(assignments, parent=self)\n</code></pre>"},{"location":"reference/bloqade/builder/pragmas/#bloqade.builder.pragmas.Parallelizable","title":"Parallelizable","text":""},{"location":"reference/bloqade/builder/pragmas/#bloqade.builder.pragmas.Parallelizable.parallelize","title":"parallelize","text":"<pre><code>parallelize(cluster_spacing)\n</code></pre> <p>Parallelize the current problem (register and sequence) by duplicating the geometry to take advantage of all available space/qubits on hardware.</p> <p>The singular argument lets you specify how far apart the clusters should be in micrometers.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; reg = start.add_position((0,0)).rydberg.rabi.uniform.amplitude\n.constant(1.0, 1.0)\n# copy-paste the geometry and waveforms\n&gt;&gt;&gt; parallelized_prog = reg.parallelize(24)\n</code></pre></p> <ul> <li>Your next steps are:     |_ <code>...parallelize(cluster_spacing).bloqade</code>: select the bloqade         local emulator backend     |_ <code>...parallelize(cluster_spacing).braket</code>: select braket         local emulator or QuEra hardware on the cloud     |_ <code>...parallelize(cluster_spacing).device(specifier_string)</code>: select         backend by specifying a string</li> </ul> Source code in <code>src/bloqade/builder/pragmas.py</code> <pre><code>def parallelize(self, cluster_spacing: LiteralType) -&gt; \"Parallelize\":\n\"\"\"\n    Parallelize the current problem (register and sequence) by duplicating\n    the geometry to take advantage of all available space/qubits on hardware.\n    The singular argument lets you specify how far apart the clusters\n    should be in micrometers.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position((0,0)).rydberg.rabi.uniform.amplitude\n    .constant(1.0, 1.0)\n    # copy-paste the geometry and waveforms\n    &gt;&gt;&gt; parallelized_prog = reg.parallelize(24)\n    ```\n    - Your next steps are:\n        |_ `...parallelize(cluster_spacing).bloqade`: select the bloqade\n            local emulator backend\n        |_ `...parallelize(cluster_spacing).braket`: select braket\n            local emulator or QuEra hardware on the cloud\n        |_ `...parallelize(cluster_spacing).device(specifier_string)`: select\n            backend by specifying a string\n    \"\"\"\nfrom bloqade.builder.parallelize import Parallelize\nreturn Parallelize(cluster_spacing, self)\n</code></pre>"},{"location":"reference/bloqade/builder/route/","title":"Route","text":""},{"location":"reference/bloqade/builder/sequence_builder/","title":"Sequence builder","text":""},{"location":"reference/bloqade/builder/spatial/","title":"Spatial","text":""},{"location":"reference/bloqade/builder/spatial/#bloqade.builder.spatial.Location","title":"Location","text":"<pre><code>Location(label, parent=None)\n</code></pre> <p>             Bases: <code>SpatialModulation</code></p> Source code in <code>src/bloqade/builder/spatial.py</code> <pre><code>@beartype\ndef __init__(self, label: int, parent: Optional[Builder] = None) -&gt; None:\nassert isinstance(label, int) and label &gt;= 0\nsuper().__init__(parent)\nself._label = label\n</code></pre>"},{"location":"reference/bloqade/builder/spatial/#bloqade.builder.spatial.Location.location","title":"location","text":"<pre><code>location(label)\n</code></pre> <p>Append another <code>.location</code> to the current location(s) as part of a singular spatial modulation definition.</p> <p>Usage Example: <pre><code># definep program\n&gt;&gt;&gt; from bloqade.atom_arrangement import start\n&gt;&gt;&gt; geometry = start.add_position([(0,0),(1,1),(3,3)])\n&gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.location(0)\n&gt;&gt;&gt; chain_loc_prog = prog.location(1).location(2)\n# Atoms at indices 0, 1, and 2 will now be subject\n# to the upcoming waveform definition. Thus, the\n# multiple locations are part of a singular\n# spatial modulation.\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continuing to modify your current spatial modulation via:<ul> <li>|_ <code>...location(int).location(int)</code>: To add another location</li> <li>|_ <code>...location(int).scale(float)</code>: To scale the upcoming waveform</li> </ul> </li> <li>You may also jump directly to specifying a waveform via:<ul> <li>|_ <code>...location(int).linear(start, stop, duration)</code>:     to append a linear waveform</li> <li>|_ <code>...location(int).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...location(int)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...location(int)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...location(int).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...location(int).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...location(int).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/spatial.py</code> <pre><code>@beartype\ndef location(self, label: int) -&gt; \"Location\":\n\"\"\"\n    Append another `.location` to the current location(s)\n    as part of a singular spatial modulation definition.\n    Usage Example:\n    ```\n    # definep program\n    &gt;&gt;&gt; from bloqade.atom_arrangement import start\n    &gt;&gt;&gt; geometry = start.add_position([(0,0),(1,1),(3,3)])\n    &gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.location(0)\n    &gt;&gt;&gt; chain_loc_prog = prog.location(1).location(2)\n    # Atoms at indices 0, 1, and 2 will now be subject\n    # to the upcoming waveform definition. Thus, the\n    # multiple locations are part of a singular\n    # spatial modulation.\n    ```\n    - Your next steps include:\n    - Continuing to modify your current spatial modulation via:\n        - |_ `...location(int).location(int)`: To add another location\n        - |_ `...location(int).scale(float)`: To scale the upcoming waveform\n    - You may also jump directly to specifying a waveform via:\n        - |_ `...location(int).linear(start, stop, duration)`:\n            to append a linear waveform\n        - |_ `...location(int).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...location(int)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...location(int)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...location(int).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...location(int).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...location(int).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    \"\"\"\nreturn Location(label, self)\n</code></pre>"},{"location":"reference/bloqade/builder/spatial/#bloqade.builder.spatial.Location.scale","title":"scale","text":"<pre><code>scale(value)\n</code></pre> <p>Scale the subsequent waveform to be applied on a certain set of atoms specified by the current spatial modulation.</p> <p>Usage Examples: <pre><code># define program\n&gt;&gt;&gt; reg = bloqade.start.add_position([(0,0),(1,1),(2,2),(3,3)])\n# scale the subsequent waveform to be applied on atom 0 by 1.2\n&gt;&gt;&gt; scaled = reg.rydberg.detuning.location(0).scale(1.2)\n# scale the waveform on multiple locations by different factors\n&gt;&gt;&gt; loc = reg.rydberg.detuning.location(0)\n&gt;&gt;&gt; loc = loc.scale(1.2).location(1).scale(0.5)\n# scale multiple locations with the same factor\n&gt;&gt;&gt; scaled = reg.rydberg.detuning.location(0).location(1).scale(1.2)\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continuing to modify your current spatial modulation via:<ul> <li>|_ <code>...scale(float).location(int)</code>: To add another location</li> </ul> </li> <li>You may also jump directly to specifying a waveform via:<ul> <li>|_ <code>...scale(float).linear(start, stop, duration)</code>:     to append a linear waveform</li> <li>|_ <code>...scale(float).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...scale(float)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...scale(float)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...scale(float).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...scale(float).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...scale(float).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/spatial.py</code> <pre><code>@beartype\ndef scale(self, value: ScalarType) -&gt; \"Scale\":\n\"\"\"\n    Scale the subsequent waveform to be applied on a certain set of\n    atoms specified by the current spatial modulation.\n    Usage Examples:\n    ```\n    # define program\n    &gt;&gt;&gt; reg = bloqade.start.add_position([(0,0),(1,1),(2,2),(3,3)])\n    # scale the subsequent waveform to be applied on atom 0 by 1.2\n    &gt;&gt;&gt; scaled = reg.rydberg.detuning.location(0).scale(1.2)\n    # scale the waveform on multiple locations by different factors\n    &gt;&gt;&gt; loc = reg.rydberg.detuning.location(0)\n    &gt;&gt;&gt; loc = loc.scale(1.2).location(1).scale(0.5)\n    # scale multiple locations with the same factor\n    &gt;&gt;&gt; scaled = reg.rydberg.detuning.location(0).location(1).scale(1.2)\n    ```\n    - Your next steps include:\n    - Continuing to modify your current spatial modulation via:\n        - |_ `...scale(float).location(int)`: To add another location\n    - You may also jump directly to specifying a waveform via:\n        - |_ `...scale(float).linear(start, stop, duration)`:\n            to append a linear waveform\n        - |_ `...scale(float).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...scale(float)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...scale(float)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...scale(float).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...scale(float).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...scale(float).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    \"\"\"\nreturn Scale(value, self)\n</code></pre>"},{"location":"reference/bloqade/builder/spatial/#bloqade.builder.spatial.Scale","title":"Scale","text":"<pre><code>Scale(value, parent=None)\n</code></pre> <p>             Bases: <code>WaveformAttachable</code></p> Source code in <code>src/bloqade/builder/spatial.py</code> <pre><code>@beartype\ndef __init__(self, value: ScalarType, parent: Optional[Builder] = None) -&gt; None:\nsuper().__init__(parent)\nself._value = value\n</code></pre>"},{"location":"reference/bloqade/builder/spatial/#bloqade.builder.spatial.Scale.location","title":"location","text":"<pre><code>location(label)\n</code></pre> <p>Append another <code>.location</code> to the current location(s) as part of a singular spatial modulation definition.</p> <p>Usage Example: <pre><code># definep program\n&gt;&gt;&gt; from bloqade.atom_arrangement import start\n&gt;&gt;&gt; geometry = start.add_position([(0,0),(1,1),(3,3)])\n&gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.location(0)\n&gt;&gt;&gt; chain_loc_prog = prog.location(1).location(2)\n# Atoms at indices 0, 1, and 2 will now be subject\n# to the upcoming waveform definition. Thus, the\n# multiple locations are part of a singular\n# spatial modulation.\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continuing to modify your current spatial modulation via:<ul> <li>|_ <code>...location(int).location(int)</code>: To add another location</li> <li>|_ <code>...location(int).scale(float)</code>: To scale the upcoming waveform</li> </ul> </li> <li>You may also jump directly to specifying a waveform via:<ul> <li>|_ <code>...location(int).linear(start, stop, duration)</code>:     to append a linear waveform</li> <li>|_ <code>...location(int).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...location(int)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...location(int)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...location(int).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...location(int).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...location(int).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/spatial.py</code> <pre><code>@beartype\ndef location(self, label: int) -&gt; \"Location\":\n\"\"\"\n    Append another `.location` to the current location(s)\n    as part of a singular spatial modulation definition.\n    Usage Example:\n    ```\n    # definep program\n    &gt;&gt;&gt; from bloqade.atom_arrangement import start\n    &gt;&gt;&gt; geometry = start.add_position([(0,0),(1,1),(3,3)])\n    &gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.location(0)\n    &gt;&gt;&gt; chain_loc_prog = prog.location(1).location(2)\n    # Atoms at indices 0, 1, and 2 will now be subject\n    # to the upcoming waveform definition. Thus, the\n    # multiple locations are part of a singular\n    # spatial modulation.\n    ```\n    - Your next steps include:\n    - Continuing to modify your current spatial modulation via:\n        - |_ `...location(int).location(int)`: To add another location\n        - |_ `...location(int).scale(float)`: To scale the upcoming waveform\n    - You may also jump directly to specifying a waveform via:\n        - |_ `...location(int).linear(start, stop, duration)`:\n            to append a linear waveform\n        - |_ `...location(int).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...location(int)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...location(int)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...location(int).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...location(int).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...location(int).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    \"\"\"\nreturn Location(label, self)\n</code></pre>"},{"location":"reference/bloqade/builder/spatial/#bloqade.builder.spatial.Uniform","title":"Uniform","text":"<p>             Bases: <code>SpatialModulation</code></p> <p>The node specify a uniform spacial modulation. Which is ready to apply waveform (See <code>Waveform</code> for available waveform options)</p> <p>Examples:</p> <pre><code>- To hit this node from the start node:\n\n&gt;&gt;&gt; reg = bloqade.start.add_position([(0,0),(1,1),(2,2),(3,3)])\n&gt;&gt;&gt; loc = reg.rydberg.detuning.uniform\n\n- Apply Linear waveform:\n\n&gt;&gt;&gt; wv = bloqade.ir.Linear(start=0,stop=1,duration=0.5)\n&gt;&gt;&gt; reg = bloqade.start.add_position([(0,0),(1,1),(2,2),(3,3)])\n&gt;&gt;&gt; loc = reg.rydberg.detuning.uniform.apply(wv)\n</code></pre>"},{"location":"reference/bloqade/builder/start/","title":"Start","text":""},{"location":"reference/bloqade/builder/start/#bloqade.builder.start.ProgramStart","title":"ProgramStart","text":"<p>             Bases: <code>Drive</code>, <code>Builder</code></p> <p>ProgramStart is the base class for a starting/entry node for building a program.</p>"},{"location":"reference/bloqade/builder/start/#bloqade.builder.start.ProgramStart.apply","title":"apply","text":"<pre><code>apply(sequence)\n</code></pre> <p>Apply a pre-built sequence to a program.</p> <p>This allows you to build a program independent of any geometry and then <code>apply</code> the program to said geometry. Or, if you have a program you would like to try on multiple geometries you can trivially do so with this.</p> <p>Example Usage: <pre><code>&gt;&gt;&gt; from numpy import pi\n&gt;&gt;&gt; seq = start.rydberg.rabi.amplitude.constant(2.0 * pi, 4.5)\n# choose a geometry of interest to apply the program on\n&gt;&gt;&gt; from bloqade.atom_arrangement import Chain, Kagome\n&gt;&gt;&gt; complete_program = Chain(10).apply(seq)\n# you can .apply to as many geometries as you like\n&gt;&gt;&gt; another_complete_program = Kagome(3).apply(seq)\n</code></pre></p> <ul> <li>From here you can now do:<ul> <li>|_ <code>...assign(assignments).bloqade</code>: select the bloqade     local emulator backend</li> <li>|_ <code>...assign(assignments).braket</code>: select braket     local emulator or QuEra hardware</li> <li>|_ <code>...assign(assignments).device(specifier_string)</code>: select     backend by specifying a string</li> </ul> </li> <li>Assign multiple values to a single variable for a parameter sweep:<ul> <li>|_ <code>...assign(assignments).batch_assign(assignments)</code>:</li> </ul> </li> <li>Parallelize the program register, duplicating the geometry and waveform     sequence to take advantage of all available   space/qubits on the QPU:<ul> <li>|_ <code>...assign(assignments).parallelize(cluster_spacing)</code></li> </ul> </li> <li>Defer value assignment of certain variables to runtime:<ul> <li>|_ <code>...assign(assignments).args([previously_defined_vars])</code></li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/start.py</code> <pre><code>@beartype\ndef apply(self, sequence: Sequence) -&gt; SequenceBuilder:\n\"\"\"\n    Apply a pre-built sequence to a program.\n    This allows you to build a program independent of any geometry\n    and then `apply` the program to said geometry. Or, if you have a\n    program you would like to try on multiple geometries you can\n    trivially do so with this.\n    Example Usage:\n    ```\n    &gt;&gt;&gt; from numpy import pi\n    &gt;&gt;&gt; seq = start.rydberg.rabi.amplitude.constant(2.0 * pi, 4.5)\n    # choose a geometry of interest to apply the program on\n    &gt;&gt;&gt; from bloqade.atom_arrangement import Chain, Kagome\n    &gt;&gt;&gt; complete_program = Chain(10).apply(seq)\n    # you can .apply to as many geometries as you like\n    &gt;&gt;&gt; another_complete_program = Kagome(3).apply(seq)\n    ```\n    - From here you can now do:\n        - |_ `...assign(assignments).bloqade`: select the bloqade\n            local emulator backend\n        - |_ `...assign(assignments).braket`: select braket\n            local emulator or QuEra hardware\n        - |_ `...assign(assignments).device(specifier_string)`: select\n            backend by specifying a string\n    - Assign multiple values to a single variable for a parameter sweep:\n        - |_ `...assign(assignments).batch_assign(assignments)`:\n    - Parallelize the program register, duplicating the geometry and waveform\n        sequence to take advantage of all available\n      space/qubits on the QPU:\n        - |_ `...assign(assignments).parallelize(cluster_spacing)`\n    - Defer value assignment of certain variables to runtime:\n        - |_ `...assign(assignments).args([previously_defined_vars])`\n    \"\"\"\nreturn SequenceBuilder(sequence, self)\n</code></pre>"},{"location":"reference/bloqade/builder/typing/","title":"Typing","text":""},{"location":"reference/bloqade/builder/waveform/","title":"Waveform","text":""},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.Recordable","title":"Recordable","text":""},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.Recordable.record","title":"record","text":"<pre><code>record(name)\n</code></pre> <p>Copy or \"record\" the value at the end of the waveform into a variable so that it can be used in another place.</p> <p>A common design pattern is to couple this with <code>.slice()</code> considering you may not know exactly what the end value of a <code>.slice()</code> is, especially in parameter sweeps where it becomes cumbersome to handle.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code># define program of interest\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.uniform\n&gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n# We now slice the piecewise_linear from above and record the\n# value at the end of that slice. We then use that value\n# to construct a new waveform that can be appended to the previous\n# one without introducing discontinuity (refer to the\n# \"Quantum Scar Dynamics\" tutorial for how this could be handy)\n&gt;&gt;&gt; prog_with_record = prog_with_wf.slice(0.0, 1.0).record(\"end_of_wf\")\n&gt;&gt;&gt; record_applied_prog = prog_with_record.linear(start=\"end_of_wf\"\n, stop=0.0, duration=0.3)\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...slice(start, stop).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...slice(start, stop).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...slice(start, stop).piecewise_linear()</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...slice(start, stop).piecewise_constant()</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...slice(start, stop).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...slice(start, stop).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...slilce(start, stop).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li>|_ <code>...slice(start, stop).uniform</code>:     To address all atoms in the field</li> <li>|_ <code>...slice(start, stop).location(int)</code>:     To address an atom at a specific location via index</li> <li>|_ <code>...slice(start, stop).var(str)</code><ul> <li>|_ To address an atom at a specific location via variable</li> <li>|_ To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...slice(start, stop).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...slice(start, stop)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...slice(start, stop).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...slice(start, stop).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...slice(start, stop).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...slice(start, stop).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...slice(start, stop).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...slice(start, stop).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...slice(start, stop).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...slice(start, stop).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...slice(start, stop).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...slice(start, stop).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...slice(start, stop).rabi</code>:     to target the complex-valued Rabi field ```</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef record(self, name: str) -&gt; \"Record\":\n\"\"\"\n    Copy or \"record\" the value at the end of the waveform into a variable\n    so that it can be used in another place.\n    A common design pattern is to couple this with `.slice()` considering\n    you may not know exactly what the end value of a `.slice()` is,\n    especially in parameter sweeps where it becomes cumbersome to handle.\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    # define program of interest\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.uniform\n    &gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    # We now slice the piecewise_linear from above and record the\n    # value at the end of that slice. We then use that value\n    # to construct a new waveform that can be appended to the previous\n    # one without introducing discontinuity (refer to the\n    # \"Quantum Scar Dynamics\" tutorial for how this could be handy)\n    &gt;&gt;&gt; prog_with_record = prog_with_wf.slice(0.0, 1.0).record(\"end_of_wf\")\n    &gt;&gt;&gt; record_applied_prog = prog_with_record.linear(start=\"end_of_wf\"\n    , stop=0.0, duration=0.3)\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...slice(start, stop).linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...slice(start, stop).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...slice(start, stop).piecewise_linear()`:\n            to append a piecewise linear waveform\n        - |_ `...slice(start, stop).piecewise_constant()`:\n            to append a piecewise constant waveform\n        - |_ `...slice(start, stop).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...slice(start, stop).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...slilce(start, stop).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - |_ `...slice(start, stop).uniform`:\n            To address all atoms in the field\n        - |_ `...slice(start, stop).location(int)`:\n            To address an atom at a specific location via index\n        - |_ `...slice(start, stop).var(str)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...slice(start, stop).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...slice(start, stop)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...slice(start, stop).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...slice(start, stop).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...slice(start, stop).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...slice(start, stop).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...slice(start, stop).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...slice(start, stop).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...slice(start, stop).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...slice(start, stop).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...slice(start, stop).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...slice(start, stop).detuning`:\n            to target the Detuning field\n        - |_ `...slice(start, stop).rabi`:\n            to target the complex-valued Rabi field\n    ```\n    \"\"\"\nreturn Record(name, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.Sliceable","title":"Sliceable","text":""},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.Sliceable.slice","title":"slice","text":"<pre><code>slice(start=None, stop=None)\n</code></pre> <p>Indicate that you only want a portion of your waveform to be used in the program.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code># define a program with a waveform of interest\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.amplitude.uniform\n&gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n# instead of using the full waveform we opt to only take the first 1 us\n&gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(0.0, 1.0)\n# you may use variables as well\n&gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(\"start\", \"end\")\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...slice(start, stop).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...slice(start, stop).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...slice(start, stop).piecewise_linear()</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...slice(start, stop).piecewise_constant()</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...slice(start, stop).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...slice(start, stop).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...slilce(start, stop).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li>|_ <code>...slice(start, stop).uniform</code>:     To address all atoms in the field</li> <li>|_ <code>...slice(start, stop).location(int)</code>:     To address an atom at a specific location via index</li> <li>|_ <code>...slice(start, stop).var(str)</code><ul> <li>|_ To address an atom at a specific location via variable</li> <li>|_ To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...slice(start, stop).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...slice(start, stop)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...slice(start, stop).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...slice(start, stop).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...slice(start, stop).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...slice(start, stop).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...slice(start, stop).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...slice(start, stop).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...slice(start, stop).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...slice(start, stop).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...slice(start, stop).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...slice(start, stop).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...slice(start, stop).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef slice(\nself,\nstart: Optional[ScalarType] = None,\nstop: Optional[ScalarType] = None,\n) -&gt; \"Slice\":\n\"\"\"\n    Indicate that you only want a portion of your waveform to be used in\n    the program.\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    # define a program with a waveform of interest\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.amplitude.uniform\n    &gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    # instead of using the full waveform we opt to only take the first 1 us\n    &gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(0.0, 1.0)\n    # you may use variables as well\n    &gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(\"start\", \"end\")\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...slice(start, stop).linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...slice(start, stop).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...slice(start, stop).piecewise_linear()`:\n            to append a piecewise linear waveform\n        - |_ `...slice(start, stop).piecewise_constant()`:\n            to append a piecewise constant waveform\n        - |_ `...slice(start, stop).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...slice(start, stop).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...slilce(start, stop).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - |_ `...slice(start, stop).uniform`:\n            To address all atoms in the field\n        - |_ `...slice(start, stop).location(int)`:\n            To address an atom at a specific location via index\n        - |_ `...slice(start, stop).var(str)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...slice(start, stop).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...slice(start, stop)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...slice(start, stop).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...slice(start, stop).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...slice(start, stop).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...slice(start, stop).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...slice(start, stop).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...slice(start, stop).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...slice(start, stop).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...slice(start, stop).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...slice(start, stop).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...slice(start, stop).detuning`:\n            to target the Detuning field\n        - |_ `...slice(start, stop).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn Slice(start, stop, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable","title":"WaveformAttachable","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.apply","title":"apply","text":"<pre><code>apply(wf)\n</code></pre> <p>Apply a <code>Waveform</code> built previously to current location(s).</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# build our waveform independently of the main program\n&gt;&gt;&gt; from bloqade import piecewise_linear\n&gt;&gt;&gt; wf = piecewise_linear(durations=[0.3, 2.5, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n&gt;&gt;&gt; prog.apply(wf)\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...apply(waveform).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...apply(waveform).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...apply(waveform).piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...apply(waveform).piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...apply(waveform).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...apply(waveform).apply(waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...apply(waveform).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...apply(waveform).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...apply(waveform).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):     -|_ <code>...apply(waveform).uniform</code>: To address all atoms in the field     -|_ <code>...apply(waveform).location(int)</code>:         To address an atom at a specific location via index     -|_ <code>...apply(waveform).var(str)</code>         - |_ To address an atom at a specific location via variable         - |_ To address multiple atoms at specific locations by specifying a             single variable and then assigning it a list of coordinates</li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...apply(waveform).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...apply(waveform).batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...apply(waveform).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...apply(waveform).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...apply(waveform).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...apply(waveform).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...apply(waveform).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...apply(waveform).rydberg</code>: to target the Rydberg level coupling</li> <li>|_ <code>...apply(waveform).hyperfine</code>: to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...apply(waveform).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...apply(waveform).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...apply(waveform).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...apply(waveform).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef apply(self, wf: ir.Waveform) -&gt; \"Apply\":\n\"\"\"\n    Apply a [`Waveform`][bloqade.ir.control.Waveform] built previously to\n    current location(s).\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # build our waveform independently of the main program\n    &gt;&gt;&gt; from bloqade import piecewise_linear\n    &gt;&gt;&gt; wf = piecewise_linear(durations=[0.3, 2.5, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    &gt;&gt;&gt; prog.apply(wf)\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...apply(waveform).linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...apply(waveform).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...apply(waveform).piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...apply(waveform).piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...apply(waveform).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...apply(waveform).apply(waveform)`:\n            to append a pre-defined waveform\n        - |_ `...apply(waveform).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...apply(waveform).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...apply(waveform).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        -|_ `...apply(waveform).uniform`: To address all atoms in the field\n        -|_ `...apply(waveform).location(int)`:\n            To address an atom at a specific location via index\n        -|_ `...apply(waveform).var(str)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by specifying a\n                single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...apply(waveform).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...apply(waveform).batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...apply(waveform).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...apply(waveform).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...apply(waveform).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...apply(waveform).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...apply(waveform).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...apply(waveform).rydberg`: to target the Rydberg level coupling\n        - |_ `...apply(waveform).hyperfine`: to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...apply(waveform).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...apply(waveform).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...apply(waveform).detuning`:\n            to target the Detuning field\n        - |_ `...apply(waveform).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn Apply(wf, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.constant","title":"constant","text":"<pre><code>constant(value, duration)\n</code></pre> <p>Append or assign a constant waveform to the current location(s).</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# apply a constant waveform of 1.9 radians/us for 0.5 us\n&gt;&gt;&gt; prog.constant(value=1.9,duration=0.5)\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...constant(value, duration).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...constant(value, duration).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...constant(value, duration)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...constant(value, duration)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...constant(value, duration).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...constant(value, duration).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...constant(value, duration).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...constant(value, duration).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...constant(value, duration).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):     -|_ <code>...constant(value, duration).uniform</code>:         To address all atoms in the field     -|_ <code>...constant(value, duration).var</code>:         To address an atom at a specific location via index     -|_ <code>...constant(value, duration).location(int)</code>         - |_ To address an atom at a specific location via variable         - |_ To address multiple atoms at specific locations by specifying             a single variable and then assigning it a list of coordinates</li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...constant(value, duration).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...constant(value, duration)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...constant(value, duration).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...constant(value, duration).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...constant(value, duration).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...constant(value, duration).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...constant(start, stop, duration).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...constant(value, duration).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...constant(value, duration).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current   level coupling (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...constant(value, duration).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...constant(value, duration).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...constant(value, duration).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...constant(value, duration).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef constant(self, value: ScalarType, duration: ScalarType) -&gt; \"Constant\":\n\"\"\"\n    Append or assign a constant waveform to the current location(s).\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # apply a constant waveform of 1.9 radians/us for 0.5 us\n    &gt;&gt;&gt; prog.constant(value=1.9,duration=0.5)\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...constant(value, duration).linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...constant(value, duration).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...constant(value, duration)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...constant(value, duration)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...constant(value, duration).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...constant(value, duration).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...constant(value, duration).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...constant(value, duration).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...constant(value, duration).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        -|_ `...constant(value, duration).uniform`:\n            To address all atoms in the field\n        -|_ `...constant(value, duration).var`:\n            To address an atom at a specific location via index\n        -|_ `...constant(value, duration).location(int)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...constant(value, duration).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...constant(value, duration)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...constant(value, duration).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...constant(value, duration).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...constant(value, duration).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...constant(value, duration).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...constant(start, stop, duration).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...constant(value, duration).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...constant(value, duration).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current\n      level coupling (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...constant(value, duration).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...constant(value, duration).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...constant(value, duration).detuning`:\n            to target the Detuning field\n        - |_ `...constant(value, duration).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn Constant(value, duration, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.fn","title":"fn","text":"<pre><code>fn(fn, duration)\n</code></pre> <p>Append or assign a custom function as a waveform.</p> <p>The function must have its first argument be that of time but can also have other arguments which are treated as variables. You can assign values to later in the program via <code>.assign</code> or <code>.batch_assign</code>.</p> <p>The function must also return a singular float value.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Examples: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# define our custom waveform. It must have one argument\n# be time followed by any other number of arguments that can\n# be assigned a value later in the program via `.assign` or `.batch_assign`\n&gt;&gt;&gt; def custom_waveform_function(t, arg1, arg2):\n        return arg1*t + arg2\n&gt;&gt;&gt; prog = prog.fn(custom_waveform_function, duration = 0.5)\n# assign values\n&gt;&gt;&gt; assigned_vars_prog = prog.assign(arg1 = 1.0, arg2 = 2.0)\n# or go for batching!\n&gt;&gt;&gt; assigned_vars_batch_prog = prog.assign(arg1 = 1.0, arg2 = [1.0, 2.0, 3.0])\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...fn(f(t,...))     .linear(start, stop, duration)</code>: to append another linear waveform</li> <li>|_ <code>...fn(f(t,...))     .constant(value, duration)</code>: to append a constant waveform</li> <li>|_ <code>...fn(f(t,...))     .piecewise_linear(durations, values)</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...fn(f(t,...))     .piecewise_constant(durations, values)</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...fn(f(t,...))     .poly([coefficients], duration)</code>: to append a polynomial waveform</li> <li>|_ <code>...fn(f(t,...))     .apply(waveform)</code>: to append a pre-defined waveform</li> <li>|_ <code>...fn(f(t,...))     .fn(f(t,...))</code>: to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...fn(f(t,...)).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...fn(f(t,...)).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):     -|_ <code>...fn(f(t,...)).uniform</code>:         To address all atoms in the field     -|_ <code>...fn(f(t,...)).var(str)</code>:         To address an atom at a specific location via index     -|_ ...fn(f(t,...)).location(int)`         - |_ To address an atom at a specific location via variable         - |_ To address multiple atoms at specific locations by             specifying a single variable and then assigning it a             list of coordinates</li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...fn(f(t,...))     .assign(variable_name = value)</code>: to assign a single value to a variable</li> <li>|_ <code>...fn(f(t,...))     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...fn(f(t,...))     .args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...fn(f(t,...)).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...fn(f(t,...)).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...fn(f(t,...)).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...fn(f(t,...)).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...fn(f(t,...)).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...fn(f(t,...)).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...fn(f(t,...)).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...fn(f(t,...)).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...fn(f(t,...)).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...fn(f(t,...)).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef fn(self, fn: Callable, duration: ScalarType) -&gt; \"Fn\":\n\"\"\"\n    Append or assign a custom function as a waveform.\n    The function must have its first argument be that of time but\n    can also have other arguments which are treated as variables.\n    You can assign values to later in the program via `.assign` or `.batch_assign`.\n    The function must also return a singular float value.\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Examples:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # define our custom waveform. It must have one argument\n    # be time followed by any other number of arguments that can\n    # be assigned a value later in the program via `.assign` or `.batch_assign`\n    &gt;&gt;&gt; def custom_waveform_function(t, arg1, arg2):\n            return arg1*t + arg2\n    &gt;&gt;&gt; prog = prog.fn(custom_waveform_function, duration = 0.5)\n    # assign values\n    &gt;&gt;&gt; assigned_vars_prog = prog.assign(arg1 = 1.0, arg2 = 2.0)\n    # or go for batching!\n    &gt;&gt;&gt; assigned_vars_batch_prog = prog.assign(arg1 = 1.0, arg2 = [1.0, 2.0, 3.0])\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...fn(f(t,...))\n            .linear(start, stop, duration)`: to append another linear waveform\n        - |_ `...fn(f(t,...))\n            .constant(value, duration)`: to append a constant waveform\n        - |_ `...fn(f(t,...))\n            .piecewise_linear(durations, values)`:\n            to append a piecewise linear waveform\n        - |_ `...fn(f(t,...))\n            .piecewise_constant(durations, values)`:\n            to append a piecewise constant waveform\n        - |_ `...fn(f(t,...))\n            .poly([coefficients], duration)`: to append a polynomial waveform\n        - |_ `...fn(f(t,...))\n            .apply(waveform)`: to append a pre-defined waveform\n        - |_ `...fn(f(t,...))\n            .fn(f(t,...))`: to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...fn(f(t,...)).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...fn(f(t,...)).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        -|_ `...fn(f(t,...)).uniform`:\n            To address all atoms in the field\n        -|_ `...fn(f(t,...)).var(str)`:\n            To address an atom at a specific location via index\n        -|_ ...fn(f(t,...)).location(int)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by\n                specifying a single variable and then assigning it a\n                list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...fn(f(t,...))\n            .assign(variable_name = value)`: to assign a single value to a variable\n        - |_ `...fn(f(t,...))\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...fn(f(t,...))\n            .args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...fn(f(t,...)).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...fn(f(t,...)).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...fn(f(t,...)).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...fn(f(t,...)).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...fn(f(t,...)).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...fn(f(t,...)).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...fn(f(t,...)).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...fn(f(t,...)).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...fn(f(t,...)).detuning`:\n            to target the Detuning field\n        - |_ `...fn(f(t,...)).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn Fn(fn, duration, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.linear","title":"linear","text":"<pre><code>linear(start, stop, duration)\n</code></pre> <p>Append or assign a linear waveform to the current location(s).</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# apply a linear waveform that goes from 0 to 1 radians/us in 0.5 us\n&gt;&gt;&gt; prog.linear(start=0,stop=1,duration=0.5)\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...linear(start, stop, duration).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...linear(start, stop, duration).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...linear(start, stop, duration)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...linear(start, stop, duration)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...linear(start, stop, duration).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...linear(start, stop, duration).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...linear(start, stop, duration).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...linear(start, stop, duration).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...linear(start, stop, duration).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li>|_ <code>...linear(start, stop, duration).uniform</code>:     To address all atoms in the field</li> <li>|_ <code>...linear(start, stop, duration).location(int)</code>:     To address an atom at a specific location via index</li> <li>|_ <code>...linear(start, stop, duration).var(str)</code><ul> <li>|_ To address an atom at a specific location via variable</li> <li>|_ To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...linear(start, stop, duration).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...linear(start, stop, duration)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...linear(start, stop, duration).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...linear(start, stop, duration).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...linear(start, stop, duration).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...linear(start, stop, duration).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...linear(start, stop, duration).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...linear(start, stop, duration).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...linear(start, stop, duration).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...linear(start, stop, duration).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...linear(start, stop, duration).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...linear(start, stop, duration).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...linear(start, stop, duration).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef linear(\nself, start: ScalarType, stop: ScalarType, duration: ScalarType\n) -&gt; \"Linear\":\n\"\"\"\n    Append or assign a linear waveform to the current location(s).\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # apply a linear waveform that goes from 0 to 1 radians/us in 0.5 us\n    &gt;&gt;&gt; prog.linear(start=0,stop=1,duration=0.5)\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...linear(start, stop, duration).linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...linear(start, stop, duration).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...linear(start, stop, duration)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...linear(start, stop, duration)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...linear(start, stop, duration).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...linear(start, stop, duration).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - |_ `...linear(start, stop, duration).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...linear(start, stop, duration).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...linear(start, stop, duration).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - |_ `...linear(start, stop, duration).uniform`:\n            To address all atoms in the field\n        - |_ `...linear(start, stop, duration).location(int)`:\n            To address an atom at a specific location via index\n        - |_ `...linear(start, stop, duration).var(str)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...linear(start, stop, duration).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...linear(start, stop, duration)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...linear(start, stop, duration).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...linear(start, stop, duration).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...linear(start, stop, duration).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...linear(start, stop, duration).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...linear(start, stop, duration).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...linear(start, stop, duration).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...linear(start, stop, duration).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...linear(start, stop, duration).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...linear(start, stop, duration).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...linear(start, stop, duration).detuning`:\n            to target the Detuning field\n        - |_ `...linear(start, stop, duration).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn Linear(start, stop, duration, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.piecewise_constant","title":"piecewise_constant","text":"<pre><code>piecewise_constant(durations, values)\n</code></pre> <p>Append or assign a piecewise constant waveform to current location(s).</p> <p>The <code>durations</code> argument should have number of elements = len(values). <code>durations</code> should be the duration PER section of the waveform, NON-CUMULATIVE.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.phase.uniform\n# create a staircase, we hold 0.0 rad/us for 1.0 us, then\n# to 1.0 rad/us for 0.5 us before stopping at 0.8 rad/us for 0.9 us.\n&gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3], values=[1.0, 0.5, 0.9])\n</code></pre></p> <ul> <li>Your next steps including:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...piecewise_constant([durations], [values])     .linear(start, stop, duration)</code>: to append another linear waveform</li> <li>|_ <code>...piecewise_constant([durations], [values])     .constant(value, duration)</code>: to append a constant waveform</li> <li>|_ <code>...piecewise_constant([durations], [values])     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...piecewise_constant([durations], [values])     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...piecewise_constant([durations], [values])     .poly([coefficients], duration)</code>: to append a polynomial waveform</li> <li>|_ <code>...piecewise_constant([durations], [values])     .apply(waveform)</code>: to append a pre-defined waveform</li> <li>|_ <code>...piecewise_constant([durations], [values]).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...piecewise_constant([durations], [values])     .slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...piecewise_constant([durations], [values])     .record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):     -|_ <code>...piecewise_constant([durations], [values]).uniform</code>:         To address all atoms in the field     -|_ <code>...piecewise_constant([durations], [values]).location(int)</code>:         To address an atom at a specific location via index     -|_ <code>...piecewise_constant([durations], [values]).var(str)</code>         - |_ To address an atom at a specific location via variable         - |_ To address multiple atoms at specific locations by             specifying a single variable and then assigning it a             list of coordinates</li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...piecewise_constant([durations], [values])     .assign(variable_name = value)</code>: to assign a single value to a variable</li> <li>|_ <code>...piecewise_constant([durations], [values])     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...piecewise_constant([durations], [values])     .args([\"previously_defined_var\"])</code>: to defer assignment     of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...piecewise_constant([durations], [values]).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...piecewise_constant([durations], [values]).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...piecewise_constant([durations], [values]).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...piecewise_constat([durations], [values]).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...piecewise_constant([durations], [values]).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...piecewise_constant([durations], [values]).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...piecewise_constant(durations, values).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...piecewise_constant([durations], [values]).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...piecewise_constant([durations], [values]).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...piecewise_constant([durations], [values]).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef piecewise_constant(\nself, durations: List[ScalarType], values: List[ScalarType]\n) -&gt; \"PiecewiseConstant\":\n\"\"\"\n    Append or assign a piecewise constant waveform to current location(s).\n    The `durations` argument should have number of elements = len(values).\n    `durations` should be the duration PER section of the waveform,\n    NON-CUMULATIVE.\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.phase.uniform\n    # create a staircase, we hold 0.0 rad/us for 1.0 us, then\n    # to 1.0 rad/us for 0.5 us before stopping at 0.8 rad/us for 0.9 us.\n    &gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3], values=[1.0, 0.5, 0.9])\n    ```\n    - Your next steps including:\n    - Continue building your waveform via:\n        - |_ `...piecewise_constant([durations], [values])\n            .linear(start, stop, duration)`: to append another linear waveform\n        - |_ `...piecewise_constant([durations], [values])\n            .constant(value, duration)`: to append a constant waveform\n        - |_ `...piecewise_constant([durations], [values])\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...piecewise_constant([durations], [values])\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...piecewise_constant([durations], [values])\n            .poly([coefficients], duration)`: to append a polynomial waveform\n        - |_ `...piecewise_constant([durations], [values])\n            .apply(waveform)`: to append a pre-defined waveform\n        - |_ `...piecewise_constant([durations], [values]).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...piecewise_constant([durations], [values])\n            .slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...piecewise_constant([durations], [values])\n            .record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        -|_ `...piecewise_constant([durations], [values]).uniform`:\n            To address all atoms in the field\n        -|_ `...piecewise_constant([durations], [values]).location(int)`:\n            To address an atom at a specific location via index\n        -|_ `...piecewise_constant([durations], [values]).var(str)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by\n                specifying a single variable and then assigning it a\n                list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...piecewise_constant([durations], [values])\n            .assign(variable_name = value)`: to assign a single value to a variable\n        - |_ `...piecewise_constant([durations], [values])\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...piecewise_constant([durations], [values])\n            .args([\"previously_defined_var\"])`: to defer assignment\n            of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...piecewise_constant([durations], [values]).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...piecewise_constant([durations], [values]).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...piecewise_constant([durations], [values]).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...piecewise_constat([durations], [values]).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...piecewise_constant([durations], [values]).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...piecewise_constant([durations], [values]).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...piecewise_constant(durations, values).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...piecewise_constant([durations], [values]).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...piecewise_constant([durations], [values]).detuning`:\n            to target the Detuning field\n        - |_ `...piecewise_constant([durations], [values]).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn PiecewiseConstant(durations, values, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.piecewise_linear","title":"piecewise_linear","text":"<pre><code>piecewise_linear(durations, values)\n</code></pre> <p>Append or assign a piecewise linear waveform to current location(s), where the waveform is formed by connecting <code>values[i], values[i+1]</code> with linear segments.</p> <p>The <code>durations</code> argument should have # of elements = len(values) - 1. <code>durations</code> should be the duration PER section of the waveform, NON-CUMULATIVE.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# ramp our waveform up to a certain value, hold it\n# then ramp down. In this case, we ramp up to 2.0 rad/us in 0.3 us,\n# then hold it for 1.5 us before ramping down in 0.3 us back to 0.0 rad/us.\n&gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...piecewise_linear([durations], [values])     .linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...piecewise_linear([durations], [values]).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...piecewise_linear([durations], [values])     .piecewise_linear(durations, values)</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...piecewise_linear([durations], [values])     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...piecewise_linear([durations], [values])     .poly([coefficients], duration)</code>: to append a polynomial waveform</li> <li>|_ <code>...piecewise_linear([durations], [values]).apply(waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...piecewise_linear([durations], [values]).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...piecewise_linear([durations], [values])     .slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...piecewise_linear([durations], [values])     .record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):     -|_ <code>...piecewise_linear([durations], [values]).uniform</code>:         To address all atoms in the field     -|_ <code>...piecewise_linear([durations], [values]).var</code>:         To address an atom at a specific location via index     -|_ <code>...piecewise_linear([durations], [values]).location(int)</code>         - |_ To address an atom at a specific location via variable         - |_ To address multiple atoms at specific locations by             specifying a single variable and then assigning it a             list of coordinates</li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...piecewise_linear([durations], [values])     .assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...piecewise_linear([durations], [values])     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...piecewise_linear([durations], [values])     .args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...piecewise_linear([durations], [values]).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...piecewise_linear([durations], [values]).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...piecewise_linear([durations], [values]).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...piecewise_linear([durations], [values]).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...piecewise_linear([durations], [values]).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...piecewise_linear([durations], [values]).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...piecewise_linear([durations], [values]).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...piecewise_linear([durations], [values]).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...piecewise_linear([durations], [values]).detuning</code>:     to target the Detuning field</li> <li>|_ <code>....rabi</code>: to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef piecewise_linear(\nself, durations: List[ScalarType], values: List[ScalarType]\n) -&gt; \"PiecewiseLinear\":\n\"\"\"\n    Append or assign a piecewise linear waveform to current location(s),\n    where the waveform is formed by connecting `values[i], values[i+1]`\n    with linear segments.\n    The `durations` argument should have # of elements = len(values) - 1.\n    `durations` should be the duration PER section of the waveform, NON-CUMULATIVE.\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # ramp our waveform up to a certain value, hold it\n    # then ramp down. In this case, we ramp up to 2.0 rad/us in 0.3 us,\n    # then hold it for 1.5 us before ramping down in 0.3 us back to 0.0 rad/us.\n    &gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...piecewise_linear([durations], [values])\n            .linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...piecewise_linear([durations], [values]).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...piecewise_linear([durations], [values])\n            .piecewise_linear(durations, values)`:\n            to append a piecewise linear waveform\n        - |_ `...piecewise_linear([durations], [values])\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - |_ `...piecewise_linear([durations], [values])\n            .poly([coefficients], duration)`: to append a polynomial waveform\n        - |_ `...piecewise_linear([durations], [values]).apply(waveform)`:\n            to append a pre-defined waveform\n        - |_ `...piecewise_linear([durations], [values]).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...piecewise_linear([durations], [values])\n            .slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...piecewise_linear([durations], [values])\n            .record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        -|_ `...piecewise_linear([durations], [values]).uniform`:\n            To address all atoms in the field\n        -|_ `...piecewise_linear([durations], [values]).var`:\n            To address an atom at a specific location via index\n        -|_ `...piecewise_linear([durations], [values]).location(int)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by\n                specifying a single variable and then assigning it a\n                list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...piecewise_linear([durations], [values])\n            .assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...piecewise_linear([durations], [values])\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...piecewise_linear([durations], [values])\n            .args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...piecewise_linear([durations], [values]).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...piecewise_linear([durations], [values]).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...piecewise_linear([durations], [values]).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...piecewise_linear([durations], [values]).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...piecewise_linear([durations], [values]).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...piecewise_linear([durations], [values]).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...piecewise_linear([durations], [values]).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...piecewise_linear([durations], [values]).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...piecewise_linear([durations], [values]).detuning`:\n            to target the Detuning field\n        - |_ `....rabi`: to target the complex-valued Rabi field\n    \"\"\"\nreturn PiecewiseLinear(durations, values, self)\n</code></pre>"},{"location":"reference/bloqade/builder/waveform/#bloqade.builder.waveform.WaveformAttachable.poly","title":"poly","text":"<pre><code>poly(coeffs, duration)\n</code></pre> <p>Append or assign a waveform with a polynomial profile to current location(s).</p> <p>You pass in a list of coefficients and a duration to this method which obeys the following expression:</p> <p><code>wv(t) = coeffs[0] + coeffs[1]*t + coeffs[2]*t^2 + ... + coeffs[n]*t^n</code></p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>var</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n&gt;&gt;&gt; coeffs = [-1, 0.5, 1.2]\n# resulting polynomial is:\n# f(t) = -1 + 0.5*t + 1.2*t^2 with duration of\n# 0.5 us\n&gt;&gt;&gt; prog.poly(coeffs, duration=0.5)\n</code></pre></p> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li>|_ <code>...poly([coeffs], duration).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li>|_ <code>...poly([coeffs], duration).constant(value, duration)</code>:     to append a constant waveform</li> <li>|_ <code>...poly([coeffs], duration)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li>|_ <code>...poly([coeffs], duration)     .piecewise_constant([durations],[values])</code>:     to append a piecewise constant waveform</li> <li>|_ <code>...poly([coeffs], duration).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li>|_ <code>...poly([coeffs], duration).apply(waveform)</code>:     to append a pre-defined waveform</li> <li>|_ <code>...poly([coeffs], duration).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li>|_ <code>...poly([coeffs], duration).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li>|_ <code>...poly([coeffs], duration).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):     -|_ <code>...poly([coeffs], duration).uniform</code>:         To address all atoms in the field     -|_ <code>...poly([coeffs], duration).location(int)</code>:         To address an atom at a specific location via index     -|_ <code>...poly([coeffs], duration).var(str)</code>         - |_ To address an atom at a specific location via variable         - |_ To address multiple atoms at specific locations by             specifying a single variable and then assigning             it a list of coordinates</li> <li>Assign values to pre-existing variables via:<ul> <li>|_ <code>...poly([coeffs], duration).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li>|_ <code>...poly([coeffs], duration)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li>|_ <code>...poly([coeffs], duration).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li>|_ <code>...poly([coeffs], duration).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li>|_ <code>...poly([coeffs], duration).bloqade</code>:     to run on the Bloqade local emulator</li> <li>|_ <code>...poly([coeffs], duration).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li>|_ <code>...poly([coeffs], duration).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li>|_ <code>...poly([coeffs], duration).rydberg</code>:     to target the Rydberg level coupling</li> <li>|_ <code>...poly([coeffs], duration).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level   coupling (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li>|_ <code>...poly([coeffs], duration).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li>|_ <code>...poly([coeffs], duration).phase</code>:     to target the real-valued Rabi Phase field</li> <li>|_ <code>...poly([coeffs], duration).detuning</code>:     to target the Detuning field</li> <li>|_ <code>...poly([coeffs], duration).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/waveform.py</code> <pre><code>@beartype\ndef poly(self, coeffs: List[ScalarType], duration: ScalarType) -&gt; \"Poly\":\n\"\"\"\n    Append or assign a waveform with a polynomial profile to current location(s).\n    You pass in a list of coefficients and a duration to this method which obeys\n    the following expression:\n    `\n    wv(t) = coeffs[0] + coeffs[1]*t + coeffs[2]*t^2 + ... + coeffs[n]*t^n\n    `\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`var`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    &gt;&gt;&gt; coeffs = [-1, 0.5, 1.2]\n    # resulting polynomial is:\n    # f(t) = -1 + 0.5*t + 1.2*t^2 with duration of\n    # 0.5 us\n    &gt;&gt;&gt; prog.poly(coeffs, duration=0.5)\n    ```\n    - Your next steps include:\n    - Continue building your waveform via:\n        - |_ `...poly([coeffs], duration).linear(start, stop, duration)`:\n            to append another linear waveform\n        - |_ `...poly([coeffs], duration).constant(value, duration)`:\n            to append a constant waveform\n        - |_ `...poly([coeffs], duration)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - |_ `...poly([coeffs], duration)\n            .piecewise_constant([durations],[values])`:\n            to append a piecewise constant waveform\n        - |_ `...poly([coeffs], duration).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - |_ `...poly([coeffs], duration).apply(waveform)`:\n            to append a pre-defined waveform\n        - |_ `...poly([coeffs], duration).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - |_ `...poly([coeffs], duration).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - |_ `...poly([coeffs], duration).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        -|_ `...poly([coeffs], duration).uniform`:\n            To address all atoms in the field\n        -|_ `...poly([coeffs], duration).location(int)`:\n            To address an atom at a specific location via index\n        -|_ `...poly([coeffs], duration).var(str)`\n            - |_ To address an atom at a specific location via variable\n            - |_ To address multiple atoms at specific locations by\n                specifying a single variable and then assigning\n                it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - |_ `...poly([coeffs], duration).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - |_ `...poly([coeffs], duration)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - |_ `...poly([coeffs], duration).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - |_ `...poly([coeffs], duration).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - |_ `...poly([coeffs], duration).bloqade`:\n            to run on the Bloqade local emulator\n        - |_ `...poly([coeffs], duration).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - |_ `...poly([coeffs], duration).parallelize(spacing)`\n    - Start targeting another level coupling\n        - |_ `...poly([coeffs], duration).rydberg`:\n            to target the Rydberg level coupling\n        - |_ `...poly([coeffs], duration).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level\n      coupling (previously selected as `rydberg` or `hyperfine`):\n        - |_ `...poly([coeffs], duration).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - |_ `...poly([coeffs], duration).phase`:\n            to target the real-valued Rabi Phase field\n        - |_ `...poly([coeffs], duration).detuning`:\n            to target the Detuning field\n        - |_ `...poly([coeffs], duration).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\nreturn Poly(coeffs, duration, self)\n</code></pre>"},{"location":"reference/bloqade/builder/backend/","title":"Index","text":""},{"location":"reference/bloqade/builder/backend/#bloqade.builder.backend.BackendRoute","title":"BackendRoute","text":"<p>             Bases: <code>QuEraService</code>, <code>BraketService</code>, <code>BloqadeService</code></p> <ul> <li>Specify the backend to run your program on via a string   (versus more formal builder syntax)   of specifying the vendor/product first (Bloqade/Braket) and narrowing it down<ul> <li>...device(\"quera.aquila\") versus ...quera.aquila()</li> </ul> </li> <li>You can pass the following arguments:<ul> <li><code>\"braket.aquila\"</code></li> <li><code>\"braket.local_emulator\"</code></li> <li><code>\"bloqade.python\"</code></li> <li><code>\"bloqade.julia\"</code></li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/backend/bloqade/","title":"Bloqade","text":""},{"location":"reference/bloqade/builder/backend/bloqade/#bloqade.builder.backend.bloqade.BloqadeDeviceRoute","title":"BloqadeDeviceRoute","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/backend/bloqade/#bloqade.builder.backend.bloqade.BloqadeDeviceRoute.python","title":"python","text":"<pre><code>python()\n</code></pre> <p>Specify the Bloqade Python backend.</p> <ul> <li>Possible Next Steps:<ul> <li>|_ <code>...python().run(shots)</code>:     to submit to the python emulator and await results</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/backend/bloqade.py</code> <pre><code>def python(self):\n\"\"\"\n    Specify the Bloqade Python backend.\n    - Possible Next Steps:\n        - |_ `...python().run(shots)`:\n            to submit to the python emulator and await results\n    \"\"\"\nreturn self.parse().bloqade.python()\n</code></pre>"},{"location":"reference/bloqade/builder/backend/bloqade/#bloqade.builder.backend.bloqade.BloqadeService","title":"BloqadeService","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/backend/bloqade/#bloqade.builder.backend.bloqade.BloqadeService.bloqade","title":"bloqade  <code>property</code>","text":"<pre><code>bloqade\n</code></pre> <p>Specify the Bloqade backend.</p> <ul> <li>Possible Next Steps:<ul> <li>|_ <code>...bloqade.python()</code>: target submission to the Bloqade python backend</li> <li>|_ <code>...bloqade.julia()</code>: (CURRENTLY NOT IMPLEMENTED!)target     submission to the Bloqade.jl backend</li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/backend/braket/","title":"Braket","text":""},{"location":"reference/bloqade/builder/backend/braket/#bloqade.builder.backend.braket.BraketDeviceRoute","title":"BraketDeviceRoute","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/backend/braket/#bloqade.builder.backend.braket.BraketDeviceRoute.aquila","title":"aquila","text":"<pre><code>aquila()\n</code></pre> <p>Specify QuEra's Aquila QPU on Braket to submit your program to.</p> <p>The number of shots you specify in the subsequent <code>.run</code> method will either:     - dictate the number of times your program is run     - dictate the number of times per parameter your program is run if       you have a variable with batch assignments/intend to conduct       a parameter sweep</p> <ul> <li>Possible next steps are:<ul> <li>|_ <code>...aquila().run(shots)</code>: To submit to hardware and WAIT for     results (blocking)</li> <li>|_ <code>...aquila().run_async(shots)</code>: To submit to hardware and immediately     allow for other operations to occur</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/backend/braket.py</code> <pre><code>def aquila(self):\n\"\"\"\n    Specify QuEra's Aquila QPU on Braket to submit your program to.\n    The number of shots you specify in the subsequent `.run` method will either:\n        - dictate the number of times your program is run\n        - dictate the number of times per parameter your program is run if\n          you have a variable with batch assignments/intend to conduct\n          a parameter sweep\n    - Possible next steps are:\n        - |_ `...aquila().run(shots)`: To submit to hardware and WAIT for\n            results (blocking)\n        - |_ `...aquila().run_async(shots)`: To submit to hardware and immediately\n            allow for other operations to occur\n    \"\"\"\nreturn self.parse().braket.aquila()\n</code></pre>"},{"location":"reference/bloqade/builder/backend/braket/#bloqade.builder.backend.braket.BraketDeviceRoute.local_emulator","title":"local_emulator","text":"<pre><code>local_emulator()\n</code></pre> <p>Specify the Braket local emulator to submit your program to.</p> <ul> <li>The number of shots you specify in the subsequent <code>.run</code> method will either:<ul> <li>dictate the number of times your program is run</li> <li>dictate the number of times per parameter your program is run if   you have a variable with batch assignments/intend to   conduct a parameter sweep</li> </ul> </li> <li>Possible next steps are:<ul> <li>|_ <code>...local_emulator().run(shots)</code>: to submit to the emulator     and await results</li> </ul> </li> </ul> Source code in <code>src/bloqade/builder/backend/braket.py</code> <pre><code>def local_emulator(self):\n\"\"\"\n    Specify the Braket local emulator to submit your program to.\n    - The number of shots you specify in the subsequent `.run` method will either:\n        - dictate the number of times your program is run\n        - dictate the number of times per parameter your program is run if\n          you have a variable with batch assignments/intend to\n          conduct a parameter sweep\n    - Possible next steps are:\n        - |_ `...local_emulator().run(shots)`: to submit to the emulator\n            and await results\n    \"\"\"\nreturn self.parse().braket.local_emulator()\n</code></pre>"},{"location":"reference/bloqade/builder/backend/braket/#bloqade.builder.backend.braket.BraketService","title":"BraketService","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/backend/braket/#bloqade.builder.backend.braket.BraketService.braket","title":"braket  <code>property</code>","text":"<pre><code>braket\n</code></pre> <p>Specify the Braket backend. This allows you to access the AWS Braket local emulator OR go submit things to QuEra hardware on AWS Braket service.</p> <ul> <li>Possible Next Steps are:<ul> <li>|_ <code>...braket.aquila()</code>: target submission to the QuEra Aquila QPU</li> <li>|_ <code>...braket.local_emulator()</code>: target submission to the Braket local emulator</li> </ul> </li> </ul>"},{"location":"reference/bloqade/builder/backend/quera/","title":"Quera","text":""},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraDeviceRoute","title":"QuEraDeviceRoute","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraDeviceRoute.aquila","title":"aquila","text":"<pre><code>aquila()\n</code></pre> <p>Specify QuEra's Aquila QPU</p> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...aquila().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...aquila().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...aquila().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>src/bloqade/builder/backend/quera.py</code> <pre><code>def aquila(self):\n\"\"\"\n    Specify QuEra's Aquila QPU\n    Return:\n        QuEraHardwareRoutine\n    - Possible Next:\n        -&gt; `...aquila().submit`\n            :: submit aync remote job\n        -&gt; `...aquila().run`\n            :: submit job and wait until job finished\n            and results returned\n        -&gt; `...aquila().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n    \"\"\"\nreturn self.parse().quera.aquila()\n</code></pre>"},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraDeviceRoute.cloud_mock","title":"cloud_mock","text":"<pre><code>cloud_mock()\n</code></pre> <p>Specify QuEra's Remote Mock QPU</p> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...aquila().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...aquila().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...aquila().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>src/bloqade/builder/backend/quera.py</code> <pre><code>def cloud_mock(self):\n\"\"\"\n    Specify QuEra's Remote Mock QPU\n    Return:\n        QuEraHardwareRoutine\n    - Possible Next:\n        -&gt; `...aquila().submit`\n            :: submit aync remote job\n        -&gt; `...aquila().run`\n            :: submit job and wait until job finished\n            and results returned\n        -&gt; `...aquila().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n    \"\"\"\nreturn self.parse().quera.cloud_mock()\n</code></pre>"},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraDeviceRoute.device","title":"device","text":"<pre><code>device(config_file=None, **api_config)\n</code></pre> <p>Specify QuEra's QPU device,</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>file that speficy the target hardware</p> <code>None</code> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...device().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...device().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...device().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>src/bloqade/builder/backend/quera.py</code> <pre><code>def device(self, config_file: Optional[str] = None, **api_config):\n\"\"\"\n    Specify QuEra's QPU device,\n    Args:\n        config_file (str): file that speficy the target hardware\n    Return:\n        QuEraHardwareRoutine\n    - Possible Next:\n        -&gt; `...device().submit`\n            :: submit aync remote job\n        -&gt; `...device().run`\n            :: submit job and wait until job finished\n            and results returned\n        -&gt; `...device().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n    \"\"\"\nreturn self.parse().quera.device(config_file, **api_config)\n</code></pre>"},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraDeviceRoute.mock","title":"mock","text":"<pre><code>mock(state_file='.mock_state.txt', submission_error=False)\n</code></pre> <p>Specify mock, testing locally.</p> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...aquila().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...aquila().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...aquila().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>src/bloqade/builder/backend/quera.py</code> <pre><code>def mock(self, state_file: str = \".mock_state.txt\", submission_error: bool = False):\n\"\"\"\n    Specify mock, testing locally.\n    Return:\n        QuEraHardwareRoutine\n    - Possible Next:\n        -&gt; `...aquila().submit`\n            :: submit aync remote job\n        -&gt; `...aquila().run`\n            :: submit job and wait until job finished\n            and results returned\n        -&gt; `...aquila().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n    \"\"\"\nreturn self.parse().quera.mock(\nstate_file=state_file, submission_error=submission_error\n)\n</code></pre>"},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraService","title":"QuEraService","text":"<p>             Bases: <code>Builder</code></p>"},{"location":"reference/bloqade/builder/backend/quera/#bloqade.builder.backend.quera.QuEraService.quera","title":"quera  <code>property</code>","text":"<pre><code>quera\n</code></pre> <ul> <li>Specify Quera backend</li> <li> <p>Possible Next:</p> <p>-&gt; <code>...quera.aquila</code>     :: Aquila QPU</p> <p>-&gt; <code>...quera.mock</code>     :: mock backend, meant for testings</p> <p>-&gt; <code>...quera.device</code>     :: QuEra QPU, specifiy by config_file</p> </li> </ul>"},{"location":"reference/bloqade/builder/parse/","title":"Index","text":""},{"location":"reference/bloqade/builder/parse/builder/","title":"Builder","text":""},{"location":"reference/bloqade/builder/parse/json/","title":"Json","text":""},{"location":"reference/bloqade/builder/parse/stream/","title":"Stream","text":""},{"location":"reference/bloqade/builder/parse/stream/#bloqade.builder.parse.stream.BuilderStream","title":"BuilderStream  <code>dataclass</code>","text":"<p>Represents a stream of builder nodes.</p>"},{"location":"reference/bloqade/builder/parse/stream/#bloqade.builder.parse.stream.BuilderStream.eat","title":"eat","text":"<pre><code>eat(types, skips=None)\n</code></pre> <p>Scan the stream until a node of type in <code>types</code> or <code>skips</code> is found.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>List[Type[Builder]]</code> <p>List of types to move the stream pointer to</p> required <code>skips</code> <code>List[Type[Builder]] | None</code> <p>List of types to end the</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BuilderNode</code> <code>BuilderNode</code> <p>The beginning of the stream which matches a type in <code>types</code>.</p> Source code in <code>src/bloqade/builder/parse/stream.py</code> <pre><code>def eat(\nself, types: List[Type[Builder]], skips: Optional[List[Type[Builder]]] = None\n) -&gt; BuilderNode:\n\"\"\"Scan the stream until a node of type in `types` or `skips` is found.\n    Args:\n        types (List[Type[Builder]]): List of types to move the stream pointer to\n        skips (List[Type[Builder]] | None, optional): List of types to end the\n        stream scan\n    Returns:\n        BuilderNode: The beginning of the stream which matches a type in `types`.\n    \"\"\"\nhead = self.read_next(types)\ncurr = head\nwhile curr is not None:\nif type(curr.node) not in types:\nif skips and type(curr.node) not in skips:\nbreak\ncurr = curr.next\nself.curr = curr\nreturn head\n</code></pre>"},{"location":"reference/bloqade/builder/parse/trait/","title":"Trait","text":""},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.CompileJSON","title":"CompileJSON","text":""},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.CompileJSON.json","title":"json","text":"<pre><code>json(**json_options)\n</code></pre> <p>transform the program to a JSON string.</p> Source code in <code>src/bloqade/builder/parse/trait.py</code> <pre><code>def json(self: \"Builder\", **json_options) -&gt; str:\n\"\"\"transform the program to a JSON string.\"\"\"\nfrom bloqade.builder.parse.json import BuilderSerializer\nreturn json.dumps(self, cls=BuilderSerializer, **json_options)\n</code></pre>"},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.Parse","title":"Parse","text":"<p>             Bases: <code>ParseRegister</code>, <code>ParseSequence</code>, <code>ParseCircuit</code>, <code>ParseRoutine</code></p>"},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.Parse.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>Return the number of atoms in the program.</p>"},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseCircuit","title":"ParseCircuit","text":""},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseCircuit.parse_circuit","title":"parse_circuit","text":"<pre><code>parse_circuit()\n</code></pre> <p>Parse the analog circuit from the program.</p> Source code in <code>src/bloqade/builder/parse/trait.py</code> <pre><code>def parse_circuit(self: \"Builder\") -&gt; \"AnalogCircuit\":\n\"\"\"Parse the analog circuit from the program.\"\"\"\nfrom bloqade.builder.parse.builder import Parser\nreturn Parser().parse_circuit(self)\n</code></pre>"},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseRegister","title":"ParseRegister","text":""},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseRegister.parse_register","title":"parse_register","text":"<pre><code>parse_register()\n</code></pre> <p>Parse the arrangement of atoms of the program.</p> Source code in <code>src/bloqade/builder/parse/trait.py</code> <pre><code>def parse_register(self: \"Builder\") -&gt; Union[\"AtomArrangement\", \"ParallelRegister\"]:\n\"\"\"Parse the arrangement of atoms of the program.\"\"\"\nfrom bloqade.builder.parse.builder import Parser\nreturn Parser().parse_register(self)\n</code></pre>"},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseRoutine","title":"ParseRoutine","text":""},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseRoutine.parse","title":"parse","text":"<pre><code>parse()\n</code></pre> <p>Parse the program to return a Routine object.</p> Source code in <code>src/bloqade/builder/parse/trait.py</code> <pre><code>def parse(self: \"Builder\") -&gt; \"Routine\":\n\"\"\"Parse the program to return a Routine object.\"\"\"\nfrom bloqade.builder.parse.builder import Parser\nreturn Parser().parse(self)\n</code></pre>"},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseSequence","title":"ParseSequence","text":""},{"location":"reference/bloqade/builder/parse/trait/#bloqade.builder.parse.trait.ParseSequence.parse_sequence","title":"parse_sequence","text":"<pre><code>parse_sequence()\n</code></pre> <p>Parse the pulse sequence part of the program.</p> Source code in <code>src/bloqade/builder/parse/trait.py</code> <pre><code>def parse_sequence(self: \"Builder\") -&gt; \"Sequence\":\n\"\"\"Parse the pulse sequence part of the program.\"\"\"\nfrom bloqade.builder.parse.builder import Parser\nreturn Parser().parse_sequence(self)\n</code></pre>"},{"location":"reference/bloqade/emulate/","title":"Index","text":""},{"location":"reference/bloqade/emulate/sparse_operator/","title":"Sparse operator","text":""},{"location":"reference/bloqade/emulate/ir/","title":"Index","text":""},{"location":"reference/bloqade/emulate/ir/atom_type/","title":"Atom type","text":""},{"location":"reference/bloqade/emulate/ir/emulator/","title":"Emulator","text":""},{"location":"reference/bloqade/emulate/ir/emulator/#bloqade.emulate.ir.emulator.Register","title":"Register  <code>dataclass</code>","text":"<p>This class represents the of the atoms in the system.</p>"},{"location":"reference/bloqade/emulate/ir/space/","title":"Space","text":""},{"location":"reference/bloqade/emulate/ir/state_vector/","title":"State vector","text":""},{"location":"reference/bloqade/emulate/ir/state_vector/#bloqade.emulate.ir.state_vector.AnalogGate","title":"AnalogGate  <code>dataclass</code>","text":""},{"location":"reference/bloqade/emulate/ir/state_vector/#bloqade.emulate.ir.state_vector.AnalogGate.run","title":"run","text":"<pre><code>run(\nshots=1,\nsolver_name=\"dop853\",\natol=1e-14,\nrtol=1e-07,\nnsteps=2147483647,\ninteraction_picture=False,\nproject_hyperfine=True,\n)\n</code></pre> <p>Run the emulation with all atoms in the ground state, sampling the final state vector.</p> Source code in <code>src/bloqade/emulate/ir/state_vector.py</code> <pre><code>@beartype\ndef run(\nself,\nshots: int = 1,\nsolver_name: str = \"dop853\",\natol: float = 1e-14,\nrtol: float = 1e-7,\nnsteps: int = 2_147_483_647,\ninteraction_picture: bool = False,\nproject_hyperfine: bool = True,\n):\n\"\"\"Run the emulation with all atoms in the ground state,\n    sampling the final state vector.\"\"\"\noptions = dict(\nsolver_name=solver_name,\natol=atol,\nrtol=rtol,\nnsteps=nsteps,\ninteraction_picture=interaction_picture,\n)\nstate = self.hamiltonian.space.zero_state()\n(result,) = self.apply(state, **options)\nresult /= np.linalg.norm(result)\nreturn self.hamiltonian.space.sample_state_vector(\nresult, shots, project_hyperfine=project_hyperfine\n)\n</code></pre>"},{"location":"reference/bloqade/ir/","title":"Index","text":""},{"location":"reference/bloqade/ir/#bloqade.ir.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty <code>ListOfLocations</code>.</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li>|_ <code>start.rydberg</code>: for <code>Rydberg</code>     Level coupling</li> <li>|_ <code>start.hyperfine</code>: for <code>Hyperfine</code>     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li>|_ <code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li><code>Scalar</code> objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bloqade/ir/#bloqade.ir.AlignedWaveform","title":"AlignedWaveform","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;padded waveform&gt; ::= &lt;waveform&gt; | &lt;waveform&gt; &lt;alignment&gt; &lt;value&gt;\n&lt;alignment&gt; ::= 'left aligned' | 'right aligned'\n&lt;value&gt; ::= 'left value' | 'right value' | &lt;scalar expr&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.AnalogCircuit","title":"AnalogCircuit","text":"<p>AnalogCircuit is a dummy type that bundle register and sequence together.</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AnalogCircuit.register","title":"register  <code>property</code>","text":"<pre><code>register\n</code></pre> <p>Get the register of the program.</p> <p>Returns:</p> Type Description <p>register (Union[\"AtomArrangement\", \"ParallelRegister\"])</p> Note <p>If the program is built with <code>parallelize()</code>, The the register will be a <code>ParallelRegister</code>. Otherwise it will be a <code>AtomArrangement</code>.</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AnalogCircuit.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the program</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the program</p> <code>{}</code> Source code in <code>src/bloqade/ir/analog_circuit.py</code> <pre><code>def show(self, **assignments):\n\"\"\"Interactive visualization of the program\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the program\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement","title":"AtomArrangement","text":"<p>             Bases: <code>ProgramStart</code>, <code>TransformTrait</code></p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n\"\"\"enumerate all locations in the register.\"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n\"\"\"obtain a figure object from the atom arrangement.\"\"\"\nreturn get_atom_arrangement_figure(self, fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.BoundedBravais","title":"BoundedBravais","text":"<pre><code>BoundedBravais(*shape, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>AtomArrangement</code></p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, *shape: int, lattice_spacing: ScalarType = 1.0):\nself.shape = shape\nself.lattice_spacing = cast(lattice_spacing)\nself.__n_atoms = None\nself.__n_dims = None\nsuper().__init__()\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.BoundedBravais.__match_args__","title":"__match_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__match_args__ = ('shape', 'lattice_spacing')\n</code></pre> <p>Base classe for Bravais lattices <code>AtomArrangement</code>.</p> <ul> <li><code>Square</code></li> <li><code>Chain</code></li> <li><code>Honeycomb</code></li> <li><code>Triangular</code></li> <li><code>Lieb</code></li> <li><code>Kagome</code></li> <li><code>Rectangular</code></li> </ul>"},{"location":"reference/bloqade/ir/#bloqade.ir.BoundedBravais.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>dimension of the lattice</p> <p>Returns:</p> Name Type Description <code>int</code> <p>dimension of the lattice</p>"},{"location":"reference/bloqade/ir/#bloqade.ir.BoundedBravais.coordinates","title":"coordinates","text":"<pre><code>coordinates(index)\n</code></pre> <p>calculate the coordinates of a cell in the lattice given the cell index.</p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef coordinates(self, index: List[int]) -&gt; NDArray:\n\"\"\"calculate the coordinates of a cell in the lattice\n    given the cell index.\n    \"\"\"\n# damn! this is like stone age broadcasting\nvectors = np.array(self.cell_vectors())\nindex = np.array(index)\npos = np.sum(vectors.T * index, axis=1)\nreturn pos + np.array(self.cell_atoms())\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.BoundedBravais.scale","title":"scale","text":"<pre><code>scale(factor)\n</code></pre> <p>Scale the current location with a factor.</p> <p>(x,y) -&gt; factor*(x,y)</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>str | Real | Decimal | Scalar</code> <p>scale factor</p> required <p>Returns:</p> Name Type Description <code>BoundedBravais</code> <code>BoundedBravais</code> <p>The lattice with the scaled locations</p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef scale(self, factor: ScalarType) -&gt; \"BoundedBravais\":\n\"\"\"Scale the current location with a factor.\n    (x,y) -&gt; factor*(x,y)\n    Args:\n        factor (str | Real | Decimal | Scalar): scale factor\n    Returns:\n        BoundedBravais: The lattice with the scaled locations\n    \"\"\"\nfactor = cast(factor)\nobj = self.__new__(type(self))\nfor f in fields(self):\nif f.name == \"lattice_spacing\":\nobj.lattice_spacing = factor * self.lattice_spacing\nelse:\nsetattr(obj, f.name, getattr(self, f.name))\nreturn obj\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Chain","title":"Chain","text":"<pre><code>Chain(L, lattice_spacing=1.0, vertical_chain=False)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself, L: int, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\nself.vertical = vertical_chain\nsuper().__init__(L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Constant","title":"Constant","text":"<pre><code>Constant(value, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;constant&gt; ::= 'constant' &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = value</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>the constant value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the constant waveform.</p> required Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, value, duration):\nself.value = cast(value)\nself._duration = cast(duration)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Field","title":"Field","text":"<p>             Bases: <code>FieldExpr</code></p> <p>Field node in the IR. Which contains collection(s) of <code>Waveform</code></p> <pre><code>&lt;field&gt; ::= ('field' &lt;spatial modulation&gt;  &lt;padded waveform&gt;)*\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Field.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Field</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Field</p> <code>{}</code> Source code in <code>src/bloqade/ir/control/field.py</code> <pre><code>def show(self, **assignments):\n\"\"\"\n    Interactive visualization of the Field\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Field\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (\u00bd, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L * 2.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Kagome","title":"Kagome","text":"<pre><code>Kagome(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Lieb","title":"Lieb","text":"<pre><code>Lieb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Linear","title":"Linear","text":"<pre><code>Linear(start, stop, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;linear&gt; ::= 'linear' &lt;scalar expr&gt; &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = start + (stop-start)/duration * t</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Scalar</code> <p>start value</p> required <code>stop</code> <code>Scalar</code> <p>stop value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the linear waveform.</p> required Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, start, stop, duration):\nself.start = cast(start)\nself.stop = cast(stop)\nself._duration = cast(duration)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Literal","title":"Literal","text":"<p>             Bases: <code>Real</code></p>"},{"location":"reference/bloqade/ir/#bloqade.ir.Literal.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre> <p>Scalar Literal, which stores a decimaal value instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal</code> <p>decimal value instance</p> required"},{"location":"reference/bloqade/ir/#bloqade.ir.ParallelRegister","title":"ParallelRegister","text":"<pre><code>ParallelRegister(register, cluster_spacing)\n</code></pre> <p>             Bases: <code>ProgramStart</code></p> <p>Parallel Register</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>@beartype\ndef __init__(self, register: AtomArrangement, cluster_spacing: ScalarType):\nself._register = register\nself._cluster_spacing = cast(cluster_spacing)\nif register.n_atoms &gt; 0:\n# calculate bounding box\n# of this register\nlocation_iter = register.enumerate()\n(x, y) = next(location_iter).position\nx_min = x\nx_max = x\ny_min = y\ny_max = y\nfor location_info in location_iter:\n(x, y) = location_info.position\nx_min = x.min(x_min)\nx_max = x.max(x_max)\ny_min = y.min(y_min)\ny_max = y.max(y_max)\nshift_x = (x_max - x_min) + cluster_spacing\nshift_y = (y_max - y_min) + cluster_spacing\nregister_locations = [\nlist(location_info.position) for location_info in register.enumerate()\n]\nregister_filling = [\nlocation_info.filling.value for location_info in register.enumerate()\n]\nshift_vectors = [[shift_x, cast(0)], [cast(0), shift_y]]\nelse:\nraise ValueError(\"No locations to parallelize.\")\nself.register_locations = register_locations\nself.register_filling = register_filling\nself.shift_vectors = shift_vectors\nsuper().__init__(self)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Poly","title":"Poly","text":"<pre><code>Poly(coeffs, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;poly&gt; ::= &lt;scalar&gt;+\n</code></pre> <p>f(t=0:duration) = c[0] + c[1]t + c[2]t^2 + ... + c[n-1]t^n-1 + c[n]t^n</p> <p>Parameters:</p> Name Type Description Default <code>coeffs</code> <code>List[Scalar]</code> <p>the coefficients c[] of the polynomial.</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the waveform.</p> required Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, coeffs, duration):\nself.coeffs = cast(coeffs)\nself._duration = cast(duration)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Pulse","title":"Pulse","text":"<pre><code>Pulse(field_pairs)\n</code></pre> <p>             Bases: <code>PulseExpr</code></p> <pre><code>&lt;pulse&gt; ::= (&lt;field name&gt; &lt;field&gt;)+\n</code></pre> Source code in <code>src/bloqade/ir/control/pulse.py</code> <pre><code>def __init__(self, field_pairs):\nfields = dict()\nfor k, v in field_pairs.items():\nif isinstance(v, Field):\nfields[k] = v\nelif isinstance(v, dict):\nfields[k] = Field(v)\nelse:\nraise TypeError(f\"Expected Field or dict, got {type(v)}\")\nself.fields = fields\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Pulse.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Pulse</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Pulse</p> <code>{}</code> Source code in <code>src/bloqade/ir/control/pulse.py</code> <pre><code>def show(self, **assignments):\n\"\"\"\n    Interactive visualization of the Pulse\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Pulse\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.PythonFn","title":"PythonFn","text":"<pre><code>PythonFn(fn, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;python-fn&gt; ::= 'python-fn' &lt;python function def&gt; &lt;scalar expr&gt;\n</code></pre> Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, fn: Callable, duration: Any):\nself.fn = fn\nself._duration = cast(duration)\nsignature = inspect.getfullargspec(fn)\nif signature.varargs is not None:\nraise ValueError(\"Cannot have `*args` in function definition\")\nif signature.varkw is not None:\nraise ValueError(\"Cannot have `**kwargs` in function definition\")\n# get default kwonly first:\nvariables = []\nself.default_param_values = {}\nself.default_arguements = {}\nif signature.kwonlydefaults is not None:\nfor name, value in signature.kwonlydefaults.items():\nif isinstance(value, (Real, Decimal)):\nvariables.append(name)\nself.default_param_values[name] = Decimal(str(value))\nelse:\n# self.default_arguements[name] = value\nraise ValueError(\nf\"Default value for parameter {name} is not Real or Decimal, \"\n\"cannot convert to Variable.\"\n)\nvariables += signature.args[1:]\nvariables += signature.kwonlyargs\nself.parameters = list(map(var, variables))\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Record","title":"Record","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;record&gt; ::= 'record' &lt;waveform&gt; &lt;var&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\nwidth,\nheight,\nlattice_spacing_x=1.0,\nlattice_spacing_y=None,\n)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>None</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself,\nwidth: int,\nheight: int,\nlattice_spacing_x: ScalarType = 1.0,\nlattice_spacing_y: Optional[ScalarType] = None,\n):\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\nif lattice_spacing_y is None:\nself.ratio = cast(1.0) / cast(lattice_spacing_x)\nelse:\nself.ratio = cast(lattice_spacing_y) / cast(lattice_spacing_x)\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Sample","title":"Sample","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;sample&gt; ::= 'sample' &lt;waveform&gt; &lt;interpolation&gt; &lt;scalar&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Scalar","title":"Scalar","text":"<p>Base class for all scalar expressions.</p> <pre><code>&lt;scalar&gt; ::= &lt;literal&gt;\n| &lt;variable&gt;\n| &lt;default&gt;\n| &lt;negative&gt;\n| &lt;add&gt;\n| &lt;mul&gt;\n| &lt;min&gt;\n| &lt;max&gt;\n| &lt;slice&gt;\n| &lt;inverval&gt;\n&lt;mul&gt; ::= &lt;scalar&gt; '*' &lt;scalar&gt;\n&lt;add&gt; ::= &lt;scalar&gt; '+' &lt;scalar&gt;\n&lt;min&gt; ::= 'min' &lt;scalar&gt;+\n&lt;max&gt; ::= 'max' &lt;scalar&gt;+\n&lt;slice&gt; ::= &lt;scalar expr&gt; '[' &lt;interval&gt; ']'\n&lt;interval&gt; ::= &lt;scalar expr&gt; '..' &lt;scalar expr&gt;\n&lt;real&gt; ::= &lt;literal&gt; | &lt;var&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Sequence","title":"Sequence","text":"<pre><code>Sequence(seq_pairs=None)\n</code></pre> <p>             Bases: <code>SequenceExpr</code></p> <p>Sequence of a program, which includes pulses informations.</p> Source code in <code>src/bloqade/ir/control/sequence.py</code> <pre><code>def __init__(self, seq_pairs: Optional[Dict] = None):\nif seq_pairs is None:\nself.pulses = {}\nreturn\npulses = {}\nfor level_coupling, pulse in seq_pairs.items():\nif not isinstance(level_coupling, LevelCoupling):\nraise TypeError(f\"Unexpected type {type(level_coupling)}\")\nif isinstance(pulse, PulseExpr):\npulses[level_coupling] = pulse\nelif isinstance(pulse, dict):\npulses[level_coupling] = Pulse(pulse)\nelse:\nraise TypeError(f\"Unexpected type {type(pulse)}\")\nself.pulses = pulses\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Sequence.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Sequence</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Sequence</p> <code>{}</code> Source code in <code>src/bloqade/ir/control/sequence.py</code> <pre><code>def show(self, **assignments):\n\"\"\"\n    Interactive visualization of the Sequence\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Sequence\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Square","title":"Square","text":"<pre><code>Square(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Triangular","title":"Triangular","text":"<pre><code>Triangular(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Variable","title":"Variable","text":"<p>             Bases: <code>Real</code></p> <p>Variable, which stores a variable name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable instance.</p> required"},{"location":"reference/bloqade/ir/#bloqade.ir.Waveform","title":"Waveform","text":"<p>Waveform node in the IR.</p> <ul> <li><code>&lt;instruction&gt;</code></li> <li><code>&lt;smooth&gt;</code></li> <li><code>&lt;slice&gt;</code></li> <li><code>&lt;apppend&gt;</code></li> <li><code>&lt;negative&gt;</code></li> <li><code>&lt;scale&gt;</code></li> <li><code>&lt;add&gt;</code></li> <li><code>&lt;record&gt;</code></li> <li><code>&lt;sample&gt;</code></li> </ul> <pre><code>&lt;waveform&gt; ::= &lt;instruction&gt;\n    | &lt;smooth&gt;\n    | &lt;slice&gt;\n    | &lt;append&gt;\n    | &lt;negative&gt;\n    | &lt;scale&gt;\n    | &lt;add&gt;\n    | &lt;record&gt;\n    | &lt;sample&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.Waveform.figure","title":"figure","text":"<pre><code>figure(**assignments)\n</code></pre> <p>get figure of the plotting the waveform.</p> <p>Returns:</p> Name Type Description <code>figure</code> <p>a bokeh figure</p> Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def figure(self, **assignments):\n\"\"\"get figure of the plotting the waveform.\n    Returns:\n        figure: a bokeh figure\n    \"\"\"\nreturn get_ir_figure(self, **assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.cast","title":"cast","text":"<pre><code>cast(py)\n</code></pre> <ol> <li> <p>cast Real number (or list/tuple of Real numbers) to <code>Scalar Literal</code>.</p> </li> <li> <p>cast str (or list/tuple of Real numbers) to <code>Scalar Variable</code>.</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, Real, Tuple[Real], List[Real]]</code> <p>python object to cast</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>Scalar</p> Source code in <code>src/bloqade/ir/scalar.py</code> <pre><code>def cast(py) -&gt; \"Scalar\":\n\"\"\"\n    1. cast Real number (or list/tuple of Real numbers)\n    to [`Scalar Literal`][bloqade.ir.scalar.Literal].\n    2. cast str (or list/tuple of Real numbers)\n    to [`Scalar Variable`][bloqade.ir.scalar.Variable].\n    Args:\n        py (Union[str,Real,Tuple[Real],List[Real]]): python object to cast\n    Returns:\n        Scalar\n    \"\"\"\nret = trycast(py)\nif ret is None:\nraise TypeError(f\"Cannot cast {type(py)} to Scalar Literal\")\nreturn ret\n</code></pre>"},{"location":"reference/bloqade/ir/#bloqade.ir.var","title":"var","text":"<pre><code>var(py)\n</code></pre> <p>cast string (or list/tuple of strings) to <code>Variable</code>.</p> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, List[str]]</code> <p>a string or list/tuple of strings</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>Union[Variable]</p> Source code in <code>src/bloqade/ir/scalar.py</code> <pre><code>def var(py: str) -&gt; \"Variable\":\n\"\"\"cast string (or list/tuple of strings)\n    to [`Variable`][bloqade.ir.scalar.Variable].\n    Args:\n        py (Union[str, List[str]]): a string or list/tuple of strings\n    Returns:\n       Union[Variable]\n    \"\"\"\nret = tryvar(py)\nif ret is None:\nraise TypeError(f\"Cannot cast {type(py)} to Variable\")\nreturn ret\n</code></pre>"},{"location":"reference/bloqade/ir/analog_circuit/","title":"Analog circuit","text":""},{"location":"reference/bloqade/ir/analog_circuit/#bloqade.ir.analog_circuit.AnalogCircuit","title":"AnalogCircuit","text":"<p>AnalogCircuit is a dummy type that bundle register and sequence together.</p>"},{"location":"reference/bloqade/ir/analog_circuit/#bloqade.ir.analog_circuit.AnalogCircuit.register","title":"register  <code>property</code>","text":"<pre><code>register\n</code></pre> <p>Get the register of the program.</p> <p>Returns:</p> Type Description <p>register (Union[\"AtomArrangement\", \"ParallelRegister\"])</p> Note <p>If the program is built with <code>parallelize()</code>, The the register will be a <code>ParallelRegister</code>. Otherwise it will be a <code>AtomArrangement</code>.</p>"},{"location":"reference/bloqade/ir/analog_circuit/#bloqade.ir.analog_circuit.AnalogCircuit.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the program</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the program</p> <code>{}</code> Source code in <code>src/bloqade/ir/analog_circuit.py</code> <pre><code>def show(self, **assignments):\n\"\"\"Interactive visualization of the program\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the program\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/scalar/","title":"Scalar","text":""},{"location":"reference/bloqade/ir/scalar/#bloqade.ir.scalar.Literal","title":"Literal","text":"<p>             Bases: <code>Real</code></p>"},{"location":"reference/bloqade/ir/scalar/#bloqade.ir.scalar.Literal.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre> <p>Scalar Literal, which stores a decimaal value instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal</code> <p>decimal value instance</p> required"},{"location":"reference/bloqade/ir/scalar/#bloqade.ir.scalar.Scalar","title":"Scalar","text":"<p>Base class for all scalar expressions.</p> <pre><code>&lt;scalar&gt; ::= &lt;literal&gt;\n| &lt;variable&gt;\n| &lt;default&gt;\n| &lt;negative&gt;\n| &lt;add&gt;\n| &lt;mul&gt;\n| &lt;min&gt;\n| &lt;max&gt;\n| &lt;slice&gt;\n| &lt;inverval&gt;\n&lt;mul&gt; ::= &lt;scalar&gt; '*' &lt;scalar&gt;\n&lt;add&gt; ::= &lt;scalar&gt; '+' &lt;scalar&gt;\n&lt;min&gt; ::= 'min' &lt;scalar&gt;+\n&lt;max&gt; ::= 'max' &lt;scalar&gt;+\n&lt;slice&gt; ::= &lt;scalar expr&gt; '[' &lt;interval&gt; ']'\n&lt;interval&gt; ::= &lt;scalar expr&gt; '..' &lt;scalar expr&gt;\n&lt;real&gt; ::= &lt;literal&gt; | &lt;var&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/scalar/#bloqade.ir.scalar.Variable","title":"Variable","text":"<p>             Bases: <code>Real</code></p> <p>Variable, which stores a variable name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable instance.</p> required"},{"location":"reference/bloqade/ir/scalar/#bloqade.ir.scalar.cast","title":"cast","text":"<pre><code>cast(py)\n</code></pre> <ol> <li> <p>cast Real number (or list/tuple of Real numbers) to <code>Scalar Literal</code>.</p> </li> <li> <p>cast str (or list/tuple of Real numbers) to <code>Scalar Variable</code>.</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, Real, Tuple[Real], List[Real]]</code> <p>python object to cast</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>Scalar</p> Source code in <code>src/bloqade/ir/scalar.py</code> <pre><code>def cast(py) -&gt; \"Scalar\":\n\"\"\"\n    1. cast Real number (or list/tuple of Real numbers)\n    to [`Scalar Literal`][bloqade.ir.scalar.Literal].\n    2. cast str (or list/tuple of Real numbers)\n    to [`Scalar Variable`][bloqade.ir.scalar.Variable].\n    Args:\n        py (Union[str,Real,Tuple[Real],List[Real]]): python object to cast\n    Returns:\n        Scalar\n    \"\"\"\nret = trycast(py)\nif ret is None:\nraise TypeError(f\"Cannot cast {type(py)} to Scalar Literal\")\nreturn ret\n</code></pre>"},{"location":"reference/bloqade/ir/scalar/#bloqade.ir.scalar.var","title":"var","text":"<pre><code>var(py)\n</code></pre> <p>cast string (or list/tuple of strings) to <code>Variable</code>.</p> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, List[str]]</code> <p>a string or list/tuple of strings</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>Union[Variable]</p> Source code in <code>src/bloqade/ir/scalar.py</code> <pre><code>def var(py: str) -&gt; \"Variable\":\n\"\"\"cast string (or list/tuple of strings)\n    to [`Variable`][bloqade.ir.scalar.Variable].\n    Args:\n        py (Union[str, List[str]]): a string or list/tuple of strings\n    Returns:\n       Union[Variable]\n    \"\"\"\nret = tryvar(py)\nif ret is None:\nraise TypeError(f\"Cannot cast {type(py)} to Variable\")\nreturn ret\n</code></pre>"},{"location":"reference/bloqade/ir/analysis/","title":"Index","text":""},{"location":"reference/bloqade/ir/analysis/assignment_scan/","title":"Assignment scan","text":""},{"location":"reference/bloqade/ir/analysis/scan_variables/","title":"Scan variables","text":""},{"location":"reference/bloqade/ir/control/","title":"Index","text":""},{"location":"reference/bloqade/ir/control/field/","title":"Field","text":""},{"location":"reference/bloqade/ir/control/field/#bloqade.ir.control.field.Field","title":"Field","text":"<p>             Bases: <code>FieldExpr</code></p> <p>Field node in the IR. Which contains collection(s) of <code>Waveform</code></p> <pre><code>&lt;field&gt; ::= ('field' &lt;spatial modulation&gt;  &lt;padded waveform&gt;)*\n</code></pre>"},{"location":"reference/bloqade/ir/control/field/#bloqade.ir.control.field.Field.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Field</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Field</p> <code>{}</code> Source code in <code>src/bloqade/ir/control/field.py</code> <pre><code>def show(self, **assignments):\n\"\"\"\n    Interactive visualization of the Field\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Field\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/control/pulse/","title":"Pulse","text":""},{"location":"reference/bloqade/ir/control/pulse/#bloqade.ir.control.pulse.Append","title":"Append","text":"<p>             Bases: <code>PulseExpr</code></p> <pre><code>&lt;append&gt; ::= &lt;expr&gt;+\n</code></pre>"},{"location":"reference/bloqade/ir/control/pulse/#bloqade.ir.control.pulse.Pulse","title":"Pulse","text":"<pre><code>Pulse(field_pairs)\n</code></pre> <p>             Bases: <code>PulseExpr</code></p> <pre><code>&lt;pulse&gt; ::= (&lt;field name&gt; &lt;field&gt;)+\n</code></pre> Source code in <code>src/bloqade/ir/control/pulse.py</code> <pre><code>def __init__(self, field_pairs):\nfields = dict()\nfor k, v in field_pairs.items():\nif isinstance(v, Field):\nfields[k] = v\nelif isinstance(v, dict):\nfields[k] = Field(v)\nelse:\nraise TypeError(f\"Expected Field or dict, got {type(v)}\")\nself.fields = fields\n</code></pre>"},{"location":"reference/bloqade/ir/control/pulse/#bloqade.ir.control.pulse.Pulse.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Pulse</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Pulse</p> <code>{}</code> Source code in <code>src/bloqade/ir/control/pulse.py</code> <pre><code>def show(self, **assignments):\n\"\"\"\n    Interactive visualization of the Pulse\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Pulse\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/control/pulse/#bloqade.ir.control.pulse.PulseExpr","title":"PulseExpr","text":"<pre><code>&lt;expr&gt; ::= &lt;pulse&gt;\n  | &lt;append&gt;\n  | &lt;slice&gt;\n  | &lt;named&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/sequence/","title":"Sequence","text":""},{"location":"reference/bloqade/ir/control/sequence/#bloqade.ir.control.sequence.Sequence","title":"Sequence","text":"<pre><code>Sequence(seq_pairs=None)\n</code></pre> <p>             Bases: <code>SequenceExpr</code></p> <p>Sequence of a program, which includes pulses informations.</p> Source code in <code>src/bloqade/ir/control/sequence.py</code> <pre><code>def __init__(self, seq_pairs: Optional[Dict] = None):\nif seq_pairs is None:\nself.pulses = {}\nreturn\npulses = {}\nfor level_coupling, pulse in seq_pairs.items():\nif not isinstance(level_coupling, LevelCoupling):\nraise TypeError(f\"Unexpected type {type(level_coupling)}\")\nif isinstance(pulse, PulseExpr):\npulses[level_coupling] = pulse\nelif isinstance(pulse, dict):\npulses[level_coupling] = Pulse(pulse)\nelse:\nraise TypeError(f\"Unexpected type {type(pulse)}\")\nself.pulses = pulses\n</code></pre>"},{"location":"reference/bloqade/ir/control/sequence/#bloqade.ir.control.sequence.Sequence.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Sequence</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Sequence</p> <code>{}</code> Source code in <code>src/bloqade/ir/control/sequence.py</code> <pre><code>def show(self, **assignments):\n\"\"\"\n    Interactive visualization of the Sequence\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Sequence\n    \"\"\"\ndisplay_ir(self, assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/","title":"Waveform","text":""},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Add","title":"Add","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;add&gt; ::= &lt;waveform&gt; '+' &lt;waveform&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.AlignedWaveform","title":"AlignedWaveform","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;padded waveform&gt; ::= &lt;waveform&gt; | &lt;waveform&gt; &lt;alignment&gt; &lt;value&gt;\n&lt;alignment&gt; ::= 'left aligned' | 'right aligned'\n&lt;value&gt; ::= 'left value' | 'right value' | &lt;scalar expr&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Append","title":"Append","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;append&gt; ::= &lt;waveform&gt;+\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Constant","title":"Constant","text":"<pre><code>Constant(value, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;constant&gt; ::= 'constant' &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = value</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>the constant value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the constant waveform.</p> required Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, value, duration):\nself.value = cast(value)\nself._duration = cast(duration)\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Instruction","title":"Instruction","text":"<p>             Bases: <code>Waveform</code></p> <p>Instruction node in the IR.</p> <ul> <li><code>&lt;linear&gt;</code></li> <li><code>&lt;constant&gt;</code></li> <li><code>&lt;poly&gt;</code></li> <li><code>&lt;python-fn&gt;</code></li> </ul> <pre><code>&lt;instruction&gt; ::= &lt;linear&gt;\n    | &lt;constant&gt;\n    | &lt;poly&gt;\n    | &lt;python-fn&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Linear","title":"Linear","text":"<pre><code>Linear(start, stop, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;linear&gt; ::= 'linear' &lt;scalar expr&gt; &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = start + (stop-start)/duration * t</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Scalar</code> <p>start value</p> required <code>stop</code> <code>Scalar</code> <p>stop value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the linear waveform.</p> required Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, start, stop, duration):\nself.start = cast(start)\nself.stop = cast(stop)\nself._duration = cast(duration)\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Negative","title":"Negative","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;negative&gt; ::= '-' &lt;waveform&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Poly","title":"Poly","text":"<pre><code>Poly(coeffs, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;poly&gt; ::= &lt;scalar&gt;+\n</code></pre> <p>f(t=0:duration) = c[0] + c[1]t + c[2]t^2 + ... + c[n-1]t^n-1 + c[n]t^n</p> <p>Parameters:</p> Name Type Description Default <code>coeffs</code> <code>List[Scalar]</code> <p>the coefficients c[] of the polynomial.</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the waveform.</p> required Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, coeffs, duration):\nself.coeffs = cast(coeffs)\nself._duration = cast(duration)\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.PythonFn","title":"PythonFn","text":"<pre><code>PythonFn(fn, duration)\n</code></pre> <p>             Bases: <code>Instruction</code></p> <pre><code>&lt;python-fn&gt; ::= 'python-fn' &lt;python function def&gt; &lt;scalar expr&gt;\n</code></pre> Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, fn: Callable, duration: Any):\nself.fn = fn\nself._duration = cast(duration)\nsignature = inspect.getfullargspec(fn)\nif signature.varargs is not None:\nraise ValueError(\"Cannot have `*args` in function definition\")\nif signature.varkw is not None:\nraise ValueError(\"Cannot have `**kwargs` in function definition\")\n# get default kwonly first:\nvariables = []\nself.default_param_values = {}\nself.default_arguements = {}\nif signature.kwonlydefaults is not None:\nfor name, value in signature.kwonlydefaults.items():\nif isinstance(value, (Real, Decimal)):\nvariables.append(name)\nself.default_param_values[name] = Decimal(str(value))\nelse:\n# self.default_arguements[name] = value\nraise ValueError(\nf\"Default value for parameter {name} is not Real or Decimal, \"\n\"cannot convert to Variable.\"\n)\nvariables += signature.args[1:]\nvariables += signature.kwonlyargs\nself.parameters = list(map(var, variables))\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Record","title":"Record","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;record&gt; ::= 'record' &lt;waveform&gt; &lt;var&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Sample","title":"Sample","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;sample&gt; ::= 'sample' &lt;waveform&gt; &lt;interpolation&gt; &lt;scalar&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Scale","title":"Scale","text":"<pre><code>Scale(scalar, waveform)\n</code></pre> <p>             Bases: <code>Waveform</code></p> <pre><code>&lt;scale&gt; ::= &lt;scalar expr&gt; '*' &lt;waveform&gt;\n</code></pre> Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, scalar, waveform: Waveform):\nself.scalar = cast(scalar)\nself.waveform = waveform\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Slice","title":"Slice","text":"<p>             Bases: <code>Waveform</code></p> <pre><code>&lt;slice&gt; ::= &lt;waveform&gt; &lt;scalar.interval&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Smooth","title":"Smooth","text":"<pre><code>Smooth(radius, kernel, waveform)\n</code></pre> <p>             Bases: <code>Waveform</code></p> <pre><code>&lt;smooth&gt; ::= 'smooth' &lt;kernel&gt; &lt;waveform&gt;\n</code></pre> Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def __init__(self, radius, kernel, waveform):\nif isinstance(kernel, str):\nif kernel == \"Guassian\":\nkernel = GaussianKernel\nelif kernel == \"Logistic\":\nkernel = LogisticKernel\nelif kernel == \"Sigmoid\":\nkernel = SigmoidKernel\nelif kernel == \"Triangle\":\nkernel = TriangleKernel\nelif kernel == \"Uniform\":\nkernel = UniformKernel\nelif kernel == \"Parabolic\":\nkernel = ParabolicKernel\nelif kernel == \"Biweight\":\nkernel = BiweightKernel\nelif kernel == \"Triweight\":\nkernel = TriweightKernel\nelif kernel == \"Tricube\":\nkernel = TricubeKernel\nelif kernel == \"Cosine\":\nkernel = CosineKernel\nelse:\nraise ValueError(f\"Invalid kernel: {kernel}\")\nself.radius = cast(radius)\nself.kernel = kernel\nself.waveform = waveform\nsuper().__init__()\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Waveform","title":"Waveform","text":"<p>Waveform node in the IR.</p> <ul> <li><code>&lt;instruction&gt;</code></li> <li><code>&lt;smooth&gt;</code></li> <li><code>&lt;slice&gt;</code></li> <li><code>&lt;apppend&gt;</code></li> <li><code>&lt;negative&gt;</code></li> <li><code>&lt;scale&gt;</code></li> <li><code>&lt;add&gt;</code></li> <li><code>&lt;record&gt;</code></li> <li><code>&lt;sample&gt;</code></li> </ul> <pre><code>&lt;waveform&gt; ::= &lt;instruction&gt;\n    | &lt;smooth&gt;\n    | &lt;slice&gt;\n    | &lt;append&gt;\n    | &lt;negative&gt;\n    | &lt;scale&gt;\n    | &lt;add&gt;\n    | &lt;record&gt;\n    | &lt;sample&gt;\n</code></pre>"},{"location":"reference/bloqade/ir/control/waveform/#bloqade.ir.control.waveform.Waveform.figure","title":"figure","text":"<pre><code>figure(**assignments)\n</code></pre> <p>get figure of the plotting the waveform.</p> <p>Returns:</p> Name Type Description <code>figure</code> <p>a bokeh figure</p> Source code in <code>src/bloqade/ir/control/waveform.py</code> <pre><code>def figure(self, **assignments):\n\"\"\"get figure of the plotting the waveform.\n    Returns:\n        figure: a bokeh figure\n    \"\"\"\nreturn get_ir_figure(self, **assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/location/","title":"Index","text":""},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty <code>ListOfLocations</code>.</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li>|_ <code>start.rydberg</code>: for <code>Rydberg</code>     Level coupling</li> <li>|_ <code>start.hyperfine</code>: for <code>Hyperfine</code>     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li>|_ <code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li><code>Scalar</code> objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement","title":"AtomArrangement","text":"<p>             Bases: <code>ProgramStart</code>, <code>TransformTrait</code></p>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n\"\"\"enumerate all locations in the register.\"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n\"\"\"obtain a figure object from the atom arrangement.\"\"\"\nreturn get_atom_arrangement_figure(self, fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.BoundedBravais","title":"BoundedBravais","text":"<pre><code>BoundedBravais(*shape, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>AtomArrangement</code></p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, *shape: int, lattice_spacing: ScalarType = 1.0):\nself.shape = shape\nself.lattice_spacing = cast(lattice_spacing)\nself.__n_atoms = None\nself.__n_dims = None\nsuper().__init__()\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.BoundedBravais.__match_args__","title":"__match_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__match_args__ = ('shape', 'lattice_spacing')\n</code></pre> <p>Base classe for Bravais lattices <code>AtomArrangement</code>.</p> <ul> <li><code>Square</code></li> <li><code>Chain</code></li> <li><code>Honeycomb</code></li> <li><code>Triangular</code></li> <li><code>Lieb</code></li> <li><code>Kagome</code></li> <li><code>Rectangular</code></li> </ul>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.BoundedBravais.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>dimension of the lattice</p> <p>Returns:</p> Name Type Description <code>int</code> <p>dimension of the lattice</p>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.BoundedBravais.coordinates","title":"coordinates","text":"<pre><code>coordinates(index)\n</code></pre> <p>calculate the coordinates of a cell in the lattice given the cell index.</p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef coordinates(self, index: List[int]) -&gt; NDArray:\n\"\"\"calculate the coordinates of a cell in the lattice\n    given the cell index.\n    \"\"\"\n# damn! this is like stone age broadcasting\nvectors = np.array(self.cell_vectors())\nindex = np.array(index)\npos = np.sum(vectors.T * index, axis=1)\nreturn pos + np.array(self.cell_atoms())\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.BoundedBravais.scale","title":"scale","text":"<pre><code>scale(factor)\n</code></pre> <p>Scale the current location with a factor.</p> <p>(x,y) -&gt; factor*(x,y)</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>str | Real | Decimal | Scalar</code> <p>scale factor</p> required <p>Returns:</p> Name Type Description <code>BoundedBravais</code> <code>BoundedBravais</code> <p>The lattice with the scaled locations</p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef scale(self, factor: ScalarType) -&gt; \"BoundedBravais\":\n\"\"\"Scale the current location with a factor.\n    (x,y) -&gt; factor*(x,y)\n    Args:\n        factor (str | Real | Decimal | Scalar): scale factor\n    Returns:\n        BoundedBravais: The lattice with the scaled locations\n    \"\"\"\nfactor = cast(factor)\nobj = self.__new__(type(self))\nfor f in fields(self):\nif f.name == \"lattice_spacing\":\nobj.lattice_spacing = factor * self.lattice_spacing\nelse:\nsetattr(obj, f.name, getattr(self, f.name))\nreturn obj\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Chain","title":"Chain","text":"<pre><code>Chain(L, lattice_spacing=1.0, vertical_chain=False)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself, L: int, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\nself.vertical = vertical_chain\nsuper().__init__(L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (\u00bd, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L * 2.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Kagome","title":"Kagome","text":"<pre><code>Kagome(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Lieb","title":"Lieb","text":"<pre><code>Lieb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.ParallelRegister","title":"ParallelRegister","text":"<pre><code>ParallelRegister(register, cluster_spacing)\n</code></pre> <p>             Bases: <code>ProgramStart</code></p> <p>Parallel Register</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>@beartype\ndef __init__(self, register: AtomArrangement, cluster_spacing: ScalarType):\nself._register = register\nself._cluster_spacing = cast(cluster_spacing)\nif register.n_atoms &gt; 0:\n# calculate bounding box\n# of this register\nlocation_iter = register.enumerate()\n(x, y) = next(location_iter).position\nx_min = x\nx_max = x\ny_min = y\ny_max = y\nfor location_info in location_iter:\n(x, y) = location_info.position\nx_min = x.min(x_min)\nx_max = x.max(x_max)\ny_min = y.min(y_min)\ny_max = y.max(y_max)\nshift_x = (x_max - x_min) + cluster_spacing\nshift_y = (y_max - y_min) + cluster_spacing\nregister_locations = [\nlist(location_info.position) for location_info in register.enumerate()\n]\nregister_filling = [\nlocation_info.filling.value for location_info in register.enumerate()\n]\nshift_vectors = [[shift_x, cast(0)], [cast(0), shift_y]]\nelse:\nraise ValueError(\"No locations to parallelize.\")\nself.register_locations = register_locations\nself.register_filling = register_filling\nself.shift_vectors = shift_vectors\nsuper().__init__(self)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\nwidth,\nheight,\nlattice_spacing_x=1.0,\nlattice_spacing_y=None,\n)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>None</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself,\nwidth: int,\nheight: int,\nlattice_spacing_x: ScalarType = 1.0,\nlattice_spacing_y: Optional[ScalarType] = None,\n):\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\nif lattice_spacing_y is None:\nself.ratio = cast(1.0) / cast(lattice_spacing_x)\nelse:\nself.ratio = cast(lattice_spacing_y) / cast(lattice_spacing_x)\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Square","title":"Square","text":"<pre><code>Square(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/#bloqade.ir.location.Triangular","title":"Triangular","text":"<pre><code>Triangular(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/base/","title":"Base","text":""},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement","title":"AtomArrangement","text":"<p>             Bases: <code>ProgramStart</code>, <code>TransformTrait</code></p>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n\"\"\"enumerate all locations in the register.\"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n\"\"\"obtain a figure object from the atom arrangement.\"\"\"\nreturn get_atom_arrangement_figure(self, fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/bloqade/ir/location/base/#bloqade.ir.location.base.ParallelRegister","title":"ParallelRegister","text":"<pre><code>ParallelRegister(register, cluster_spacing)\n</code></pre> <p>             Bases: <code>ProgramStart</code></p> <p>Parallel Register</p> Source code in <code>src/bloqade/ir/location/base.py</code> <pre><code>@beartype\ndef __init__(self, register: AtomArrangement, cluster_spacing: ScalarType):\nself._register = register\nself._cluster_spacing = cast(cluster_spacing)\nif register.n_atoms &gt; 0:\n# calculate bounding box\n# of this register\nlocation_iter = register.enumerate()\n(x, y) = next(location_iter).position\nx_min = x\nx_max = x\ny_min = y\ny_max = y\nfor location_info in location_iter:\n(x, y) = location_info.position\nx_min = x.min(x_min)\nx_max = x.max(x_max)\ny_min = y.min(y_min)\ny_max = y.max(y_max)\nshift_x = (x_max - x_min) + cluster_spacing\nshift_y = (y_max - y_min) + cluster_spacing\nregister_locations = [\nlist(location_info.position) for location_info in register.enumerate()\n]\nregister_filling = [\nlocation_info.filling.value for location_info in register.enumerate()\n]\nshift_vectors = [[shift_x, cast(0)], [cast(0), shift_y]]\nelse:\nraise ValueError(\"No locations to parallelize.\")\nself.register_locations = register_locations\nself.register_filling = register_filling\nself.shift_vectors = shift_vectors\nsuper().__init__(self)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/","title":"Bravais","text":""},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.BoundedBravais","title":"BoundedBravais","text":"<pre><code>BoundedBravais(*shape, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>AtomArrangement</code></p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, *shape: int, lattice_spacing: ScalarType = 1.0):\nself.shape = shape\nself.lattice_spacing = cast(lattice_spacing)\nself.__n_atoms = None\nself.__n_dims = None\nsuper().__init__()\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.BoundedBravais.__match_args__","title":"__match_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__match_args__ = ('shape', 'lattice_spacing')\n</code></pre> <p>Base classe for Bravais lattices <code>AtomArrangement</code>.</p> <ul> <li><code>Square</code></li> <li><code>Chain</code></li> <li><code>Honeycomb</code></li> <li><code>Triangular</code></li> <li><code>Lieb</code></li> <li><code>Kagome</code></li> <li><code>Rectangular</code></li> </ul>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.BoundedBravais.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>dimension of the lattice</p> <p>Returns:</p> Name Type Description <code>int</code> <p>dimension of the lattice</p>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.BoundedBravais.coordinates","title":"coordinates","text":"<pre><code>coordinates(index)\n</code></pre> <p>calculate the coordinates of a cell in the lattice given the cell index.</p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef coordinates(self, index: List[int]) -&gt; NDArray:\n\"\"\"calculate the coordinates of a cell in the lattice\n    given the cell index.\n    \"\"\"\n# damn! this is like stone age broadcasting\nvectors = np.array(self.cell_vectors())\nindex = np.array(index)\npos = np.sum(vectors.T * index, axis=1)\nreturn pos + np.array(self.cell_atoms())\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.BoundedBravais.scale","title":"scale","text":"<pre><code>scale(factor)\n</code></pre> <p>Scale the current location with a factor.</p> <p>(x,y) -&gt; factor*(x,y)</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>str | Real | Decimal | Scalar</code> <p>scale factor</p> required <p>Returns:</p> Name Type Description <code>BoundedBravais</code> <code>BoundedBravais</code> <p>The lattice with the scaled locations</p> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef scale(self, factor: ScalarType) -&gt; \"BoundedBravais\":\n\"\"\"Scale the current location with a factor.\n    (x,y) -&gt; factor*(x,y)\n    Args:\n        factor (str | Real | Decimal | Scalar): scale factor\n    Returns:\n        BoundedBravais: The lattice with the scaled locations\n    \"\"\"\nfactor = cast(factor)\nobj = self.__new__(type(self))\nfor f in fields(self):\nif f.name == \"lattice_spacing\":\nobj.lattice_spacing = factor * self.lattice_spacing\nelse:\nsetattr(obj, f.name, getattr(self, f.name))\nreturn obj\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Chain","title":"Chain","text":"<pre><code>Chain(L, lattice_spacing=1.0, vertical_chain=False)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself, L: int, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\nself.vertical = vertical_chain\nsuper().__init__(L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (\u00bd, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L * 2.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Kagome","title":"Kagome","text":"<pre><code>Kagome(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Lieb","title":"Lieb","text":"<pre><code>Lieb(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\nwidth,\nheight,\nlattice_spacing_x=1.0,\nlattice_spacing_y=None,\n)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>None</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\nself,\nwidth: int,\nheight: int,\nlattice_spacing_x: ScalarType = 1.0,\nlattice_spacing_y: Optional[ScalarType] = None,\n):\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\nif lattice_spacing_y is None:\nself.ratio = cast(1.0) / cast(lattice_spacing_x)\nelse:\nself.ratio = cast(lattice_spacing_y) / cast(lattice_spacing_x)\nsuper().__init__(width, height, lattice_spacing=lattice_spacing_x)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Square","title":"Square","text":"<pre><code>Square(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/bravais/#bloqade.ir.location.bravais.Triangular","title":"Triangular","text":"<pre><code>Triangular(L, lattice_spacing=1.0)\n</code></pre> <p>             Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (\u00bd, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>src/bloqade/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(self, L: int, lattice_spacing: ScalarType = 1.0):\nsuper().__init__(L, L, lattice_spacing=lattice_spacing)\n</code></pre>"},{"location":"reference/bloqade/ir/location/list/","title":"List","text":""},{"location":"reference/bloqade/ir/location/list/#bloqade.ir.location.list.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty <code>ListOfLocations</code>.</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li>|_ <code>start.rydberg</code>: for <code>Rydberg</code>     Level coupling</li> <li>|_ <code>start.hyperfine</code>: for <code>Hyperfine</code>     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li>|_ <code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li><code>Scalar</code> objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bloqade/ir/location/quera_task_result/","title":"Quera task result","text":""},{"location":"reference/bloqade/ir/location/quera_task_result/#bloqade.ir.location.quera_task_result.QuEraTaskResults","title":"QuEraTaskResults","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/bloqade/ir/location/quera_task_result/#bloqade.ir.location.quera_task_result.QuEraTaskResults.export_as_probabilities","title":"export_as_probabilities","text":"<pre><code>export_as_probabilities()\n</code></pre> <p>converts from shot results to probabilities</p> <p>Returns:</p> Name Type Description <code>TaskProbabilities</code> <code>TaskProbabilities</code> <p>The task results as probabilties</p> Source code in <code>src/bloqade/ir/location/quera_task_result.py</code> <pre><code>def export_as_probabilities(self) -&gt; TaskProbabilities:\n\"\"\"converts from shot results to probabilities\n    Returns:\n        TaskProbabilities: The task results as probabilties\n    \"\"\"\ncounts = dict()\nnshots = len(self.shot_outputs)\nfor shot_result in self.shot_outputs:\npre_sequence_str = \"\".join(str(bit) for bit in shot_result.pre_sequence)\npost_sequence_str = \"\".join(str(bit) for bit in shot_result.post_sequence)\nconfiguration = (pre_sequence_str, post_sequence_str)\n# iterative average\ncurrent_count = counts.get(configuration, 0)\ncounts[configuration] = current_count + 1\nprobabilities = [(config, count / nshots) for config, count in counts.items()]\nreturn TaskProbabilities(probabilities=probabilities)\n</code></pre>"},{"location":"reference/bloqade/ir/location/transform/","title":"Transform","text":""},{"location":"reference/bloqade/ir/location/transform/#bloqade.ir.location.transform.TransformTrait","title":"TransformTrait","text":""},{"location":"reference/bloqade/ir/location/transform/#bloqade.ir.location.transform.TransformTrait.add_position","title":"add_position","text":"<pre><code>add_position(position, filling=None)\n</code></pre> <p>Add a position or multiple positions to a pre-existing geometry.</p> <p><code>add_position</code> is capable of accepting: - A single tuple for one atom coordinate: <code>(1.0, 2.5)</code> - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.] - A numpy array of shape (N, 2) where N is the number of atoms</p> <p>You may also intersperse variables anywhere a value may be present.</p> <p>You can also pass in an optional argument which determines the atom \"filling\" (whether or not at a specified coordinate an atom should be present).</p> <p>Usage Example: <pre><code># single coordinate\n&gt;&gt;&gt; reg = start.add_position((0,0))\n# you may chain add_position calls\n&gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n# you can add variables anywhere a value may be present\n&gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n# and specify your atom fillings\n&gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n[True, False])\n# alternatively you could use one boolean to specify\n# all coordinates should be empty/filled\n&gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n(5.2, 2.2)], False)\n</code></pre></p> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li>|_ <code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li>|_ <code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li>|_ <code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li>|_ <code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li>|_ <code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li>|_ <code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li>|_ <code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>src/bloqade/ir/location/transform.py</code> <pre><code>def add_position(\nself,\nposition: Union[\nPositionArray,\nList[Tuple[ScalarType, ScalarType]],\nTuple[ScalarType, ScalarType],\n],\nfilling: Optional[Union[BoolArray, List[bool], bool]] = None,\n) -&gt; \"ListOfLocations\":\n\"\"\"\n    Add a position or multiple positions to a pre-existing geometry.\n    `add_position` is capable of accepting:\n    - A single tuple for one atom coordinate: `(1.0, 2.5)`\n    - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.]\n    - A numpy array of shape (N, 2) where N is the number of atoms\n    You may also intersperse variables anywhere a value may be present.\n    You can also pass in an optional argument which determines the atom \"filling\"\n    (whether or not at a specified coordinate an atom should be present).\n    Usage Example:\n    ```\n    # single coordinate\n    &gt;&gt;&gt; reg = start.add_position((0,0))\n    # you may chain add_position calls\n    &gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n    # you can add variables anywhere a value may be present\n    &gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n    # and specify your atom fillings\n    &gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n    [True, False])\n    # alternatively you could use one boolean to specify\n    # all coordinates should be empty/filled\n    &gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n    (5.2, 2.2)], False)\n    ```\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - |_ `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - |_ `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - |_ `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - |_ `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - |_ `...add_position(positions).rydberg`: to specify Rydberg coupling\n        - |_ `...add_position(positions).hyperfine`: to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - |_ `...add_position(positions).show()`:\n        shows your geometry in your web browser\n    \"\"\"\nreturn self._add_position(position, filling)\n</code></pre>"},{"location":"reference/bloqade/ir/location/transform/#bloqade.ir.location.transform.TransformTrait.apply_defect_count","title":"apply_defect_count","text":"<pre><code>apply_defect_count(n_defects, rng=np.random.default_rng())\n</code></pre> <p>Drop <code>n_defects</code> atoms from the geometry randomly. Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p> <p>Usage Example:</p> <pre><code>&gt;&gt;&gt; from bloqade.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n# you may also chain apply_defect_count calls\n&gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n# you can also use apply_defect_count on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li>|_ <code>...apply_defect_count(defect_counts).add_position(positions)</code>:     to add more positions</li> <li>|_ <code>...apply_defect_count(defect_counts)     .apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li>|_ <code>...apply_defect_count(defect_counts)     .apply_defect_density(defect_probability)</code>:     to drop out atoms with a certain probability</li> <li>|_ <code>...apply_defect_count(defect_counts).scale(scale)</code>:     to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li>|_ <code>...apply_defect_count(defect_counts).rydberg</code>: to specify     Rydberg coupling</li> <li>|_ <code>...apply_defect_count(defect_counts).hyperfine</code>:     to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li>|_ <code>...apply_defect_count(defect_counts).show()</code>:     shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>src/bloqade/ir/location/transform.py</code> <pre><code>@beartype\ndef apply_defect_count(\nself, n_defects: int, rng: np.random.Generator = np.random.default_rng()\n):\n\"\"\"\n    Drop `n_defects` atoms from the geometry randomly. Internally this occurs\n    by setting certain sites to have a SiteFilling set to false indicating\n    no atom is present at the coordinate.\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; from bloqade.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n    # you may also chain apply_defect_count calls\n    &gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n    # you can also use apply_defect_count on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n    ```\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - |_ `...apply_defect_count(defect_counts).add_position(positions)`:\n            to add more positions\n        - |_ `...apply_defect_count(defect_counts)\n            .apply_defect_count(n_defects)`: to randomly drop out n_atoms\n        - |_ `...apply_defect_count(defect_counts)\n            .apply_defect_density(defect_probability)`:\n            to drop out atoms with a certain probability\n        - |_ `...apply_defect_count(defect_counts).scale(scale)`:\n            to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - |_ `...apply_defect_count(defect_counts).rydberg`: to specify\n            Rydberg coupling\n        - |_ `...apply_defect_count(defect_counts).hyperfine`:\n            to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - |_ `...apply_defect_count(defect_counts).show()`:\n            shows your geometry in your web browser\n    \"\"\"\nfrom .list import ListOfLocations\nfrom .base import LocationInfo, SiteFilling\nlocation_list = []\nfor location_info in self.enumerate():\nlocation_list.append(location_info)\nfilled_sites = []\nfor index, location_info in enumerate(location_list):\nif location_info.filling is SiteFilling.filled:\nfilled_sites.append(index)\nif n_defects &gt;= len(filled_sites):\nraise ValueError(\nf\"n_defects {n_defects} must be less than the number of filled sites \"\nf\"({len(filled_sites)})\"\n)\nfor _ in range(n_defects):\nindex = rng.choice(filled_sites)\nlocation_list[index] = LocationInfo(\nlocation_list[index].position,\n(False if location_list[index].filling is SiteFilling.filled else True),\n)\nfilled_sites.remove(index)\nreturn ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/bloqade/ir/location/transform/#bloqade.ir.location.transform.TransformTrait.apply_defect_density","title":"apply_defect_density","text":"<pre><code>apply_defect_density(\ndefect_probability, rng=np.random.default_rng()\n)\n</code></pre> <p>Drop atoms randomly with <code>defect_probability</code> probability (range of 0 to 1). Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p> <p>Usage Example:</p> <pre><code>&gt;&gt;&gt; from bloqade.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n# you may also chain apply_defect_density calls\n&gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n# you can also use apply_defect_density on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n.apply_defect_density(0.5, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li>|_ <code>...apply_defect_count(defect_counts).add_position(positions)</code>: to add more positions</li> <li>|_ <code>...apply_defect_count(defect_counts).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li>|_ <code>...apply_defect_count(defect_counts) .apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li>|_ <code>...apply_defect_count(defect_counts).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li>|_ <code>...apply_defect_count(defect_counts).rydberg</code>: to specify Rydberg coupling</li> <li>|_ <code>...apply_defect_count(defect_counts).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li>|_ <code>...apply_defect_count(defect_counts).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>src/bloqade/ir/location/transform.py</code> <pre><code>@beartype\ndef apply_defect_density(\nself,\ndefect_probability: float,\nrng: np.random.Generator = np.random.default_rng(),\n):\n\"\"\"\n    Drop atoms randomly with `defect_probability` probability (range of 0 to 1).\n    Internally this occurs by setting certain sites to have a SiteFilling\n    set to false indicating no atom is present at the coordinate.\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; from bloqade.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n    # you may also chain apply_defect_density calls\n    &gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n    # you can also use apply_defect_density on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n    .apply_defect_density(0.5, custom_rng)\n    ```\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - |_ `...apply_defect_count(defect_counts).add_position(positions)`:\n        to add more positions\n        - |_ `...apply_defect_count(defect_counts).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - |_ `...apply_defect_count(defect_counts)\n        .apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - |_ `...apply_defect_count(defect_counts).scale(scale)`:\n        to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - |_ `...apply_defect_count(defect_counts).rydberg`:\n        to specify Rydberg coupling\n        - |_ `...apply_defect_count(defect_counts).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - |_ `...apply_defect_count(defect_counts).show()`:\n        shows your geometry in your web browser\n    \"\"\"\nfrom .list import ListOfLocations\nfrom .base import LocationInfo, SiteFilling\np = min(1, max(0, defect_probability))\nlocation_list = []\nfor location_info in self.enumerate():\nif rng.random() &lt; p:\nlocation_list.append(\nLocationInfo(\nlocation_info.position,\n(\nFalse\nif location_info.filling is SiteFilling.filled\nelse True\n),\n)\n)\nelse:\nlocation_list.append(location_info)\nreturn ListOfLocations(location_list=location_list)\n</code></pre>"},{"location":"reference/bloqade/ir/location/transform/#bloqade.ir.location.transform.TransformTrait.scale","title":"scale","text":"<pre><code>scale(scale)\n</code></pre> <p>Scale the geometry of your atoms.</p> <p>Usage Example: <pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n# atom positions are now (0,0), (2,2)\n&gt;&gt;&gt; new_reg = reg.scale(2)\n# you may also use scale on pre-defined geometries\n&gt;&gt;&gt; from bloqade.atom_arrangement import Chain\n# atoms in the chain will now be 2 um apart versus\n# the default 1 um\n&gt;&gt;&gt; Chain(11).scale(2)\n</code></pre></p> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li>|_ <code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li>|_ <code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li>|_ <code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li>|_ <code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li>|_ <code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li>|_ <code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li>|_ <code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>src/bloqade/ir/location/transform.py</code> <pre><code>@beartype\ndef scale(self, scale: ScalarType):\n\"\"\"\n    Scale the geometry of your atoms.\n    Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n    # atom positions are now (0,0), (2,2)\n    &gt;&gt;&gt; new_reg = reg.scale(2)\n    # you may also use scale on pre-defined geometries\n    &gt;&gt;&gt; from bloqade.atom_arrangement import Chain\n    # atoms in the chain will now be 2 um apart versus\n    # the default 1 um\n    &gt;&gt;&gt; Chain(11).scale(2)\n    ```\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - |_ `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - |_ `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - |_ `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - |_ `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - |_ `...add_position(positions).rydberg`:\n        to specify Rydberg coupling\n        - |_ `...add_position(positions).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - |_ `...add_position(positions).show()`:\n        shows your geometry in your web browser\n    \"\"\"\nfrom .list import ListOfLocations\nfrom .base import LocationInfo\nscale = cast(scale)\nlocation_list = []\nfor location_info in self.enumerate():\nx, y = location_info.position\nnew_position = (scale * x, scale * y)\nlocation_list.append(\nLocationInfo(new_position, bool(location_info.filling.value))\n)\nreturn ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/bloqade/ir/routine/","title":"Index","text":""},{"location":"reference/bloqade/ir/routine/base/","title":"Base","text":""},{"location":"reference/bloqade/ir/routine/base/#bloqade.ir.routine.base.Routine","title":"Routine","text":"<p>             Bases: <code>RoutineBase</code></p> <p>Result of parsing a completed Builder string.</p>"},{"location":"reference/bloqade/ir/routine/bloqade/","title":"Bloqade","text":""},{"location":"reference/bloqade/ir/routine/bloqade/#bloqade.ir.routine.bloqade.BloqadePythonRoutine","title":"BloqadePythonRoutine","text":"<p>             Bases: <code>RoutineBase</code></p>"},{"location":"reference/bloqade/ir/routine/bloqade/#bloqade.ir.routine.bloqade.BloqadePythonRoutine.run","title":"run","text":"<pre><code>run(\nshots,\nargs=(),\nname=None,\nblockade_radius=0.0,\ninteraction_picture=False,\ncache_matrices=False,\nmultiprocessing=False,\nnum_workers=None,\nsolver_name=\"dop853\",\natol=1e-14,\nrtol=1e-07,\nnsteps=2147483647,\n)\n</code></pre> <p>Run the current program using bloqade python backend</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots after running state vector simulation</p> required <code>args</code> <code>Tuple[Real, ...]</code> <p>The values for parameters defined</p> <code>()</code> <code>name</code> <code>Optional[str]</code> <p>Name to give this run. Defaults to None.</p> <code>None</code> <code>blockade_radius</code> <code>float</code> <p>Use the Blockade subspace given a</p> <code>0.0</code> <code>interaction_picture</code> <code>bool</code> <p>Use the interaction picture when</p> <code>False</code> <code>cache_matrices</code> <code>bool</code> <p>Reuse previously evaluated matrcies when</p> <code>False</code> <code>multiprocessing</code> <code>bool</code> <p>Use multiple processes to process the</p> <code>False</code> <code>num_workers</code> <code>Optional[int]</code> <p>Number of processes to run with</p> <code>None</code> <code>solver_name</code> <code>str</code> <p>Which SciPy Solver to use. Defaults to</p> <code>'dop853'</code> <code>atol</code> <code>float</code> <p>Absolute tolerance for ODE solver. Defaults to</p> <code>1e-14</code> <code>rtol</code> <code>float</code> <p>Relative tolerance for adaptive step in ODE solver.</p> <code>1e-07</code> <code>nsteps</code> <code>int</code> <p>Maximum number of steps allowed per integration</p> <code>2147483647</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>Cannot use multiprocessing and cache_matrices at the same time.</p> <p>Returns:</p> Name Type Description <code>LocalBatch</code> <code>LocalBatch</code> <p>Batch of local tasks that have been executed.</p> Source code in <code>src/bloqade/ir/routine/bloqade.py</code> <pre><code>@beartype\ndef run(\nself,\nshots: int,\nargs: Tuple[LiteralType, ...] = (),\nname: Optional[str] = None,\nblockade_radius: float = 0.0,\ninteraction_picture: bool = False,\ncache_matrices: bool = False,\nmultiprocessing: bool = False,\nnum_workers: Optional[int] = None,\nsolver_name: str = \"dop853\",\natol: float = 1e-14,\nrtol: float = 1e-7,\nnsteps: int = 2_147_483_647,\n) -&gt; LocalBatch:\n\"\"\"Run the current program using bloqade python backend\n    Args:\n        shots (int): number of shots after running state vector simulation\n        args (Tuple[Real, ...], optional): The values for parameters defined\n        in `args`. Defaults to ().\n        name (Optional[str], optional): Name to give this run. Defaults to None.\n        blockade_radius (float, optional): Use the Blockade subspace given a\n        particular radius. Defaults to 0.0.\n        interaction_picture (bool, optional): Use the interaction picture when\n        solving schrodinger equation. Defaults to False.\n        cache_matrices (bool, optional): Reuse previously evaluated matrcies when\n        possible. Defaults to False.\n        multiprocessing (bool, optional): Use multiple processes to process the\n        batches. Defaults to False.\n        num_workers (Optional[int], optional): Number of processes to run with\n        multiprocessing. Defaults to None.\n        solver_name (str, optional): Which SciPy Solver to use. Defaults to\n        \"dop853\".\n        atol (float, optional): Absolute tolerance for ODE solver. Defaults to\n        1e-14.\n        rtol (float, optional): Relative tolerance for adaptive step in ODE solver.\n        Defaults to 1e-7.\n        nsteps (int, optional): Maximum number of steps allowed per integration\n        step. Defaults to 2_147_483_647, the maximum value.\n    Raises:\n        ValueError: Cannot use multiprocessing and cache_matrices at the same time.\n    Returns:\n        LocalBatch: Batch of local tasks that have been executed.\n    \"\"\"\nif multiprocessing and cache_matrices:\nraise ValueError(\n\"Cannot use multiprocessing and cache_matrices at the same time.\"\n)\ncompile_options = dict(\nshots=shots,\nargs=args,\nname=name,\nblockade_radius=blockade_radius,\ncache_matrices=cache_matrices,\n)\nsolver_options = dict(\nmultiprocessing=multiprocessing,\nnum_workers=num_workers,\nsolver_name=solver_name,\natol=atol,\nrtol=rtol,\nnsteps=nsteps,\ninteraction_picture=interaction_picture,\n)\nbatch = self._compile(**compile_options)\nbatch._run(**solver_options)\nreturn batch\n</code></pre>"},{"location":"reference/bloqade/ir/routine/braket/","title":"Braket","text":""},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketHardwareRoutine","title":"BraketHardwareRoutine","text":"<p>             Bases: <code>RoutineBase</code></p>"},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketHardwareRoutine.__call__","title":"__call__","text":"<pre><code>__call__(\n*args, shots=1, name=None, shuffle=False, **kwargs\n)\n</code></pre> <p>Compile to a RemoteBatch, which contain Braket backend specific tasks, run_async to Braket, and wait until the results are coming back.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> <code>1</code> <code>args</code> <code>LiteralType</code> <p>additional arguments for args variables.</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/ir/routine/braket.py</code> <pre><code>@beartype\ndef __call__(\nself,\n*args: LiteralType,\nshots: int = 1,\nname: Optional[str] = None,\nshuffle: bool = False,\n**kwargs,\n):\n\"\"\"\n    Compile to a RemoteBatch, which contain\n    Braket backend specific tasks, run_async to Braket,\n    and wait until the results are coming back.\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n    Args:\n        shots (int): number of shots\n        args: additional arguments for args variables.\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n    Return:\n        RemoteBatch\n    \"\"\"\nreturn self.run(shots, args, name, shuffle, **kwargs)\n</code></pre>"},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketHardwareRoutine.run","title":"run","text":"<pre><code>run(shots, args=(), name=None, shuffle=False, **kwargs)\n</code></pre> <p>Compile to a RemoteBatch, which contain Braket backend specific tasks, run_async to Braket, and wait until the results are coming back.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>additional arguments</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/ir/routine/braket.py</code> <pre><code>@beartype\ndef run(\nself,\nshots: int,\nargs: Tuple[LiteralType, ...] = (),\nname: Optional[str] = None,\nshuffle: bool = False,\n**kwargs,\n) -&gt; RemoteBatch:\n\"\"\"\n    Compile to a RemoteBatch, which contain\n    Braket backend specific tasks, run_async to Braket,\n    and wait until the results are coming back.\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n    Args:\n        shots (int): number of shots\n        args (Tuple): additional arguments\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n    Return:\n        RemoteBatch\n    \"\"\"\nbatch = self.run_async(shots, args, name, shuffle, **kwargs)\nbatch.pull()\nreturn batch\n</code></pre>"},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketHardwareRoutine.run_async","title":"run_async","text":"<pre><code>run_async(\nshots, args=(), name=None, shuffle=False, **kwargs\n)\n</code></pre> <p>Compile to a RemoteBatch, which contain Braket backend specific tasks, and run_async to Braket.</p> Note <p>This is async.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>Values of the parameter defined in <code>args</code>, defaults to ()</p> <code>()</code> <code>name</code> <code>str | None</code> <p>custom name of the batch, defaults to None</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/ir/routine/braket.py</code> <pre><code>@beartype\ndef run_async(\nself,\nshots: int,\nargs: Tuple[LiteralType, ...] = (),\nname: Optional[str] = None,\nshuffle: bool = False,\n**kwargs,\n) -&gt; RemoteBatch:\n\"\"\"\n    Compile to a RemoteBatch, which contain\n    Braket backend specific tasks, and run_async to Braket.\n    Note:\n        This is async.\n    Args:\n        shots (int): number of shots\n        args (Tuple): Values of the parameter defined in `args`, defaults to ()\n        name (str | None): custom name of the batch, defaults to None\n        shuffle (bool): shuffle the order of jobs\n    Return:\n        RemoteBatch\n    \"\"\"\nbatch = self._compile(shots, args, name)\nbatch._submit(shuffle, **kwargs)\nreturn batch\n</code></pre>"},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketLocalEmulatorRoutine","title":"BraketLocalEmulatorRoutine","text":"<p>             Bases: <code>RoutineBase</code></p>"},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketLocalEmulatorRoutine.__call__","title":"__call__","text":"<pre><code>__call__(\n*args,\nshots=1,\nname=None,\nmultiprocessing=False,\nnum_workers=None,\n**kwargs\n)\n</code></pre> <p>Compile to a LocalBatch, and run. The LocalBatch contain tasks to run on local emulator.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> <code>1</code> <code>args</code> <code>LiteralType</code> <p>additional arguments for args variables.</p> <code>()</code> <code>multiprocessing</code> <code>bool</code> <p>enable multi-process</p> <code>False</code> <code>num_workers</code> <code>int</code> <p>number of workers to run the emulator</p> <code>None</code> Return <p>LocalBatch</p> Source code in <code>src/bloqade/ir/routine/braket.py</code> <pre><code>@beartype\ndef __call__(\nself,\n*args: LiteralType,\nshots: int = 1,\nname: Optional[str] = None,\nmultiprocessing: bool = False,\nnum_workers: Optional[int] = None,\n**kwargs,\n):\n\"\"\"\n    Compile to a LocalBatch, and run.\n    The LocalBatch contain tasks to run on local emulator.\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n    Args:\n        shots (int): number of shots\n        args: additional arguments for args variables.\n        multiprocessing (bool): enable multi-process\n        num_workers (int): number of workers to run the emulator\n    Return:\n        LocalBatch\n    \"\"\"\nreturn self.run(\nshots,\nargs,\nname,\nmultiprocessing=multiprocessing,\nnum_workers=num_workers,\n**kwargs,\n)\n</code></pre>"},{"location":"reference/bloqade/ir/routine/braket/#bloqade.ir.routine.braket.BraketLocalEmulatorRoutine.run","title":"run","text":"<pre><code>run(\nshots,\nargs=(),\nname=None,\nmultiprocessing=False,\nnum_workers=None,\n**kwargs\n)\n</code></pre> <p>Compile to a LocalBatch, and run. The LocalBatch contain tasks to run on local emulator.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple[LiteralType, ...]</code> <p>additional arguments for args variables.</p> <code>()</code> <code>multiprocessing</code> <code>bool</code> <p>enable multi-process</p> <code>False</code> <code>num_workers</code> <code>int</code> <p>number of workers to run the emulator</p> <code>None</code> Return <p>LocalBatch</p> Source code in <code>src/bloqade/ir/routine/braket.py</code> <pre><code>@beartype\ndef run(\nself,\nshots: int,\nargs: Tuple[LiteralType, ...] = (),\nname: Optional[str] = None,\nmultiprocessing: bool = False,\nnum_workers: Optional[int] = None,\n**kwargs,\n) -&gt; LocalBatch:\n\"\"\"\n    Compile to a LocalBatch, and run.\n    The LocalBatch contain tasks to run on local emulator.\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n    Args:\n        shots (int): number of shots\n        args: additional arguments for args variables.\n        multiprocessing (bool): enable multi-process\n        num_workers (int): number of workers to run the emulator\n    Return:\n        LocalBatch\n    \"\"\"\nbatch = self._compile(shots, args, name)\nbatch._run(multiprocessing=multiprocessing, num_workers=num_workers, **kwargs)\nreturn batch\n</code></pre>"},{"location":"reference/bloqade/ir/routine/params/","title":"Params","text":""},{"location":"reference/bloqade/ir/routine/quera/","title":"Quera","text":""},{"location":"reference/bloqade/ir/routine/quera/#bloqade.ir.routine.quera.QuEraHardwareRoutine","title":"QuEraHardwareRoutine","text":"<p>             Bases: <code>RoutineBase</code></p>"},{"location":"reference/bloqade/ir/routine/quera/#bloqade.ir.routine.quera.QuEraHardwareRoutine.run_async","title":"run_async","text":"<pre><code>run_async(\nshots, args=(), name=None, shuffle=False, **kwargs\n)\n</code></pre> <p>Compile to a RemoteBatch, which contain     QuEra backend specific tasks,     and run_async through QuEra service.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>additional arguments</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/ir/routine/quera.py</code> <pre><code>@beartype\ndef run_async(\nself,\nshots: int,\nargs: Tuple[LiteralType, ...] = (),\nname: Optional[str] = None,\nshuffle: bool = False,\n**kwargs,\n) -&gt; RemoteBatch:\n\"\"\"\n    Compile to a RemoteBatch, which contain\n        QuEra backend specific tasks,\n        and run_async through QuEra service.\n    Args:\n        shots (int): number of shots\n        args (Tuple): additional arguments\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n    Return:\n        RemoteBatch\n    \"\"\"\nbatch = self._compile(shots, args, name)\nbatch._submit(shuffle, **kwargs)\nreturn batch\n</code></pre>"},{"location":"reference/bloqade/submission/","title":"Index","text":""},{"location":"reference/bloqade/submission/base/","title":"Base","text":""},{"location":"reference/bloqade/submission/braket/","title":"Braket","text":""},{"location":"reference/bloqade/submission/mock/","title":"Mock","text":""},{"location":"reference/bloqade/submission/quera/","title":"Quera","text":""},{"location":"reference/bloqade/submission/ir/","title":"Index","text":""},{"location":"reference/bloqade/submission/ir/braket/","title":"Braket","text":""},{"location":"reference/bloqade/submission/ir/capabilities/","title":"Capabilities","text":""},{"location":"reference/bloqade/submission/ir/parallel/","title":"Parallel","text":""},{"location":"reference/bloqade/submission/ir/parallel/#bloqade.submission.ir.parallel.ClusterLocationInfo","title":"ClusterLocationInfo","text":"<p>             Bases: <code>BaseModel</code></p> <p>Class that stores the mapping of batched jobs.</p> <p>Parameters:</p> Name Type Description Default <code>cluster_index</code> <code>int</code> <p>the index of the cluster a site belongs to</p> required <code>global_location_index</code> <code>int</code> <p>the index of the site in the multplexed system</p> required <code>cluster_location_index</code> <code>int</code> <p>the index of the site in the original system</p> required"},{"location":"reference/bloqade/submission/ir/task_results/","title":"Task results","text":""},{"location":"reference/bloqade/submission/ir/task_results/#bloqade.submission.ir.task_results.QuEraTaskResults","title":"QuEraTaskResults","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/bloqade/submission/ir/task_results/#bloqade.submission.ir.task_results.QuEraTaskResults.export_as_probabilities","title":"export_as_probabilities","text":"<pre><code>export_as_probabilities()\n</code></pre> <p>converts from shot results to probabilities</p> <p>Returns:</p> Name Type Description <code>TaskProbabilities</code> <code>TaskProbabilities</code> <p>The task results as probabilties</p> Source code in <code>src/bloqade/submission/ir/task_results.py</code> <pre><code>def export_as_probabilities(self) -&gt; TaskProbabilities:\n\"\"\"converts from shot results to probabilities\n    Returns:\n        TaskProbabilities: The task results as probabilties\n    \"\"\"\ncounts = dict()\nnshots = len(self.shot_outputs)\nfor shot_result in self.shot_outputs:\npre_sequence_str = \"\".join(str(bit) for bit in shot_result.pre_sequence)\npost_sequence_str = \"\".join(str(bit) for bit in shot_result.post_sequence)\nconfiguration = (pre_sequence_str, post_sequence_str)\n# iterative average\ncurrent_count = counts.get(configuration, 0)\ncounts[configuration] = current_count + 1\nprobabilities = [(config, count / nshots) for config, count in counts.items()]\nreturn TaskProbabilities(probabilities=probabilities)\n</code></pre>"},{"location":"reference/bloqade/submission/ir/task_specification/","title":"Task specification","text":""},{"location":"reference/bloqade/task/","title":"Index","text":""},{"location":"reference/bloqade/task/base/","title":"Base","text":""},{"location":"reference/bloqade/task/base/#bloqade.task.base.Report","title":"Report","text":"<pre><code>Report(data, metas, geos, name='')\n</code></pre> Source code in <code>src/bloqade/task/base.py</code> <pre><code>def __init__(self, data, metas, geos, name=\"\") -&gt; None:\nself.dataframe = data  # df\nself._bitstrings = None  # bitstring cache\nself._counts = None  # counts cache\nself.metas = metas\nself.geos = geos\nself.name = name + \" \" + str(datetime.datetime.now())\n</code></pre>"},{"location":"reference/bloqade/task/base/#bloqade.task.base.Report.counts","title":"counts  <code>property</code>","text":"<pre><code>counts\n</code></pre> <p>Get the statistic for the counts for each configuration(s)</p> Return <p>statistic of configuration (str): counts (int) for each task</p>"},{"location":"reference/bloqade/task/base/#bloqade.task.base.Report.bitstrings","title":"bitstrings","text":"<pre><code>bitstrings(filter_perfect_filling=True)\n</code></pre> <p>Get the bitstrings from the data.</p> <p>Parameters:</p> Name Type Description Default <code>filter_perfect_filling</code> <code>bool</code> <p>whether return will</p> <code>True</code> Source code in <code>src/bloqade/task/base.py</code> <pre><code>def bitstrings(self, filter_perfect_filling: bool = True) -&gt; List[NDArray]:\n\"\"\"\n    Get the bitstrings from the data.\n    Args:\n        filter_perfect_filling (bool): whether return will\n        only contain perfect filling shots.\n    \"\"\"\nperfect_sorting = self.dataframe.index.get_level_values(\"perfect_sorting\")\npre_sequence = self.dataframe.index.get_level_values(\"pre_sequence\")\nif filter_perfect_filling:\ndf = self.dataframe[perfect_sorting == pre_sequence]\nelse:\ndf = self.dataframe\ntask_numbers = df.index.get_level_values(\"task_number\").unique()\nbitstrings = []\nfor task_number in task_numbers:\nbitstrings.append(df.loc[task_number, ...].to_numpy())\nreturn bitstrings\n</code></pre>"},{"location":"reference/bloqade/task/base/#bloqade.task.base.Report.list_param","title":"list_param","text":"<pre><code>list_param(field_name)\n</code></pre> <p>List the parameters associate with the given variable field_name for each tasks.</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>variable name</p> required Source code in <code>src/bloqade/task/base.py</code> <pre><code>def list_param(self, field_name: str) -&gt; List[Union[Number, None]]:\n\"\"\"\n    List the parameters associate with the given variable field_name\n    for each tasks.\n    Args:\n        field_name (str): variable name\n    \"\"\"\ndef cast(x):\ntry:\nreturn float(x)\nexcept ValueError:\nreturn x\nreturn list(map(cast, (meta.get(field_name) for meta in self.metas)))\n</code></pre>"},{"location":"reference/bloqade/task/base/#bloqade.task.base.Report.rydberg_densities","title":"rydberg_densities","text":"<pre><code>rydberg_densities(filter_perfect_filling=True)\n</code></pre> <p>Get rydberg density for each task.</p> <p>Parameters:</p> Name Type Description Default <code>filter_perfect_filling</code> <code>bool</code> <p>whether return will</p> <code>True</code> Return <p>per-site rydberg density for each task</p> Source code in <code>src/bloqade/task/base.py</code> <pre><code>def rydberg_densities(self, filter_perfect_filling: bool = True) -&gt; pd.Series:\n\"\"\"\n    Get rydberg density for each task.\n    Args:\n        filter_perfect_filling (bool):  whether return will\n        only contain perfect filling shots.\n    Return:\n        per-site rydberg density for each task\n    \"\"\"\n# TODO: implement nan for missing task numbers\nperfect_sorting = self.dataframe.index.get_level_values(\"perfect_sorting\")\npre_sequence = self.dataframe.index.get_level_values(\"pre_sequence\")\nif filter_perfect_filling:\ndf = self.dataframe[perfect_sorting == pre_sequence]\nelse:\ndf = self.dataframe\nreturn 1 - (df.groupby(\"task_number\").mean())\n</code></pre>"},{"location":"reference/bloqade/task/base/#bloqade.task.base.Report.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Interactive Visualization of the Report</p> Source code in <code>src/bloqade/task/base.py</code> <pre><code>def show(self):\n\"\"\"\n    Interactive Visualization of the Report\n    \"\"\"\ndisplay_report(self)\n</code></pre>"},{"location":"reference/bloqade/task/batch/","title":"Batch","text":""},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.LocalBatch","title":"LocalBatch  <code>dataclass</code>","text":"<p>             Bases: <code>Serializable</code></p>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.LocalBatch.report","title":"report","text":"<pre><code>report()\n</code></pre> <p>Generate analysis report base on currently completed tasks in the LocalBatch.</p> Return <p>Report</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def report(self) -&gt; Report:\n\"\"\"\n    Generate analysis report base on currently\n    completed tasks in the LocalBatch.\n    Return:\n        Report\n    \"\"\"\n## this potentially can be specialize/disatch\n## offline\nindex = []\ndata = []\nmetas = []\ngeos = []\nfor task_number, task in self.tasks.items():\ngeometry = task.geometry\nperfect_sorting = \"\".join(map(str, geometry.filling))\nparallel_decoder = geometry.parallel_decoder\nif parallel_decoder:\ncluster_indices = parallel_decoder.get_cluster_indices()\nelse:\ncluster_indices = {(0, 0): list(range(len(perfect_sorting)))}\nshot_iter = filter(\nlambda shot: shot.shot_status == QuEraShotStatusCode.Completed,\ntask.result().shot_outputs,\n)\nfor shot, (cluster_coordinate, cluster_index) in product(\nshot_iter, cluster_indices.items()\n):\npre_sequence = \"\".join(\nmap(\nstr,\n(shot.pre_sequence[index] for index in cluster_index),\n)\n)\npost_sequence = np.asarray(\n[shot.post_sequence[index] for index in cluster_index],\ndtype=np.int8,\n)\npfc_sorting = \"\".join(\n[perfect_sorting[index] for index in cluster_index]\n)\nkey = (\ntask_number,\ncluster_coordinate,\npfc_sorting,\npre_sequence,\n)\nindex.append(key)\ndata.append(post_sequence)\nmetas.append(task.metadata)\ngeos.append(task.geometry)\nindex = pd.MultiIndex.from_tuples(\nindex, names=[\"task_number\", \"cluster\", \"perfect_sorting\", \"pre_sequence\"]\n)\ndf = pd.DataFrame(data, index=index)\ndf.sort_index(axis=\"index\")\nrept = None\nif self.name is None:\nrept = Report(df, metas, geos, \"Local\")\nelse:\nrept = Report(df, metas, geos, self.name)\nreturn rept\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.LocalBatch.rerun","title":"rerun","text":"<pre><code>rerun(multiprocessing=False, num_workers=None, **kwargs)\n</code></pre> <p>Rerun all the tasks in the LocalBatch.</p> Return <p>Report</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>@beartype\ndef rerun(\nself, multiprocessing: bool = False, num_workers: Optional[int] = None, **kwargs\n):\n\"\"\"\n    Rerun all the tasks in the LocalBatch.\n    Return:\n        Report\n    \"\"\"\nreturn self._run(\nmultiprocessing=multiprocessing, num_workers=num_workers, **kwargs\n)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch","title":"RemoteBatch  <code>dataclass</code>","text":"<p>             Bases: <code>Serializable</code></p>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.total_nshots","title":"total_nshots  <code>property</code>","text":"<pre><code>total_nshots\n</code></pre> <p>Total number of shots of all tasks in the RemoteBatch</p> Return <p>number of shots</p>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Cancel all the tasks in the Batch.</p> Return <p>self</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def cancel(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Cancel all the tasks in the Batch.\n    Return:\n        self\n    \"\"\"\n# cancel all jobs\nfor task in self.tasks.values():\ntask.cancel()\nreturn self\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.fetch","title":"fetch","text":"<pre><code>fetch()\n</code></pre> <p>Fetch the tasks in the Batch.</p> Note <p>Fetching will update the status of tasks, and only pull the results for those tasks that have completed.</p> Return <p>self</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def fetch(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Fetch the tasks in the Batch.\n    Note:\n        Fetching will update the status of tasks,\n        and only pull the results for those tasks\n        that have completed.\n    Return:\n        self\n    \"\"\"\n# online, non-blocking\n# pull the results only when its ready\nfor task in self.tasks.values():\ntask.fetch()\nreturn self\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.get_completed_tasks","title":"get_completed_tasks","text":"<pre><code>get_completed_tasks()\n</code></pre> <p>Create a RemoteBatch object that contain completed tasks from current Batch.</p> <p>Tasks consider completed with following status codes:</p> <ol> <li>Completed</li> <li>Partial</li> </ol> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def get_completed_tasks(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Create a RemoteBatch object that\n    contain completed tasks from current Batch.\n    Tasks consider completed with following status codes:\n    1. Completed\n    2. Partial\n    Return:\n        RemoteBatch\n    \"\"\"\nstatuses = [\n\"Completed\",\n\"Partial\",\n]\nreturn self.get_tasks(*statuses)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.get_failed_tasks","title":"get_failed_tasks","text":"<pre><code>get_failed_tasks()\n</code></pre> <p>Create a RemoteBatch object that contain failed tasks from current Batch.</p> <p>failed tasks with following status codes:</p> <ol> <li>Failed</li> <li>Unaccepted</li> </ol> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def get_failed_tasks(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Create a RemoteBatch object that\n    contain failed tasks from current Batch.\n    failed tasks with following status codes:\n    1. Failed\n    2. Unaccepted\n    Return:\n        RemoteBatch\n    \"\"\"\n# statuses that are in a state that are\n# completed because of an error\nstatuses = [\"Failed\", \"Unaccepted\"]\nreturn self.get_tasks(*statuses)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.get_finished_tasks","title":"get_finished_tasks","text":"<pre><code>get_finished_tasks()\n</code></pre> <p>Create a RemoteBatch object that contain finished tasks from current Batch.</p> <p>Tasks consider finished with following status codes:</p> <ol> <li>Failed</li> <li>Unaccepted</li> <li>Completed</li> <li>Partial</li> <li>Cancelled</li> </ol> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def get_finished_tasks(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Create a RemoteBatch object that\n    contain finished tasks from current Batch.\n    Tasks consider finished with following status codes:\n    1. Failed\n    2. Unaccepted\n    3. Completed\n    4. Partial\n    5. Cancelled\n    Return:\n        RemoteBatch\n    \"\"\"\n# statuses that are in a state that will\n# not run going forward for any reason\nstatuses = [\"Completed\", \"Failed\", \"Unaccepted\", \"Partial\", \"Cancelled\"]\nreturn self.remove_tasks(*statuses)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.get_tasks","title":"get_tasks","text":"<pre><code>get_tasks(*status_codes)\n</code></pre> <p>Get Tasks with specify status_codes.</p> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>@beartype\ndef get_tasks(self, *status_codes: str) -&gt; \"RemoteBatch\":\n\"\"\"\n    Get Tasks with specify status_codes.\n    Return:\n        RemoteBatch\n    \"\"\"\n# offline:\nst_codes = [QuEraTaskStatusCode(x) for x in status_codes]\nnew_task_results = OrderedDict()\nfor task_number, task in self.tasks.items():\nif task.task_result_ir.task_status in st_codes:\nnew_task_results[task_number] = task\nreturn RemoteBatch(self.source, new_task_results, name=self.name)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.pull","title":"pull","text":"<pre><code>pull()\n</code></pre> <p>Pull results of the tasks in the Batch.</p> Note <p>Pulling will pull the results for the tasks. If a given task(s) has not been completed, wait until it finished.</p> Return <p>self</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def pull(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Pull results of the tasks in the Batch.\n    Note:\n        Pulling will pull the results for the tasks.\n        If a given task(s) has not been completed, wait\n        until it finished.\n    Return:\n        self\n    \"\"\"\n# online, blocking\n# pull the results. if its not ready, hanging\nfor task in self.tasks.values():\ntask.pull()\nreturn self\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.remove_failed_tasks","title":"remove_failed_tasks","text":"<pre><code>remove_failed_tasks()\n</code></pre> <p>Create a RemoteBatch object that contain tasks from current Batch, with failed tasks removed.</p> <p>failed tasks with following status codes:</p> <ol> <li>Failed</li> <li>Unaccepted</li> </ol> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def remove_failed_tasks(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Create a RemoteBatch object that\n    contain tasks from current Batch,\n    with failed tasks removed.\n    failed tasks with following status codes:\n    1. Failed\n    2. Unaccepted\n    Return:\n        RemoteBatch\n    \"\"\"\n# statuses that are in a state that will\n# not run going forward because of an error\nstatuses = [\"Failed\", \"Unaccepted\"]\nreturn self.remove_tasks(*statuses)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.remove_invalid_tasks","title":"remove_invalid_tasks","text":"<pre><code>remove_invalid_tasks()\n</code></pre> <p>Create a RemoteBatch object that contain tasks from current Batch, with all Unaccepted tasks removed.</p> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def remove_invalid_tasks(self) -&gt; \"RemoteBatch\":\n\"\"\"\n    Create a RemoteBatch object that\n    contain tasks from current Batch,\n    with all Unaccepted tasks removed.\n    Return:\n        RemoteBatch\n    \"\"\"\nreturn self.remove_tasks(\"Unaccepted\")\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.remove_tasks","title":"remove_tasks","text":"<pre><code>remove_tasks(*status_codes)\n</code></pre> <p>Remove Tasks with specify status_codes.</p> Return <p>RemoteBatch</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>@beartype\ndef remove_tasks(self, *status_codes: str) -&gt; \"RemoteBatch\":\n\"\"\"\n    Remove Tasks with specify status_codes.\n    Return:\n        RemoteBatch\n    \"\"\"\n# offline:\nst_codes = [QuEraTaskStatusCode(x) for x in status_codes]\nnew_results = OrderedDict()\nfor task_number, task in self.tasks.items():\nif task.task_result_ir.task_status in st_codes:\ncontinue\nnew_results[task_number] = task\nreturn RemoteBatch(self.source, new_results, self.name)\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.report","title":"report","text":"<pre><code>report()\n</code></pre> <p>Generate analysis report base on currently completed tasks in the RemoteBatch.</p> Return <p>Report</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def report(self) -&gt; \"Report\":\n\"\"\"\n    Generate analysis report base on currently\n    completed tasks in the RemoteBatch.\n    Return:\n        Report\n    \"\"\"\n## this potentially can be specialize/disatch\n## offline\nindex = []\ndata = []\nmetas = []\ngeos = []\nfor task_number, task in self.tasks.items():\n## fliter not existing results tasks:\nif (task.task_id is None) or (not task._result_exists()):\ncontinue\n## filter has result but is not correctly completed.\nif not task.task_result_ir.task_status == QuEraTaskStatusCode.Completed:\ncontinue\ngeometry = task.geometry\nperfect_sorting = \"\".join(map(str, geometry.filling))\nparallel_decoder = geometry.parallel_decoder\nif parallel_decoder:\ncluster_indices = parallel_decoder.get_cluster_indices()\nelse:\ncluster_indices = {(0, 0): list(range(len(perfect_sorting)))}\nshot_iter = filter(\nlambda shot: shot.shot_status == QuEraShotStatusCode.Completed,\ntask.result().shot_outputs,\n)\nfor shot, (cluster_coordinate, cluster_index) in product(\nshot_iter, cluster_indices.items()\n):\npre_sequence = \"\".join(\nmap(\nstr,\n(shot.pre_sequence[index] for index in cluster_index),\n)\n)\npost_sequence = np.asarray(\n[shot.post_sequence[index] for index in cluster_index],\ndtype=np.int8,\n)\npfc_sorting = \"\".join(\n[perfect_sorting[index] for index in cluster_index]\n)\nkey = (\ntask_number,\ncluster_coordinate,\npfc_sorting,\npre_sequence,\n)\nindex.append(key)\ndata.append(post_sequence)\nmetas.append(task.metadata)\ngeos.append(task.geometry)\nindex = pd.MultiIndex.from_tuples(\nindex, names=[\"task_number\", \"cluster\", \"perfect_sorting\", \"pre_sequence\"]\n)\ndf = pd.DataFrame(data, index=index)\ndf.sort_index(axis=\"index\")\nrept = None\nif self.name is None:\nrept = Report(df, metas, geos, \"Remote\")\nelse:\nrept = Report(df, metas, geos, self.name)\nreturn rept\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.resubmit","title":"resubmit","text":"<pre><code>resubmit(shuffle_submit_order=True)\n</code></pre> <p>Resubmit all the tasks in the RemoteBatch</p> Return <p>self</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>@beartype\ndef resubmit(self, shuffle_submit_order: bool = True) -&gt; \"RemoteBatch\":\n\"\"\"\n    Resubmit all the tasks in the RemoteBatch\n    Return:\n        self\n    \"\"\"\n# online, non-blocking\nself._submit(shuffle_submit_order, force=True)\nreturn self\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.RemoteBatch.tasks_metric","title":"tasks_metric","text":"<pre><code>tasks_metric()\n</code></pre> <p>Get current tasks status metric</p> Return <p>dataframe with [\"task id\", \"status\", \"shots\"]</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def tasks_metric(self) -&gt; pd.DataFrame:\n\"\"\"\n    Get current tasks status metric\n    Return:\n        dataframe with [\"task id\", \"status\", \"shots\"]\n    \"\"\"\n# [TODO] more info on current status\n# offline, non-blocking\ntid = []\ndata = []\nfor int, task in self.tasks.items():\ntid.append(int)\ndat = [None, None, None]\ndat[0] = task.task_id\nif task.task_result_ir is not None:\ndat[1] = task.task_result_ir.task_status.name\ndat[2] = task.task_ir.nshots\ndata.append(dat)\nreturn pd.DataFrame(data, index=tid, columns=[\"task ID\", \"status\", \"shots\"])\n</code></pre>"},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.Serializable","title":"Serializable","text":""},{"location":"reference/bloqade/task/batch/#bloqade.task.batch.Serializable.json","title":"json","text":"<pre><code>json(**options)\n</code></pre> <p>Serialize the object to JSON string.</p> Return <p>JSON string</p> Source code in <code>src/bloqade/task/batch.py</code> <pre><code>def json(self, **options) -&gt; str:\n\"\"\"\n    Serialize the object to JSON string.\n    Return:\n        JSON string\n    \"\"\"\nfrom bloqade import dumps\nreturn dumps(self, **options)\n</code></pre>"},{"location":"reference/bloqade/task/bloqade/","title":"Bloqade","text":""},{"location":"reference/bloqade/task/braket/","title":"Braket","text":""},{"location":"reference/bloqade/task/braket_simulator/","title":"Braket simulator","text":""},{"location":"reference/bloqade/task/json/","title":"Json","text":""},{"location":"reference/bloqade/task/json/#bloqade.task.json.load_batch","title":"load_batch","text":"<pre><code>load_batch(filename_or_io, *backend_args, **backend_kwargs)\n</code></pre> <p>load batch from json file or string io to batch object</p> <p>Parameters:</p> Name Type Description Default <code>filename_or_io</code> <code>Union[str, TextIO]</code> <p>filename or file object pointing to</p> required <code>*backend_args</code> <p>args to pass to backend construction.</p> <code>()</code> <code>**backend_kwargs</code> <p>kwargs to pass to backend construction.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[RemoteBatch, LocalBatch]</code> <p>Union[RemoteBatch, LocalBatch]: the resulting batch object</p> Note <p>The backend args are not always required for <code>LocalBatch</code> objects, but for <code>RemoteBatch</code> objects they are required.</p> Source code in <code>src/bloqade/task/json.py</code> <pre><code>def load_batch(\nfilename_or_io: Union[str, TextIO], *backend_args, **backend_kwargs\n) -&gt; Union[RemoteBatch, LocalBatch]:\n\"\"\"load batch from json file or string io to batch object\n    Args:\n        filename_or_io (Union[str, TextIO]): filename or file object pointing to\n        json file.\n        *backend_args: args to pass to backend construction.\n        **backend_kwargs: kwargs to pass to backend construction.\n    Returns:\n        Union[RemoteBatch, LocalBatch]: the resulting batch object\n    Note:\n        The backend args are not always required for `LocalBatch` objects, but\n        for `RemoteBatch` objects they are required.\n    \"\"\"\ndeserializer = BatchDeserializer(*backend_args, **backend_kwargs)\nif isinstance(filename_or_io, str):\nwith open(filename_or_io, \"r\") as f:\nreturn json.load(f, object_hook=deserializer.object_hook)\nelse:\nreturn json.load(filename_or_io, object_hook=deserializer.object_hook)\n</code></pre>"},{"location":"reference/bloqade/task/json/#bloqade.task.json.save_batch","title":"save_batch","text":"<pre><code>save_batch(filename_or_io, batch)\n</code></pre> <p>save batch to json file or string io</p> <p>Parameters:</p> Name Type Description Default <code>filename_or_io</code> <code>Union[str, TextIO]</code> <p>filename or file object pointing to</p> required <code>batch</code> <code>Union[RemoteBatch, LocalBatch]</code> <p>batch object to save.</p> required Source code in <code>src/bloqade/task/json.py</code> <pre><code>def save_batch(\nfilename_or_io: Union[str, TextIO], batch: Union[RemoteBatch, LocalBatch]\n) -&gt; None:\n\"\"\"save batch to json file or string io\n    Args:\n        filename_or_io (Union[str, TextIO]): filename or file object pointing to\n        json file.\n        batch (Union[RemoteBatch, LocalBatch]): batch object to save.\n    \"\"\"\nif isinstance(filename_or_io, str):\nwith open(filename_or_io, \"w\") as f:\njson.dump(batch, f, cls=BatchSerializer)\nelse:\njson.dump(batch, filename_or_io, cls=BatchSerializer)\n</code></pre>"},{"location":"reference/bloqade/task/quera/","title":"Quera","text":""},{"location":"tree/builder/","title":"Build workflow:","text":"<pre><code>graph TD\n\n  ProgramStart(ProgramStart)\n\n  Coupling[\"[Coupling]\n  Rydberg , Hyperfine\"]\n\n  Detuning[Detuning]\n  Rabi[Rabi]\n\n  Amplitude[Amplitude]\n  Phase[Phase]\n\n  SpaceModulation(SpaceModulation)\n  Waveform{Waveform}\n\n  Options([\"[Options]\n  assign\n  batch_assign\n  args\n  parallelize\n  \"])\n\n  Services([\"[Services]\n  bloqade\n  quera\n  braket\"])\n\n  QuEraBackends([\"[Backends]\n  mock\n  cloud_mock\n  aquila\n  device\n  \"])\n\n  BraketBackends([\"[Backends]\n  aquila\n  local_emulator\n  \"])\n\n  BloqadeBackends([\"[Backends]\n  python\n  julia\n  \"])\n\n  Submit(\"[Submission]\n  submit()\n  run()\n  __call__\")\n\n  ProgramStart --&gt; Coupling;\n  Coupling --&gt; Detuning;\n  Coupling --&gt; Rabi;\n\n  Rabi --&gt; Amplitude;\n  Rabi --&gt; Phase;\n\n  Detuning --&gt; SpaceModulation;\n  Amplitude --&gt; SpaceModulation;\n  Phase --&gt; SpaceModulation;\n\n  SpaceModulation --&gt; Waveform;\n\n  Waveform --&gt; Coupling;\n  Waveform --&gt; Services;\n  Waveform --&gt; Options;\n  Options --&gt; Services;\n\n  Services --&gt;|quera| QuEraBackends;\n  Services --&gt;|braket| BraketBackends;\n  Services --&gt;|bloqade| BloqadeBackends;\n  QuEraBackends --&gt; Submit;\n  BraketBackends --&gt; Submit;\n  BloqadeBackends --&gt; Submit;</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Below you will find some examples of how to use Bloqade.</p> <ol> <li>Rabi Oscillations</li> </ol>"},{"location":"tutorials/scripts/rabi/","title":"Single Qubit Rabi Oscillations","text":"In\u00a0[1]: Copied! <pre>from bloqade import start, cast\nfrom bloqade.task.json import load_batch, save_batch\nfrom decimal import Decimal\nimport matplotlib.pyplot as plt\n</pre> from bloqade import start, cast from bloqade.task.json import load_batch, save_batch from decimal import Decimal import matplotlib.pyplot as plt <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 4\n      2 from bloqade.task.json import load_batch, save_batch\n      3 from decimal import Decimal\n----&gt; 4 import matplotlib.pyplot as plt\n\nModuleNotFoundError: No module named 'matplotlib'</pre> <p>define program with one atom, with constant detuning but variable Rabi frequency, ramping up to \"rabi_value\" and then returning to 0.0.</p> In\u00a0[2]: Copied! <pre>durations = cast([\"ramp_time\", \"run_time\", \"ramp_time\"])\n\nrabi_oscillations_program = (\n    start.add_position((0, 0))\n    .rydberg.rabi.amplitude.uniform.piecewise_linear(\n        durations=durations, values=[0, \"rabi_value\", \"rabi_value\", 0]\n    )\n    .detuning.uniform.constant(duration=sum(durations), value=0)\n)\n</pre> durations = cast([\"ramp_time\", \"run_time\", \"ramp_time\"])  rabi_oscillations_program = (     start.add_position((0, 0))     .rydberg.rabi.amplitude.uniform.piecewise_linear(         durations=durations, values=[0, \"rabi_value\", \"rabi_value\", 0]     )     .detuning.uniform.constant(duration=sum(durations), value=0) ) <p>Assign values to the variables in the program, allowing the <code>run_time</code> (time the Rabi amplitude stays at the value of \"rabi_frequency\" ) to sweep across a range of values.</p> In\u00a0[3]: Copied! <pre>rabi_oscillation_job = rabi_oscillations_program.assign(\n    ramp_time=0.06, rabi_value=15, detuning_value=0.0\n).batch_assign(run_time=[Decimal(\"0.05\") * i for i in range(21)])\n</pre> rabi_oscillation_job = rabi_oscillations_program.assign(     ramp_time=0.06, rabi_value=15, detuning_value=0.0 ).batch_assign(run_time=[Decimal(\"0.05\") * i for i in range(21)]) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 rabi_oscillation_job = rabi_oscillations_program.assign(\n      2 ramp_time=0.06, rabi_value=15, detuning_value=0.0\n      3 ).batch_assign(run_time=[Decimal(\"0.05\") * i for i in range(21)])\n\nFile ~/work/bloqade-python/bloqade-python/src/bloqade/builder/pragmas.py:59, in Assignable.assign(self, **assignments)\n     20 \"\"\"\n     21 Assign values to variables declared previously in the program.\n     22 \n   (...)\n     55 \n     56 \"\"\"\n     57 from bloqade.builder.assign import Assign\n---&gt; 59 return Assign(assignments, parent=self)\n\nFile ~/work/bloqade-python/bloqade-python/src/bloqade/builder/assign.py:83, in Assign.__init__(self, assignments, parent)\n     78 circuit = self.parse_circuit()\n     79 variables = ScanVariablesAnalogCircuit().emit(circuit)\n     81 self._static_params = CastParams(\n     82 circuit.register.n_sites, variables.scalar_vars, variables.vector_vars\n---&gt; 83 ).cast_params(assignments)\n\nFile ~/work/bloqade-python/bloqade-python/src/bloqade/builder/assign.py:53, in CastParams.cast_params(self, params)\n     51 for name, value in params.items():\n     52     if name not in self.scalar_vars and name not in self.vector_vars:\n---&gt; 53         raise ValueError(\n     54             f\"assign parameter '{name}' is not found in analog circuit.\"\n     55         )\n     56     if name in self.vector_vars:\n     57         checked_params[name] = self.cast_vector_param(value, name)\n\nValueError: assign parameter 'detuning_value' is not found in analog circuit.</pre> <p>Run the program in emulation, obtaining a report object. For each possible set of variable values to simulate (in this case, centered around the <code>run_time</code> variable), let the task have 10000 shots.</p> In\u00a0[4]: Copied! <pre>emulator_results = rabi_oscillation_job.braket.local_emulator().run(1000)\nsave_batch(\"rabi-emulator-job.json\", emulator_results)\n</pre> emulator_results = rabi_oscillation_job.braket.local_emulator().run(1000) save_batch(\"rabi-emulator-job.json\", emulator_results) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 emulator_results = rabi_oscillation_job.braket.local_emulator().run(1000)\n      2 save_batch(\"rabi-emulator-job.json\", emulator_results)\n\nNameError: name 'rabi_oscillation_job' is not defined</pre> <p>Submit the same program to hardware, this time using <code>.parallelize</code> to make a copy of the original geometry (a single atom) that fills the FOV (Field-of-View Space), with at least 24 micrometers of distance between each atom.</p> <p>Unlike the emulation above, we only let each task run with 100 shots. A collection of tasks is known as a \"Job\" in Bloqade and jobs can be saved in JSON format so you can reload them later (a necessity considering how long it may take for the machine to handle tasks in the queue)</p> In\u00a0[5]: Copied! <pre>\"\"\"\nhardware_result = rabi_oscillation_job.parallelize(24).braket.aquila().submit(1000)\nsave_batch(\"rabi-job.json\", hardware_result)\n\"\"\"\n</pre> \"\"\" hardware_result = rabi_oscillation_job.parallelize(24).braket.aquila().submit(1000) save_batch(\"rabi-job.json\", hardware_result) \"\"\" Out[5]: <pre>'\\nhardware_result = rabi_oscillation_job.parallelize(24).braket.aquila().submit(1000)\\nsave_batch(\"rabi-job.json\", hardware_result)\\n'</pre> <p>Load JSON and pull results from Braket</p> In\u00a0[6]: Copied! <pre>emulator_report = load_batch(\"rabi-emulator-job.json\").report()\n# hardware_report = load_batch(\"rabi-job.json\").fetch().report()\n\ntimes = emulator_report.list_param(\"run_time\")\nbitstrings = emulator_report.bitstrings()\nemu_density = [ele.mean() for ele in bitstrings]\nplt.plot(times, emu_density)\n\n# bitstrings = hardware_report.bitstrings()\n# qpu_density = [ele.mean() for ele in bitstrings]\n\n# plt.plot(times, qpu_density)\nplt.show()\n</pre> emulator_report = load_batch(\"rabi-emulator-job.json\").report() # hardware_report = load_batch(\"rabi-job.json\").fetch().report()  times = emulator_report.list_param(\"run_time\") bitstrings = emulator_report.bitstrings() emu_density = [ele.mean() for ele in bitstrings] plt.plot(times, emu_density)  # bitstrings = hardware_report.bitstrings() # qpu_density = [ele.mean() for ele in bitstrings]  # plt.plot(times, qpu_density) plt.show() <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 emulator_report = load_batch(\"rabi-emulator-job.json\").report()\n      2 # hardware_report = load_batch(\"rabi-job.json\").fetch().report()\n      4 times = emulator_report.list_param(\"run_time\")\n\nFile ~/work/bloqade-python/bloqade-python/src/bloqade/task/json.py:163, in load_batch(filename_or_io, *backend_args, **backend_kwargs)\n    161 deserializer = BatchDeserializer(*backend_args, **backend_kwargs)\n    162 if isinstance(filename_or_io, str):\n--&gt; 163     with open(filename_or_io, \"r\") as f:\n    164         return json.load(f, object_hook=deserializer.object_hook)\n    165 else:\n\nFileNotFoundError: [Errno 2] No such file or directory: 'rabi-emulator-job.json'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorials/scripts/rabi/#single-qubit-rabi-oscillations","title":"Single Qubit Rabi Oscillations\u00b6","text":""},{"location":"tutorials/scripts/rabi/#introduction","title":"Introduction\u00b6","text":"<p>In this example we show how to use Bloqade to emulate a Rabi oscillation as well as run it on hardware.</p>"}]}