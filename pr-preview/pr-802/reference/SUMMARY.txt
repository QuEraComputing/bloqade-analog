* [bloqade](bloqade/index.md)
    * [atom_arrangement](bloqade/atom_arrangement.md)
    * [builder](bloqade/builder/index.md)
        * [args](bloqade/builder/args.md)
        * [assign](bloqade/builder/assign.md)
        * [backend](bloqade/builder/backend/index.md)
            * [bloqade](bloqade/builder/backend/bloqade.md)
            * [braket](bloqade/builder/backend/braket.md)
            * [quera](bloqade/builder/backend/quera.md)
        * [coupling](bloqade/builder/coupling.md)
        * [drive](bloqade/builder/drive.md)
        * [field](bloqade/builder/field.md)
        * [parallelize](bloqade/builder/parallelize.md)
        * [parse](bloqade/builder/parse/index.md)
            * [builder](bloqade/builder/parse/builder.md)
            * [stream](bloqade/builder/parse/stream.md)
            * [trait](bloqade/builder/parse/trait.md)
        * [pragmas](bloqade/builder/pragmas.md)
        * [route](bloqade/builder/route.md)
        * [sequence_builder](bloqade/builder/sequence_builder.md)
        * [spatial](bloqade/builder/spatial.md)
        * [start](bloqade/builder/start.md)
        * [typing](bloqade/builder/typing.md)
        * [waveform](bloqade/builder/waveform.md)
    * [constants](bloqade/constants.md)
    * [emulate](bloqade/emulate/index.md)
        * [ir](bloqade/emulate/ir/index.md)
            * [atom_type](bloqade/emulate/ir/atom_type.md)
            * [emulator](bloqade/emulate/ir/emulator.md)
            * [space](bloqade/emulate/ir/space.md)
            * [state_vector](bloqade/emulate/ir/state_vector.md)
        * [sparse_operator](bloqade/emulate/sparse_operator.md)
    * [factory](bloqade/factory.md)
    * [ir](bloqade/ir/index.md)
        * [analog_circuit](bloqade/ir/analog_circuit.md)
        * [analysis](bloqade/ir/analysis/index.md)
            * [assignment_scan](bloqade/ir/analysis/assignment_scan.md)
            * [is_constant](bloqade/ir/analysis/is_constant.md)
            * [is_hyperfine](bloqade/ir/analysis/is_hyperfine.md)
            * [scan_variables](bloqade/ir/analysis/scan_variables.md)
        * [control](bloqade/ir/control/index.md)
            * [field](bloqade/ir/control/field.md)
            * [pulse](bloqade/ir/control/pulse.md)
            * [sequence](bloqade/ir/control/sequence.md)
            * [waveform](bloqade/ir/control/waveform.md)
        * [location](bloqade/ir/location/index.md)
            * [bravais](bloqade/ir/location/bravais.md)
            * [location](bloqade/ir/location/location.md)
        * [routine](bloqade/ir/routine/index.md)
            * [base](bloqade/ir/routine/base.md)
            * [bloqade](bloqade/ir/routine/bloqade.md)
            * [braket](bloqade/ir/routine/braket.md)
            * [params](bloqade/ir/routine/params.md)
            * [quera](bloqade/ir/routine/quera.md)
        * [scalar](bloqade/ir/scalar.md)
    * [serialize](bloqade/serialize.md)
    * [submission](bloqade/submission/index.md)
        * [base](bloqade/submission/base.md)
        * [braket](bloqade/submission/braket.md)
        * [ir](bloqade/submission/ir/index.md)
            * [braket](bloqade/submission/ir/braket.md)
            * [capabilities](bloqade/submission/ir/capabilities.md)
            * [parallel](bloqade/submission/ir/parallel.md)
            * [task_results](bloqade/submission/ir/task_results.md)
            * [task_specification](bloqade/submission/ir/task_specification.md)
        * [load_config](bloqade/submission/load_config.md)
        * [mock](bloqade/submission/mock.md)
        * [quera](bloqade/submission/quera.md)
    * [task](bloqade/task/index.md)
        * [base](bloqade/task/base.md)
        * [batch](bloqade/task/batch.md)
        * [bloqade](bloqade/task/bloqade.md)
        * [braket](bloqade/task/braket.md)
        * [braket_simulator](bloqade/task/braket_simulator.md)
        * [quera](bloqade/task/quera.md)
